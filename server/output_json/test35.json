[{"id":"59ea9b65-7ffd-4bbb-ac6f-9f5eab3231bd","title":"@csalgo Chapter Assignment Pro","fileName":"0.Pointers Output.txt","filetype":"text","fileSize":330,"url":"http://older (11)/1.Assignment  Pointers/0.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: Find the output : #include  iostream using namespace std; int main() {  int arr[] = {4, 5, 6, 7};  int *p = (arr + 1);  cout   *arr + 9;  return 0; } 0.12 1.14 2.13 3.error =====Answer===== Correct Option: 2 @csalgo"},{"id":"aa62bb48-7f1d-4f00-bd6f-533665233bc8","title":"@csalgo Chapter Assignment Pro","fileName":"1.Pointers Output.txt","filetype":"text","fileSize":520,"url":"http://older (11)/1.Assignment  Pointers/1.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include  iostream using namespace std; int main () {  int numbers[5];  int * p;  p = numbers; *p = 10;  p = &numbers[2]; *p = 20;  p ; *p = 30;  p = numbers + 3;  *p = 40;  p = numbers;  *(p+4) = 50;  for (int n=0; n 5; n++) {  cout   numbers[n]   \",\";  }  return 0; } 0.10,20,30,40,50, 1.50,40,30,20,10, 2.10,30,20,40,50, 3.None of these =====Answer===== Correct Option: 2 @csalgo"},{"id":"6af12f1f-770d-4503-9981-206f0cfcf4d4","title":"@csalgo Chapter Assignment Pro","fileName":"3.Characters  Pointers.txt","filetype":"text","fileSize":403,"url":"http://older (11)/1.Assignment  Pointers/3.Characters  Pointers.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Characters Pointers Problem Level: EASY Problem Description: #include  iostream using namespace std; int main() {  char arr[20];  int i;  for(i = 0; i   10; i++) {  *(arr + i) = 65 + i;  }  *(arr + i) = ' 0';  cout   arr;  return 0; } 0.ABCDEFGHIJ 1.AAAAAAAAAA 2.JJJJJJJJ 3.none of the mentioned =====Answer===== Correct Option: 0 @csalgo"},{"id":"2bb4d9c4-037e-4bb5-a270-048fb3115975","title":"@csalgo Chapter Assignment Pro","fileName":"2.Pointers Output.txt","filetype":"text","fileSize":326,"url":"http://older (11)/1.Assignment  Pointers/2.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include  iostream using namespace std; int main() { char *ptr; char Str[] = \"abcdefg\";  ptr = Str;  ptr += 5;  cout   ptr;  return 0; } 0.fg 1.cdef 2.defg 3.abcd =====Answer===== Correct Option: 0 @csalgo"},{"id":"e34df3fd-4c5c-4f69-a554-2ee1551c63b7","title":"@csalgo Chapter Assignment Pro","fileName":"5.Pointers Output.txt","filetype":"text","fileSize":401,"url":"http://older (11)/1.Assignment  Pointers/5.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include  iostream using namespace std; int main() {  float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};  float *ptr1 = &arr[0];  float *ptr2 = ptr1 + 3;  cout *ptr2 \" \";  cout  ptr2   ptr1;  return 0; } 0.90.5 3 1.90.5 12 2.10.0 12 3.undefined =====Answer===== Correct Option: 0 @csalgo"},{"id":"65805aa3-5bc8-4689-8f76-ca7c70c040ca","title":"@csalgo Chapter Assignment Pro","fileName":"4.Pointers Output.txt","filetype":"text","fileSize":787,"url":"http://older (11)/1.Assignment  Pointers/4.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include iostream using namespace std; void swap (char *x, char *y) {  char *t = x;  x = y;  y = t; } int main() {  char *x = \"geeksquiz\";  char *y = \"geeksforgeeks\";  char *t;  swap(x, y);  cout x   \" \" y;  t = x;  x = y;  y = t; cout \" \" x  \" \" y;  return 0; } Note: On executing this code, a warning will appear: \"ISO C++ forbids converting a string constant into 'char*'. \" Ignore the warning and then print the expected output. 0.geeksforgeeks geeksquiz geeksforgeeks geeksquiz 1.geeksquiz geeksforgeeks geeksquiz geeksforgeeks 2.geeksquiz geeksforgeeks geeksforgeeks geeksquiz 3.Compiler Error =====Answer===== Correct Option: 2 @csalgo"},{"id":"0da76909-93cc-4386-ac2f-cc27291d0bfc","title":"@csalgo Chapter Assignment Pro","fileName":"6.Pointers Output.txt","filetype":"text","fileSize":407,"url":"http://older (11)/1.Assignment  Pointers/6.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include iostream using namespace std; int main() {  char st[] = \"ABCD\";  for(int i = 0; st[i] != ‘ 0’; i++) {  cout   st[i]   *(st)+i   *(i+st)   i[st];  }  return 0; } 0.AAAABBBBCCCCDDDD 1.ABCD 2.A65AAB66BBC67CCD68DD 3.Compilation Error =====Answer===== Correct Option: 2 @csalgo"},{"id":"b77f29a4-b46b-4988-b905-efba9d19847f","title":"@csalgo Chapter Assignment Pro","fileName":"9.Pointers Output.txt","filetype":"text","fileSize":425,"url":"http://older (11)/1.Assignment  Pointers/9.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: MEDIUM Problem Description: int f(int x, int *py, int **ppz) {  int y, z;  **ppz += 1;  z = **ppz;  *py += 2;  y = *py;  x += 3;  return x + y + z; } int main() {  int c, *b, **a;  c = 4;  b = &c;  a = &b;  cout   f(c, b, a);  return 0; } 0.21 1.18 2.19 3.24 =====Answer===== Correct Option: 2 @csalgo"},{"id":"787a84c4-244a-4fbb-91a0-4165789ee98a","title":"@csalgo Chapter Assignment Pro","fileName":"7.Pointers Output.txt","filetype":"text","fileSize":415,"url":"http://older (11)/1.Assignment  Pointers/7.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include  iostream using namespace std; void Q(int z) {  z += z;  cout z   \" \"; } void P(int *y) {  int x = *y + 2;  Q(x);  *y = x   1; cout x   \" \"; } int main() {  int x = 5;  P(&x);  cout x;  return 0; } 0.7 6 14 1.14 7 5 2.14 7 6 3.14 6 5 =====Answer===== Correct Option: 2 @csalgo"},{"id":"ad8038da-8236-476e-bfb7-6962cd32766f","title":"@csalgo Chapter Assignment Pro","fileName":"8.Pointers Output.txt","filetype":"text","fileSize":372,"url":"http://older (11)/1.Assignment  Pointers/8.Pointers Output.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pointers Output Problem Level: EASY Problem Description: #include iostream using namespace std; int main() {  int ***r, **q, *p, i=8;  p = &i;  (*p)++;  q = &p;  (**q)++;  r = &q;  cout *p   \" \"  **q   \" \" ***r;  return 0; } 0.8 8 8 1.10 10 10 2.9 10 11 3.9 10 10 =====Answer===== Correct Option: 1 @csalgo"},{"id":"1a435d1f-ae57-4f04-a4e7-9c9be1ec7645","title":"@csalgo Assignment Problem Pro","fileName":"1.Address of Variable.txt","filetype":"text","fileSize":246,"url":"http://older (11)/1.Lecture 1  Pointers/1.Address of Variable.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Address of Variable Problem Description: Which of the following gives the memory address of integer variable a ? Options: 0. *a; 1. a; 2. &a; 3. address(a); =====Answer===== Correct Option: 2 @csalgo"},{"id":"f35a2633-905c-46f7-8b28-87ffd6e7490b","title":"@csalgo Assignment Problem Pro","fileName":"1.Pointer Declaration.txt","filetype":"text","fileSize":245,"url":"http://older (11)/1.Lecture 1  Pointers/1.Pointer Declaration.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Pointer Declaration Problem Description: Which of the following is the proper declaration of a pointer? Options: 0. int x; 1. int &x; 2. int *x; 3. ptr x; =====Answer===== Correct Option: 2 @csalgo"},{"id":"5109e349-fb35-4086-8af1-43cbd9c73289","title":"@csalgo Assignment Problem Pro","fileName":"11.Pointers Output.txt","filetype":"text","fileSize":324,"url":"http://older (11)/1.Lecture 1  Pointers/11.Pointers Output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Pointers Output Problem Description: What will be the output ? void increment(int **p){  (**p)++; } int main(){  int num = 10;  int *ptr = &num;  increment(&ptr);  cout   num   endl; } Options: 0. 10 1. 11 2. Error 3. None of these =====Answer===== Correct Option: 1 @csalgo"},{"id":"eab0f5d0-5a16-49fe-bdda-7595aa1f2457","title":"@csalgo Assignment Problem Pro","fileName":"1.Pointers Output.txt","filetype":"text","fileSize":338,"url":"http://older (11)/1.Lecture 1  Pointers/1.Pointers Output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Pointers Output Problem Description: What will be the output ? float f = 10.5; float p = 2.5; float* ptr = &f; (*ptr)++; *ptr = p; cout   *ptr   “ “   f   “ “   p; Options: 0. 2.5 10.5 2.5 1. 2.5 11.5 2.5 2. 2.5 2.5 2.5 3. 11.5 11.5 2.5 =====Answer===== Correct Option: 2 @csalgo"},{"id":"4a23c673-43b9-42b1-ac2d-217f91f4ce51","title":"@csalgo Assignment Problem Pro","fileName":"11.What will be the output .txt","filetype":"text","fileSize":280,"url":"http://older (11)/1.Lecture 1  Pointers/11.What will be the output .txt","fileDetails":"@csalgo Assignment Problem Problem Name: What will be the output ? Problem Description: int a = 100; int *p = &a; int **q = &p; int b = (**q)++ + 4; cout   a   \" \"   b   endl; Options: 0. 100 104 1. 101 104 2. 101 105 3. 100 105 =====Answer===== Correct Option: 1 @csalgo"},{"id":"186b7afe-5445-4365-a677-e1e3fa039845","title":"@csalgo Assignment Problem Pro","fileName":"1.What will be the output .txt","filetype":"text","fileSize":240,"url":"http://older (11)/1.Lecture 1  Pointers/1.What will be the output .txt","fileDetails":"@csalgo Assignment Problem Problem Name: What will be the output ? Problem Description: int *ptr = 0; int a = 10; *ptr = a;  cout   *ptr   endl; Options: 0. 10 1. 0 2. Error 3. None of these =====Answer===== Correct Option: 2 @csalgo"},{"id":"716844cf-96b9-4067-a142-36985ded910d","title":"@csalgo Assignment Problem Pro","fileName":"5.Fill the output.txt","filetype":"text","fileSize":254,"url":"http://older (11)/1.Lecture 1  Pointers/5.Fill the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fill the output Problem Description: Assume that address of 0th index of array ‘a’ is : 200. What is the output  int a[6] = {1, 2, 3}; cout   (a + 2); Options: =====Answer===== Correct Option: 2 @csalgo"},{"id":"e964449e-539e-42fe-8eb2-531b4f723249","title":"@csalgo Assignment Problem Pro","fileName":"5.What is the output.txt","filetype":"text","fileSize":231,"url":"http://older (11)/1.Lecture 1  Pointers/5.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: int a[] = {1, 2, 3, 4}; int *p = a++; cout   *p   endl; Options: 0. 1 1. 2 2. Garbage value 3. Error =====Answer===== Correct Option: 3 @csalgo"},{"id":"ed0a7b60-233c-49f0-b393-2f5a2361bce4","title":"@csalgo Assignment Problem Pro","fileName":"3.Fill the output.txt","filetype":"text","fileSize":318,"url":"http://older (11)/1.Lecture 1  Pointers/3.Fill the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fill the output Problem Description: Assume memory address of variable ‘a’ is : 200 and a double variable is of size 8 bytes, what will be the output  double a = 10.54; double *d = &a; d = d + 1; cout   d   endl; Options: =====Answer===== Correct Option: 1 @csalgo"},{"id":"4db59016-8210-4933-ba93-e0c126bc6b2c","title":"@csalgo Assignment Problem Pro","fileName":"3.What is the output.txt","filetype":"text","fileSize":258,"url":"http://older (11)/1.Lecture 1  Pointers/3.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: int a = 7; int *c = &a; c = c + 1; cout   a   \" \"   *c   endl; Options: 0. Garbage_value 7 1. 7 Garbage_value 2. 8 8 3. 7 7 =====Answer===== Correct Option: 1 @csalgo"},{"id":"142a0c25-0ac0-4b5a-9683-865102c6e55c","title":"@csalgo Assignment Problem Pro","fileName":"7.What is the output.txt","filetype":"text","fileSize":295,"url":"http://older (11)/1.Lecture 1  Pointers/7.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: Assume address of 0th index of array ‘b’ is 200. What is the output  char b[] = \"xyz\"; char *c = &b[0]; c++; cout   c   endl; Options: 0. 201 1. y 2. xyz 3. yz =====Answer===== Correct Option: 3 @csalgo"},{"id":"830fcf11-6859-4201-a2b4-c3d6b735468b","title":"@csalgo Assignment Problem Pro","fileName":"7.Pointers Output.txt","filetype":"text","fileSize":246,"url":"http://older (11)/1.Lecture 1  Pointers/7.Pointers Output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Pointers Output Problem Description: What will be the output ?  char ch = 'a';  char* ptr = &ch;  ch++;  cout   *ptr   endl; Options: 0. a 1. b 2. 97 3. 98 =====Answer===== Correct Option: 1 @csalgo"},{"id":"6902ccf3-e211-42b8-8bbf-b76cb27cb002","title":"@csalgo Assignment Problem Pro","fileName":"7.Fill the output.txt","filetype":"text","fileSize":195,"url":"http://older (11)/1.Lecture 1  Pointers/7.Fill the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fill the output Problem Description: char s[]= \"hello\"; char *p = s; cout   s[0]   \" \"   p[0]; Options: =====Answer===== Correct Option: 3 @csalgo"},{"id":"660b51d8-2267-4a21-839a-6d53bc58d018","title":"@csalgo Assignment Problem Pro","fileName":"9.Fill the output.txt","filetype":"text","fileSize":259,"url":"http://older (11)/1.Lecture 1  Pointers/9.Fill the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fill the output Problem Description: void fun(int a[]) {  cout   a[0]   \" \"; } int main() {  int a[] = {1, 2, 3, 4};  fun(a + 1);  cout   a[0]; } Options: =====Answer===== Correct Option: 0 @csalgo"},{"id":"76bdc319-870a-4ee5-a6bf-30db1b6daacf","title":"@csalgo Assignment Problem Pro","fileName":"9.Pointers Output.txt","filetype":"text","fileSize":324,"url":"http://older (11)/1.Lecture 1  Pointers/9.Pointers Output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Pointers Output Problem Description: What will be the output ? void square(int *p){  int a = 10;  p = &a;  *p = (*p) * (*p); } int main(){  int a = 10;  square(&a);  cout   a   endl; } Options: 0. 100 1. 10 2. Error 3. None of these =====Answer===== Correct Option: 1 @csalgo"},{"id":"c75033f8-e1a4-4e1d-99fc-db3da1987ffc","title":"@csalgo Chapter Assignment Pro","fileName":"0.Find a Node in Linked List.txt","filetype":"text","fileSize":1606,"url":"http://older (11)/10.Assignment  Linked List 1/0.Find a Node in Linked List.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Find a Node in Linked List Problem Level: EASY Problem Description: You have been given a singly linked list of integers. Write a function that returns the index position of an integer data denoted by 'N' (if it exists). Return  1 otherwise. Note : Assume that the Indexing for the singly linked list always starts from 0. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line contains the integer value 'N'. It denotes the data to be searched in the given singly linked list. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case query, return the index position of 'N' in the singly linked list. Return  1, otherwise. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where 'M' is the size of the singly linked list. Time Limit: 1 sec Sample Input 1 : 2 3 4 5 2 6 1 9  1 5 10 20 30 40 50 60 70  1 6 Sample Output 1 : 2 1 Sample Input 2 : 1 3 4 5 2 6 1 9  1 6 Sample Output 2 : 4 Explanation for Sample Input 2 : For the given singly linked list, considering the indices starting from 0, progressing in a left to right manner with a jump of 1, then the N = 6 appears at position 4. =====Answer===== Correct Option: @csalgo"},{"id":"24137636-2779-415c-8f4d-517ef0cc1946","title":"@csalgo Coding Problem Problem","fileName":"10.Delete a Node from Linked List.txt","filetype":"text","fileSize":1690,"url":"http://older (11)/10.Lecture 8  Linked List 1/10.Delete a Node from Linked List.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Delete a Node from Linked List Problem Level: MEDIUM Problem Description: You have been given a linked list of integers. Your task is to write a function that deletes a node from a given position, 'pos'. Note : Assume that the Indexing for the linked list always starts from 0. If the position is greater than or equal to the length of the linked list, you should return the same linked list without any change. Illustration : The following images depict how the deletion has been performed. Image I : Image II : Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the linked list separated by a single space. The second line of each test case contains the integer value of 'pos'. It denotes the position in the linked list from where the node has to be deleted. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the resulting linked list of integers in a row, separated by a single space. Output for every test case will be printed in a seperate line. You don't need to print explicitly, it has been taken care of. Constraints : 1  = t  = 10^2 0  = N  = 10^5 pos  = 0 Time Limit: 1sec Where 'N' is the size of the singly linked list. Sample Input 1 : 1 3 4 5 2 6 1 9  1 3 Sample Output 1 : 3 4 5 6 1 9 Sample Input 2 : 2 3 4 5 2 6 1 9  1 0 10 20 30 40 50 60  1 7 Sample Output 2 : 4 5 2 6 1 9 10 20 30 40 50 60 @csalgo"},{"id":"7603b4aa-3504-409a-ba3e-aa8b60e2b149","title":"@csalgo Coding Problem Problem","fileName":"11.Length of LL (recursive).txt","filetype":"text","fileSize":350,"url":"http://older (11)/10.Lecture 8  Linked List 1/11.Length of LL (recursive).txt","fileDetails":"@csalgo Coding Problem Problem Statement: Length of LL (recursive) Problem Level: EASY Problem Description: Given a linked list, find and return the length of input LL recursively. Input format : Linked list elements (separated by space and terminated by  1) Output format : Length of LL Sample Input : 3 4 5 2 6 1 9  1 Sample Output : 7 @csalgo"},{"id":"7eab511f-ed9e-49a3-a2ed-8fa2718e4756","title":"@csalgo Chapter Assignment Pro","fileName":"2.Eliminate duplicates from LL.txt","filetype":"text","fileSize":1362,"url":"http://older (11)/10.Assignment  Linked List 1/2.Eliminate duplicates from LL.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Eliminate duplicates from LL Problem Level: EASY Problem Description: You have been given a singly linked list of integers where the elements are sorted in ascending order. Write a function that removes the consecutive duplicate values such that the given list only contains unique elements and returns the head to the updated list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements(in ascending order) of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case query, print the resulting singly linked list of integers in a row, separated by a single space. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Time Limit: 1sec Where 'M' is the size of the singly linked list. Sample Input 1 : 1 1 2 3 3 4 3 4 5 4 5 5 7  1 Sample Output 1 : 1 2 3 4 3 4 5 4 5 7 Sample Input 2 : 2 10 20 30 40 50  1 10 10 10 10  1 Sample Output 2 : 10 20 30 40 50 10 =====Answer===== Correct Option: @csalgo"},{"id":"c9f6b510-5225-4d80-b41d-09931f30f77c","title":"@csalgo Chapter Assignment Pro","fileName":"1.AppendLastNToFirst.txt","filetype":"text","fileSize":1799,"url":"http://older (11)/10.Assignment  Linked List 1/1.AppendLastNToFirst.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: AppendLastNToFirst Problem Level: EASY Problem Description: You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line contains the integer value 'N'. It denotes the number of nodes to be moved from last to the front of the singly linked list. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case query, print the resulting singly linked list of integers in a row, separated by a single space. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 0  = N   M Time Limit: 1sec Where 'M' is the size of the singly linked list. Sample Input 1 : 2 1 2 3 4 5  1 3 10 20 30 40 50 60  1 5 Sample Output 1 : 3 4 5 1 2 20 30 40 50 60 10 Sample Input 2 : 1 10 6 77 90 61 67 100  1 4 Sample Output 2 : 90 61 67 100 10 6 77 Explanation to Sample Input 2 : We have been required to move the last 4 nodes to the front of the list. Here, \"90 61 67 100\" is the list which represents the last 4 nodes. When we move this list to the front then the remaining part of the initial list which is, \"10 6 77\" is attached after 100. Hence, the new list formed with an updated head pointing to 90. =====Answer===== Correct Option: @csalgo"},{"id":"fe104fe2-3199-41bc-b536-1c0187e37eca","title":"@csalgo Chapter Assignment Pro","fileName":"3.Print Reverse LinkedList.txt","filetype":"text","fileSize":1416,"url":"http://older (11)/10.Assignment  Linked List 1/3.Print Reverse LinkedList.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print Reverse LinkedList Problem Level: EASY Problem Description: You have been given a singly linked list of integers. Write a function to print the list in a reverse order. To explain it further, you need to start printing the data from the tail and move towards the head of the list, printing the head data at the end. Note : You can’t change any of the pointers in the linked list, just print it in the reverse order. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Constraints : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case, print the singly linked list of integers in a reverse fashion, in a row, separated by a single space. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^3 Time Limit: 1sec Where 'M' is the size of the singly linked list. Sample Input 1 : 1 1 2 3 4 5  1 Sample Output 1 : 5 4 3 2 1 Sample Input 2 : 2 1 2 3  1 10 20 30 40 50  1 Sample Output 2 : 3 2 1 50 40 30 20 10 =====Answer===== Correct Option: @csalgo"},{"id":"6988e09d-b4a8-4c6d-82db-dda30ec21512","title":"@csalgo Coding Problem Problem","fileName":"15.Delete node recursively.txt","filetype":"text","fileSize":1355,"url":"http://older (11)/10.Lecture 8  Linked List 1/15.Delete node recursively.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Delete node recursively Problem Level: EASY Problem Description: Given a singly linked list of integers and position 'i', delete the node present at the 'i th' position in the linked list recursively. Note : Assume that the Indexing for the linked list always starts from 0. No need to print the list, it has already been taken care. Only return the new head to the list. input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line of input contains a single integer depicting the value of 'i'. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. 0  = i   M Time Limit: 1sec Sample Input 1 : 1 3 4 5 2 6 1 9  1 3 Sample Output 1 : 3 4 5 6 1 9 Sample Input 2 : 2 30  1 0 10 20 30 50 60  1 4 Sample Output 2 : 10 20 30 50 @csalgo"},{"id":"40384294-797e-4192-96d9-a66c1b85d898","title":"@csalgo Chapter Assignment Pro","fileName":"4.Palindrome LinkedList.txt","filetype":"text","fileSize":1355,"url":"http://older (11)/10.Assignment  Linked List 1/4.Palindrome LinkedList.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Palindrome LinkedList Problem Level: EASY Problem Description: You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First and the only line of each test case or query contains the the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case, the only line of output that print 'true' if the list is Palindrome or 'false' otherwise. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Time Limit: 1sec Where 'M' is the size of the singly linked list. Sample Input 1 : 1 9 2 3 3 2 9  1 Sample Output 1 : true Sample Input 2 : 2 0 2 3 2 5  1 1 Sample Output 2 : false true Explanation for the Sample Input 2 : For the first query, it is pretty intuitive that the the given list is not a palindrome, hence the output is 'false'. For the second query, the list is empty. An empty list is always a palindrome , hence the output is 'true'. =====Answer===== Correct Option: @csalgo"},{"id":"84bb50d8-97b7-439b-a063-8709fb235881","title":"@csalgo Coding Problem Problem","fileName":"13.Insert in LL recursively.txt","filetype":"text","fileSize":896,"url":"http://older (11)/10.Lecture 8  Linked List 1/13.Insert in LL recursively.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Insert in LL recursively Problem Level: EASY Problem Description: Given a linked list, an integer n and a position i, Insert that node n into Linked List at ith position recursively. If position i is greater than length of LL, then you should return the same LL without any change. And if position i is equal to length of input LL, insert the node at last position. Indexing starts from 0. You don't need to print the elements, just insert and return the head of updated LL. Input format : Line 1 : Linked list elements (separated by space and terminated by  1) Line 2 : Integer i (position) Line 3 : Integer n (Node to be inserted) Output format : Updated LL elements (separated by space) Sample Input 1 : 3 4 5 2 6 1 9  1 3 100 Sample Output 1 : 3 4 5 100 2 6 1 9 Sample Input 2 : 3 4 5 2 6 1 9  1 0 20 Sample Output 2 : 20 3 4 5 2 6 1 9 @csalgo"},{"id":"9b59ab18-4e60-4ed5-b7f0-bfab69484072","title":"@csalgo Assignment Problem Pro","fileName":"3.What is the output.txt","filetype":"text","fileSize":728,"url":"http://older (11)/10.Lecture 8  Linked List 1/3.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: class Node{ public:  int data;  Node *next;  Node(int data){  this   data = data;  this   next = NULL;  } }; void print(Node *head){  Node *temp = head;  while(temp != NULL){  cout   temp   data   \" \";  temp = temp   next;  }  cout   endl; } int main(){  Node *node1 = new Node(10);  Node *node2 = new Node(20);  Node *node3 = new Node(20);  Node *node4 = new Node(20);  node1   next = node2;  node2   next = node3;  node3   next = node4;  print(node2); } Options: 0. 10 20 30 40 1. 20 30 40 2. Error 3. None =====Answer===== Correct Option: 3 @csalgo"},{"id":"5237229f-239c-4e7d-85c2-81aa93350285","title":"@csalgo Coding Problem Problem","fileName":"7.Print i-th Node Data.txt","filetype":"text","fileSize":1324,"url":"http://older (11)/10.Lecture 8  Linked List 1/7.Print i-th Node Data.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Print i th Node Data Problem Level: EASY Problem Description: For a given a singly linked list of integers and a position 'i', print the node data at the 'i th' position. Note : Assume that the Indexing for the singly linked list always starts from 0. If the given position 'i', is greater than the length of the given singly linked list, then don't print anything. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line contains the value of 'i'. It denotes the position in the given singly linked list. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case, print the node data at the 'i th' position of the linked list(if exists). Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = N  = 10^5 i  = 0 Time Limit: 1sec Sample Input 1 : 1 3 4 5 2 6 1 9  1 3 Sample Output 1 : 2 Sample Input 2 : 2 3 4 5 2 6 1 9  1 0 9 8 4 0 7 8  1 3 Sample Output 2 : 3 0 @csalgo"},{"id":"c5ee699c-b550-41ce-b930-354fa672fceb","title":"@csalgo Assignment Problem Pro","fileName":"3.Linked List Usecase.txt","filetype":"text","fileSize":323,"url":"http://older (11)/10.Lecture 8  Linked List 1/3.Linked List Usecase.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Linked List Usecase Problem Description: Linked List are best suited: Options: 0. for relatively permanent collections of data. 1. for the size of the structure is constantly changing. 2. for random Access of elements 3. None of these =====Answer===== Correct Option: 1 @csalgo"},{"id":"fc3a7aef-d8d1-4e3c-b739-d3449199eb88","title":"@csalgo Coding Problem Problem","fileName":"6.Length of a Singly Linked List(Iterative).txt","filetype":"text","fileSize":992,"url":"http://older (11)/10.Lecture 8  Linked List 1/6.Length of a Singly Linked List(Iterative).txt","fileDetails":"@csalgo Coding Problem Problem Statement: Length of a Singly Linked List(Iterative) Problem Level: EASY Problem Description: For a given singly linked list of integers, find and return its length. Do it using an iterative method. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First and the only line of each test case or query contains elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element. Output format : For each test case, print the length of the linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = N  = 10^5 Time Limit: 1sec Sample Input 1 : 1 3 4 5 2 6 1 9  1 Sample Output 1 : 7 Sample Input 2 : 2 10 76 39  3 2 9  23 9  1 1 Sample Output 2 : 8 0 @csalgo"},{"id":"15d2a43e-b197-432b-8ce3-f4a63eeb90b6","title":"@csalgo Chapter Assignment Pro","fileName":"2.Delete every N nodes.txt","filetype":"text","fileSize":1887,"url":"http://older (11)/11.Assignment Linked List 2/2.Delete every N nodes.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Delete every N nodes Problem Level: MEDIUM Problem Description: You have been given a singly linked list of integers along with two integers, 'M,' and 'N.' Traverse the linked list such that you retain the 'M' nodes, then delete the next 'N' nodes. Continue the same until the end of the linked list. To put it in other words, in the given linked list, you need to delete N nodes after every M nodes. Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line of input contains two integer values 'M,' and 'N,' respectively. A single space will separate them. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = P  = 10^5 Where P is the size of the singly linked list. 0  = M  = 10^5 0  = N  = 10^5 Time Limit: 1sec Sample Input 1 : 1 1 2 3 4 5 6 7 8  1 2 2 Sample Output 1 : 1 2 5 6 Sample Input 2 : 2 10 20 30 40 50 60  1 0 1 1 2 3 4 5 6 7 8  1 2 3 Sample Output 2 : 1 2 6 7 Explanation of Sample Input 2 : For the first query, we delete one node after every zero elements hence removing all the items of the list. Therefore, nothing got printed. For the second query, we delete three nodes after every two nodes, resulting in the final list, 1   2   6   7. =====Answer===== Correct Option: @csalgo"},{"id":"327a86a1-c0c4-4a0d-bd8c-c092f4c2c4bc","title":"@csalgo Chapter Assignment Pro","fileName":"5.Bubble Sort (Iterative) LinkedList.txt","filetype":"text","fileSize":1210,"url":"http://older (11)/11.Assignment Linked List 2/5.Bubble Sort (Iterative) LinkedList.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Bubble Sort (Iterative) LinkedList Problem Level: MEDIUM Problem Description: Given a singly linked list of integers, sort it using 'Bubble Sort.' Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the sorted singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 10 9 8 7 6 5 4 3  1 Sample Output 1 :  3 4 5 6 7 8 9 10 Sample Output 2 : 2 1 10  5 9 90 5 67 1 89  1 Sample Output 2 : 5 1 5 9 10 67 89 90 =====Answer===== Correct Option: @csalgo"},{"id":"4baa9c01-a9d9-4709-936e-331eedef1143","title":"@csalgo Chapter Assignment Pro","fileName":"3.Swap two Nodes of LL.txt","filetype":"text","fileSize":1511,"url":"http://older (11)/11.Assignment Linked List 2/3.Swap two Nodes of LL.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Swap two Nodes of LL Problem Level: MEDIUM Problem Description: You have been given a singly linked list of integers along with two integers, 'i,' and 'j.' Swap the nodes that are present at the 'i th' and 'j th' positions. Note : Remember, the nodes themselves must be swapped and not the datas. No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line of input contains two integer values 'i,' and 'j,' respectively. A single space will separate them. Remember consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. 0  = i   M 0  = j   M Time Limit: 1sec Sample Input 1 : 1 3 4 5 2 6 1 9  1 3 4 Sample Output 1 : 3 4 5 6 2 1 9 Sample Input 2 : 2 10 20 30 40  1 1 2 70 80 90 25 65 85 90  1 0 6 Sample Output 2 : 10 30 20 40 90 80 90 25 65 85 70 =====Answer===== Correct Option: @csalgo"},{"id":"e3b983c2-018d-4ffa-9e1e-3f54ba99b2f3","title":"@csalgo Chapter Assignment Pro","fileName":"1.Even after Odd LinkedList.txt","filetype":"text","fileSize":1310,"url":"http://older (11)/11.Assignment Linked List 2/1.Even after Odd LinkedList.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Even after Odd LinkedList Problem Level: MEDIUM Problem Description: For a given singly linked list of integers, arrange the elements such that all the even numbers are placed after the odd numbers. The relative order of the odd and even terms should remain unchanged. Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format: The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format: For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 1 4 5 2  1 Sample Output 1 : 1 5 4 2 Sample Input 2 : 2 1 11 3 6 8 0 9  1 10 20 30 40  1 Sample Output 2 : 1 11 3 9 6 8 0 10 20 30 40 =====Answer===== Correct Option: @csalgo"},{"id":"8c51a638-3d54-42a5-99e5-640fc2e61f60","title":"@csalgo Coding Problem Problem","fileName":"1.Midpoint LinkedList.txt","filetype":"text","fileSize":1313,"url":"http://older (11)/11.Lecture 9 Linked List 2/1.Midpoint LinkedList.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Midpoint LinkedList Problem Level: EASY Problem Description: For a given singly linked list of integers, find and return the node present at the middle of the list. Note : If the length of the singly linked list is even, then return the first middle node. Example: Consider, 10   20   30   40 is the given list, then the nodes present at the middle with respective data values are, 20 and 30. We return the first node with data 20. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output Format : For each test case query, print the data value of the node at the middle of the given list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 1 2 3 4 5  1 Sample Output 1 : 3 Sample Input 2 : 2  1 1 2 3 4  1 Sample Output 2 : 2 @csalgo"},{"id":"ddc9a868-088f-41d2-ab24-cbb96fc1d58f","title":"@csalgo Chapter Assignment Pro","fileName":"0.Find a node in LL (recursive).txt","filetype":"text","fileSize":1368,"url":"http://older (11)/11.Assignment Linked List 2/0.Find a node in LL (recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Find a node in LL (recursive) Problem Level: EASY Problem Description: Given a singly linked list of integers and an integer n, find and return the index for the first occurrence of 'n' in the linked list.  1 otherwise. Follow a recursive approach to solve this. Note : Assume that the Indexing for the linked list always starts from 0. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line of input contains a single integer depicting the value of 'n'. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 3 4 5 2 6 1 9  1 100 Sample Output 1 : 1 Sample Input 2 : 2 10 20010 30 400 600  1 20010 100 200 300 400 9000  34  1 34 Sample Output 2 : 1 5 =====Answer===== Correct Option: @csalgo"},{"id":"b06d6778-3c56-4d73-bc21-0e303bfb48eb","title":"@csalgo Chapter Assignment Pro","fileName":"4.kReverse.txt","filetype":"text","fileSize":1689,"url":"http://older (11)/11.Assignment Linked List 2/4.kReverse.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: kReverse Problem Level: HARD Problem Description: Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list. 'k' is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of 'k,' then left out nodes, in the end, should be reversed as well. Example : Given this linked list: 1   2   3   4   5 For k = 2, you should return: 2   1   4   3   5 For k = 3, you should return: 3   2   1   4   5 Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the singly linked list separated by a single space. The second line of input contains a single integer depicting the value of 'k'. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. 0  = k  = M Time Limit: 1sec Sample Input 1 : 1 1 2 3 4 5 6 7 8 9 10  1 4 Sample Output 1 : 4 3 2 1 8 7 6 5 10 9 Sample Input 2 : 2 1 2 3 4 5  1 0 10 20 30 40  1 4 Sample Output 2 : 1 2 3 4 5 40 30 20 10 =====Answer===== Correct Option: @csalgo"},{"id":"feba161a-901a-4483-9596-ddbfc34a5141","title":"@csalgo Assignment Problem Pro","fileName":"13.Circular LL.txt","filetype":"text","fileSize":538,"url":"http://older (11)/11.Lecture 9 Linked List 2/13.Circular LL.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Circular LL Problem Description: Given an unsorted circular linked list, suppose you have reference (or pointer) to its head node only, which of the following operation can be implemented in O(1) time? i) Insertion at the front of the linked list ii) Insertion at the end of the linked list iii) Deletion of the last node of the linked list iv) Deletion of the front node of the linked list Options: 0. I and II 1. I and III 2. I,II and III 3. None =====Answer===== Correct Option: 3 @csalgo"},{"id":"cd0342ae-686f-4c30-8b8c-eb61b14e201e","title":"@csalgo Coding Problem Problem","fileName":"11.Reverse LL (Iterative) .txt","filetype":"text","fileSize":406,"url":"http://older (11)/11.Lecture 9 Linked List 2/11.Reverse LL (Iterative) .txt","fileDetails":"@csalgo Coding Problem Problem Statement: Reverse LL (Iterative) Problem Level: EASY Problem Description: Given a linked list, reverse it iteratively. You don't need to print the elements, just reverse the LL duplicates and return the head of updated LL. `Input format : Linked list elements (separated by space and terminated by  1)`` Sample Input 1 : 1 2 3 4 5  1 Sample Output 1 : 5 4 3 2 1 @csalgo"},{"id":"c8db060c-0550-4045-b662-e11ff0f7c70e","title":"@csalgo Assignment Problem Pro","fileName":"13.Circular doubly LL.txt","filetype":"text","fileSize":558,"url":"http://older (11)/11.Lecture 9 Linked List 2/13.Circular doubly LL.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Circular doubly LL Problem Description: Given an unsorted circular doubly linked list, suppose you have reference (or pointer) to its head node only, which of the following operation can be implemented in O(1) time? i) Insertion at the front of the linked list ii) Insertion at the end of the linked list iii) Deletion of the last node of the linked list iv) Deletion of the front node of the linked list Options: 0. I and II 1. I,II and III 2. I,II,III and IV 3. None =====Answer===== Correct Option: 2 @csalgo"},{"id":"35b20e7d-b1c3-4781-8137-e4ceeee8448b","title":"@csalgo Coding Problem Problem","fileName":"3.Merge Two Sorted Linked Lists.txt","filetype":"text","fileSize":1578,"url":"http://older (11)/11.Lecture 9 Linked List 2/3.Merge Two Sorted Linked Lists.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Merge Two Sorted Linked Lists Problem Level: MEDIUM Problem Description: You have been given two sorted(in ascending order) singly linked lists of integers. Write a function to merge them in such a way that the resulting singly linked list is also sorted(in ascending order) and return the new head to the list. Note : Try solving this in O(1) auxiliary space. No need to print the list, it has already been taken care. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains the elements of the first sorted singly linked list separated by a single space. The second line of the input contains the elements of the second sorted singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output : For each test case query, print the resulting sorted singly linked list, separated by a single space. Output for every test case will be printed in a seperate line. Constraints : 1  = t = 10^2 0  = N  = 10 ^ 4 0  = M  = 10 ^ 4 Where N and M denote the sizes of the singly linked lists. Time Limit: 1sec Sample Input 1 : 1 2 5 8 12  1 3 6 9  1 Sample Output 1 : 2 3 5 6 8 9 12 Sample Input 2 : 2 2 5 8 12  1 3 6 9  1 10 40 60 60 80  1 10 20 30 40 50 60 90 100  1 Sample Output 2 : 2 3 5 6 8 9 12 10 10 20 30 40 40 50 60 60 60 80 90 100 @csalgo"},{"id":"64456f48-fdcf-40a3-979d-6b18402883b0","title":"@csalgo Assignment Problem Pro","fileName":"13.Double LL.txt","filetype":"text","fileSize":553,"url":"http://older (11)/11.Lecture 9 Linked List 2/13.Double LL.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Double LL Problem Description: Given an unsorted doubly Linked List, suppose you have references (or pointer) to its head and tail nodes, which of the following operation can be implemented in O(1) time ? i) Insertion at the front of the linked list ii) Insertion at the end of the linked list iii) Deletion of the last node of the linked list iv) Deletion of the front node of the linked list Options: 0. I and II 1. I and III 2. I,II and III 3. I,II, III and IV =====Answer===== Correct Option: 3 @csalgo"},{"id":"a4106a0f-fd5e-49ff-8ebf-d9b69b39029c","title":"@csalgo Assignment Problem Pro","fileName":"13.Traversal in LL.txt","filetype":"text","fileSize":277,"url":"http://older (11)/11.Lecture 9 Linked List 2/13.Traversal in LL.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Traversal in LL Problem Description: In doubly linked lists, traversal can be done in ? Options: 0. Only forward direction 1. Only reverse direction 2. Both directions 3. None of the above =====Answer===== Correct Option: 2 @csalgo"},{"id":"fb76848c-be5a-4ad7-9e12-9dd4ebbf017c","title":"@csalgo Chapter Assignment Pro","fileName":"1.Reverse Queue.txt","filetype":"text","fileSize":1443,"url":"http://older (11)/12.Assignment Stacks and Queues/1.Reverse Queue.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Reverse Queue Problem Level: EASY Problem Description: You have been given a queue that can store integers as the data. You are required to write a function that reverses the populated queue itself without using any other data structures. Example: Input Format: The first list of input contains an integer 't' denoting the number of test cases queries to be run. Then the test cases follow. The first line input for each test case query contains an integer N, denoting the total number of elements in the queue. The second line of input contains N integers separated by a single space, representing the order in which the elements are enqueued into the queue. Output Format: For each test case query, the only line of output prints the order in which the queue elements are dequeued, all of them separated by a single space. Output for every test case query will be printed on a new line. Note: You are not required to print the expected output explicitly, it has already been taken care of. Just make the changes in the input queue itself. Constraints: 1  = t  = 100 1  = N  = 10^4 2^31  = data  = 2^31   1 Time Limit: 1sec Sample Input 1: 1 6 1 2 3 4 5 10 Note: Here, 1 is at the front and 10 is at the rear of the queue. Sample Output 1: 10 5 4 3 2 1 Sample Input 2: 2 5 2 8 15 1 10 3 10 20 30 Sample Output 2: 10 1 15 8 2 30 20 10 =====Answer===== Correct Option: @csalgo"},{"id":"6db53649-276e-4b0f-b147-ca868b16a208","title":"@csalgo Coding Problem Problem","fileName":"5.MergeSort  Linked List.txt","filetype":"text","fileSize":1156,"url":"http://older (11)/11.Lecture 9 Linked List 2/5.MergeSort  Linked List.txt","fileDetails":"@csalgo Coding Problem Problem Statement: MergeSort Linked List Problem Level: MEDIUM Problem Description: Given a singly linked list of integers, sort it using 'Merge Sort.' Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the sorted singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^5 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 10 9 8 7 6 5 4 3  1 Sample Output 1 :  3 4 5 6 7 8 9 10 Sample Output 2 : 2 1 10  5 9 90 5 67 1 89  1 Sample Output 2 : 5 1 5 9 10 67 89 90 @csalgo"},{"id":"9d1325e0-be89-435b-b23a-7d0f8d7d4d96","title":"@csalgo Coding Problem Problem","fileName":"6.Reverse LL (Recursive).txt","filetype":"text","fileSize":1187,"url":"http://older (11)/11.Lecture 9 Linked List 2/6.Reverse LL (Recursive).txt","fileDetails":"@csalgo Coding Problem Problem Statement: Reverse LL (Recursive) Problem Level: EASY Problem Description: Given a singly linked list of integers, reverse it using recursion and return the head to the modified list. Note : No need to print the list, it has already been taken care. Only return the new head to the list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space. Remember Consider : While specifying the list elements for input,  1 indicates the end of the singly linked list and hence, would never be a list element Output format : For each test case query, print the elements of the updated singly linked list. Output for every test case will be printed in a seperate line. Constraints : 1  = t  = 10^2 0  = M  = 10^4 Where M is the size of the singly linked list. Time Limit: 1sec Sample Input 1 : 1 1 2 3 4 5 6 7 8  1 Sample Output 1 : 8 7 6 5 4 3 2 1 Sample Input 2 : 2 10  1 10 20 30 40 50  1 Sample Output 2 : 10 50 40 30 20 10 @csalgo"},{"id":"7d1c5d7c-d960-4f7e-806e-51fe31a7225b","title":"@csalgo Chapter Assignment Pro","fileName":"0.Reverse a Stack.txt","filetype":"text","fileSize":1244,"url":"http://older (11)/12.Assignment Stacks and Queues/0.Reverse a Stack.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Reverse a Stack Problem Level: MEDIUM Problem Description: You have been given two stacks that can store integers as the data. Out of the two given stacks, one is populated and the other one is empty. You are required to write a function that reverses the populated stack using the one which is empty. For Example: Input Format : The first line of input contains an integer N, denoting the total number of elements in the stack. The second line of input contains N integers separated by a single space, representing the order in which the elements are pushed into the stack. Output Format: The only line of output prints the order in which the stack elements are popped, all of them separated by a single space. Note: You are not required to print the expected output explicitly, it has already been taken care of. Just make the changes in the input stack itself. Constraints: 1  = N  = 10^3 2^31  = data  = 2^31   1 Time Limit: 1sec Sample Input 1: 6 1 2 3 4 5 10 Note: Here, 10 is at the top of the stack. Sample Output 1: 1 2 3 4 5 10 Note: Here, 1 is at the top of the stack. Sample Input 2: 5 2 8 15 1 10 Sample Output 2: 2 8 15 1 10 =====Answer===== Correct Option: @csalgo"},{"id":"5d5b91f9-ec52-494d-843f-21de23539620","title":"@csalgo Chapter Assignment Pro","fileName":"2.Check redundant brackets.txt","filetype":"text","fileSize":1528,"url":"http://older (11)/12.Assignment Stacks and Queues/2.Check redundant brackets.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Check redundant brackets Problem Level: MEDIUM Problem Description: For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced. A pair of the bracket is said to be redundant when a sub expression is surrounded by unnecessary or needless brackets. Example: Expression: (a+b)+c Since there are no needless brackets, hence, the output must be 'false'. Expression: ((a+b)) The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'. Note: You will not get a partial score for this problem. You will get marks only if all the test cases are passed. Input Format : The first and the only line of input contains a string expression, without any spaces in between. Output Format : The first and the only line of output will print either 'true' or 'false'(without the quotes) denoting whether the input expression contains redundant brackets or not. Note: You are not required to print the expected result. It has already been taken care of. Constraints: 0  = N  = 10^6 Where N is the length of the expression. Time Limit: 1 second Sample Input 1: a+(b)+c Sample Output 1: true Explanation: The expression can be reduced to a+b+c. Hence, the brackets are redundant. Sample Input 2: (a+b) Sample Output 2: false =====Answer===== Correct Option: @csalgo"},{"id":"27e996b5-1b44-42e7-9ea5-1c2706460265","title":"@csalgo Chapter Assignment Pro","fileName":"3.Stock Span.txt","filetype":"text","fileSize":1795,"url":"http://older (11)/12.Assignment Stacks and Queues/3.Stock Span.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Stock Span Problem Level: MEDIUM Problem Description: Afzal has been working with an organization called 'Money Traders' for the past few years. The organization is into the money trading business. His manager assigned him a task. For a given array list of stock's prices for N days, find the stock's span for each day. The span of the stock's price today is defined as the maximum number of consecutive days(starting from today and going backwards) for which the price of the stock was less than today's price. For example, if the price of a stock over a period of 7 days are [100, 80, 60, 70, 60, 75, 85], then the stock spans will be [1, 1, 1, 2, 1, 4, 6]. Explanation: On the sixth day when the price of the stock was 75, the span came out to be 4, because the last 4 prices(including the current price of 75) were less than the current or the sixth day's price. Similarly, we can deduce the remaining results. Afzal has to return an array list of spans corresponding to each day's stock's price. Help him to achieve the task. Input Format: The first line of input contains an integer N, denoting the total number of days. The second line of input contains the stock prices of each day. A single space will separate them. Output Format: The only line of output will print the span for each day's stock price. A single space will separate them. Note: You are not required to print the expected output explicitly. It has already been taken care of. Constraints: 0  = N  = 10^7 1  = X  = 10^9 Where X denotes the stock's price for a day. Time Limit: 1 second Sample Input 1: 4 10 10 10 10 Sample Output 1: 1 1 1 1 Sample Input 2: 8 60 70 80 100 90 75 80 120 Sample Output 2: 1 2 3 4 1 1 2 8 =====Answer===== Correct Option: @csalgo"},{"id":"4a949fcd-d148-4d4a-9e53-d30660a2d2be","title":"@csalgo Coding Problem Problem","fileName":"11.Check if the Brackets are Balanced.txt","filetype":"text","fileSize":1412,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/11.Check if the Brackets are Balanced.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Check if the Brackets are Balanced Problem Level: MEDIUM Problem Description: For a given a string expression containing only round brackets or parentheses, check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first. Example: Expression: (()()) Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'. You need to return a boolean value indicating whether the expression is balanced or not. Note: The input expression will not contain spaces in between. Input Format: The first and the only line of input contains a string expression without any spaces in between. Output Format: The only line of output prints 'true' or 'false'. Note: You don't have to print anything explicitly. It has been taken care of. Just implement the function. Constraints: 1  = N  = 10^7  Where N is the length of the expression. Time Limit: 1sec Sample Input 1 : (()()()) Sample Output 1 : true Sample Input 2 : ()()(() Sample Output 2 : false Explanation to Sample Input 2: The initial two pairs of brackets are balanced. But when you see, the opening bracket at the fourth index doesn't have its corresponding closing bracket which makes it imbalanced and in turn, making the whole expression imbalanced. Hence the output prints 'false'. @csalgo"},{"id":"8ced7764-f194-404c-8088-65553f0cbf19","title":"@csalgo Assignment Problem Pro","fileName":"16.Correct order.txt","filetype":"text","fileSize":307,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/16.Correct order.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Correct order Problem Description: If the elements “p”, “q”, “r” and “s” are placed in a queue and are deleted one at a time, in what order will they be removed? Options: 0. srqp 1. pqrs 2. srpq 3. qrsp =====Answer===== Correct Option: 1 @csalgo"},{"id":"ca6e0ed6-fb51-4414-986a-3c31435538b3","title":"@csalgo Chapter Assignment Pro","fileName":"4.Minimum bracket Reversal.txt","filetype":"text","fileSize":1347,"url":"http://older (11)/12.Assignment Stacks and Queues/4.Minimum bracket Reversal.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Minimum bracket Reversal Problem Level: MEDIUM Problem Description: For a given expression in the form of a string, find the minimum number of brackets that can be reversed in order to make the expression balanced. The expression will only contain curly brackets. If the expression can't be balanced, return  1. Example: Expression: {{{{ If we reverse the second and the fourth opening brackets, the whole expression will get balanced. Since we have to reverse two brackets to make the expression balanced, the expected output will be 2. Expression: {{{ In this example, even if we reverse the last opening bracket, we would be left with the first opening bracket and hence will not be able to make the expression balanced and the output will be  1. Input Format : The first and the only line of input contains a string expression, without any spaces in between. Output Format : The only line of output will print the number of reversals required to balance the whole expression. Prints  1, otherwise. Note: You don't have to print anything. It has already been taken care of. Constraints: 0  = N  = 10^6 Where N is the length of the expression. Time Limit: 1sec Sample Input 1: {{{ Sample Output 1: 1 Sample Input 2: {{{{}} Sample Output 2: 1 =====Answer===== Correct Option: @csalgo"},{"id":"2b2f8848-108b-45e3-b2f2-6bf9bc303661","title":"@csalgo Assignment Problem Pro","fileName":"16.Worst case operation.txt","filetype":"text","fileSize":346,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/16.Worst case operation.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Worst case operation Problem Description: In linked list implementation of queue, if only front pointer is maintained, which of the following operation take worst case time (i.e. O(n) )? Options: 0. Insertion from rear 1. Deletion from front 2. Both 3. None =====Answer===== Correct Option: 0 @csalgo"},{"id":"a2f9a43a-5ff8-454e-a1f0-1f30c5457988","title":"@csalgo Coding Problem Problem","fileName":"18.Queue using a Singly Linked List.txt","filetype":"text","fileSize":2972,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/18.Queue using a Singly Linked List.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Queue using a Singly Linked List Problem Level: MEDIUM Problem Description: Implement a Queue Data Structure specifically to store integer data using a Singly Linked List. The data members should be private. You need to implement the following public functions : 1. Constructor: It initialises the data members as required. 2. enqueue(data) : This function should take one argument of type integer. It enqueues the element into the queue and returns nothing. 3. dequeue() : It dequeues removes the element from the front of the queue and in turn, returns the element being dequeued or removed. In case the queue is empty, it returns  1. 4. front() : It returns the element being kept at the front of the queue. In case the queue is empty, it returns  1. 5. getSize() : It returns the size of the queue at any given instance of time. 6. isEmpty() : It returns a boolean value indicating whether the queue is empty or not. Operations Performed on the Stack: Query 1(Denoted by an integer 1): Enqueues an integer data to the queue. Query 2(Denoted by an integer 2): Dequeues the data kept at the front of the queue and returns it to the caller. Query 3(Denoted by an integer 3): Fetches and returns the data being kept at the front of the queue but doesn't remove it, unlike the dequeue function. Query 4(Denoted by an integer 4): Returns the current size of the queue. Query 5(Denoted by an integer 5): Returns a boolean value denoting whether the queue is empty or not. Input Format: The first line contains an integer 'q' which denotes the number of queries to be run against each operation on the queue. Then the test cases follow. Every 'q' lines represent an operation that needs to be performed. For the enqueue operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being enqueued into the queue. For the rest of the operations on the queue, the input line will contain only one integer value, representing the query being performed on the queue. Output Format: For Query 1, you do not need to return anything. For Query 2, prints the data being dequeued from the queue. For Query 3, prints the data kept on the front of the queue. For Query 4, prints the current size of the queue. For Query 5, prints 'true' or 'false'(without quotes). Output for every query will be printed in a separate line. Note: You are not required to print anything explicitly. It has already been taken care of. Just implement the functions. Constraints: 1  = q  = 10^5 1  = x  = 5 2^31  = data  = 2^31   1 and data !=  1 Where 'q' is the total number of queries being performed on the queue, 'x' is the range for every query and data represents the integer pushed into the queue. Time Limit: 1 second Sample Input 1: 7 1 17 1 23 1 11 2 2 2 2 Sample Output 1: 17 23 11 1 Sample Input 2: 3 2 1 10 4 Sample Output 2: 1 1 @csalgo"},{"id":"fad14aa8-55c6-4bca-8d9f-1b2541ee3160","title":"@csalgo Assignment Problem Pro","fileName":"3.Stack.txt","filetype":"text","fileSize":240,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/3.Stack.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Stack Problem Description: A stack is a ? Options: 0. FIFO (First In First Out) list 1. LIFO (Last In First Out) list. 2. Ordered array 3. Linear tree =====Answer===== Correct Option: 1 @csalgo"},{"id":"36e10a02-8d31-4533-b68a-5ae032dc2acb","title":"@csalgo Assignment Problem Pro","fileName":"3.Correct statement.txt","filetype":"text","fileSize":409,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/3.Correct statement.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Correct statement Problem Description: Which of the following statement(s) about stack data structure is are NOT correct? Options: 0. Stack data structure can be implemented using linked list 1. New node can only be added at the top of the stack 2. Stack is the LIFO data structure 3. New node can be added at both ends =====Answer===== Correct Option: 3 @csalgo"},{"id":"f92af317-0063-4c4f-b749-f0750cb3a408","title":"@csalgo Assignment Problem Pro","fileName":"16.Insert element.txt","filetype":"text","fileSize":341,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/16.Insert element.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Insert element Problem Description: In optimized linked list implementation of a queue, where does a new element be inserted? Options: 0. At the head of linked list 1. At the tail of the linked list 2. At the centre position in the linked list 3. None =====Answer===== Correct Option: 1 @csalgo"},{"id":"aa5292de-a2f3-4a37-94b9-361a3fed0a4f","title":"@csalgo Assignment Problem Pro","fileName":"3.Correct Order.txt","filetype":"text","fileSize":307,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/3.Correct Order.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Correct Order Problem Description: If the elements “p”, “q”, “r” and “s” are placed in a stack and are deleted one at a time, in what order will they be removed? Options: 0. srqp 1. pqrs 2. srpq 3. qrsp =====Answer===== Correct Option: 0 @csalgo"},{"id":"cf42805e-0b41-44cc-b335-19664f97bb61","title":"@csalgo Assignment Problem Pro","fileName":"16.Queue.txt","filetype":"text","fileSize":238,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/16.Queue.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Queue Problem Description: A queue is a ? Options: 0. FIFO (First In First Out) list 1. LIFO (Last In First Out) list 2. Ordered array 3. Linear tree =====Answer===== Correct Option: 0 @csalgo"},{"id":"bf802d2a-2763-4a94-a17c-19cd97f1a985","title":"@csalgo Assignment Problem Pro","fileName":"3.Stack implementation.txt","filetype":"text","fileSize":284,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/3.Stack implementation.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Stack implementation Problem Description: Which of the following operation take worst case i.e. linear time (O(n)) in the array implementation of stack? Options: 0. Push 1. Pop 2. IsEmpty 3. None =====Answer===== Correct Option: 3 @csalgo"},{"id":"3929cb07-4813-4d79-9423-dfc52e0a07c9","title":"@csalgo Assignment Problem Pro","fileName":"3.Use recursion.txt","filetype":"text","fileSize":224,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/3.Use recursion.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Use recursion Problem Description: Which data structure is used for implementing recursion? Options: 0. Queue 1. Stack 2. Array 3. List =====Answer===== Correct Option: 1 @csalgo"},{"id":"7e756338-be23-479c-869d-6892dba43a62","title":"@csalgo Coding Problem Problem","fileName":"7.Implementation Stack Using Singly Linked List.txt","filetype":"text","fileSize":3572,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/7.Implementation Stack Using Singly Linked List.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Implementation Stack Using Singly Linked List Problem Level: MEDIUM Problem Description: Implement a Stack Data Structure specifically to store integer data using a Singly Linked List. The data members should be private. You need to implement the following public functions : 1. Constructor: It initialises the data members as required. 2. push(data) : This function should take one argument of type integer. It pushes the element into the stack and returns nothing. 3. pop() : It pops the element from the top of the stack and in turn, returns the element being popped or deleted. In case the stack is empty, it returns  1. 4. top : It returns the element being kept at the top of the stack. In case the stack is empty, it returns  1. 5. size() : It returns the size of the stack at any given instance of time. 6. isEmpty() : It returns a boolean value indicating whether the stack is empty or not. Operations Performed on the Stack: Query 1(Denoted by an integer 1): Pushes an integer data to the stack. Query 2(Denoted by an integer 2): Pops the data kept at the top of the stack and returns it to the caller. Query 3(Denoted by an integer 3): Fetches and returns the data being kept at the top of the stack but doesn't remove it, unlike the pop function. Query 4(Denoted by an integer 4): Returns the current size of the stack. Query 5(Denoted by an integer 5): Returns a boolean value denoting whether the stack is empty or not. Input Format: The first line contains an integer 'q' which denotes the number of queries to be run against each operation in the stack. Then the test cases follow. Every 'q' lines represent an operation that needs to be performed. For the push operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being pushed into the stack. For the rest of the operations on the stack, the input line will contain only one integer value, representing the query being performed on the stack. Output Format: For Query 1, you do not need to return anything. For Query 2, prints the data being popped from the stack. For Query 3, prints the data kept on the top of the stack. For Query 4, prints the current size of the stack. For Query 5, prints 'true' or 'false'(without quotes). Output for every query will be printed in a separate line. Note: You are not required to print anything explicitly. It has already been taken care of. Just implement the function. Constraints: 1  = q  = 10^5 1  = x  = 5 2^31  = data  = 2^31   1 and data !=  1 Where 'q' is the total number of queries being performed on the stack, 'x' is the range for every query and data represents the integer pushed into the stack. Time Limit: 1 second Sample Input 1: 6 1 13 1 47 4 5 2 3 Sample Output 1: 2 false 47 13 Sample Input 2: 4 5 2 1 10 5 Sample Output 2: true 1 false Explanation of Sample Input 2: There are 4 queries in total. The first one is Query 5: It tells whether the stack is empty or not. Since the stack is empty at this point, the output is 'true'. The second one is Query 2: It pops the data from the stack. Since at this point in time, no data exist in the stack hence, it prints  1. The third one is Query 1: It pushes the specified data 10 into the stack and since the function doesn't return anything, nothing is printed. The fourth one is Query 5: It tells whether the stack is empty at this point or not. Since the stack has one element and hence it is not empty, false is printed. @csalgo"},{"id":"8a80db12-07ce-4783-89e2-85e1d1558340","title":"@csalgo Chapter TEST Problem S","fileName":"0.Next Number.txt","filetype":"text","fileSize":696,"url":"http://older (11)/13.Test 2/0.Next Number.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Next Number Problem Level: MEDIUM Problem Description: Given a large number represented in the form of a linked list. Write code to increment the number by 1 in place(i.e. without using extra space). Note: You don't need to print the elements, just update the elements and return the head of updated LL. Input Constraints: 1  = Length of Linked List  =10^6. Input format : Line 1 : Linked list elements (separated by space and terminated by  1) Output Format : Line 1: Updated linked list elements Sample Input 1 : 3 9 2 5  1 Sample Output 1 : 3 9 2 6 Sample Input 2 : 9 9 9  1 Sample Output 1 : 1 0 0 0 =====Answer===== Correct Option: @csalgo"},{"id":"6149a416-4a5a-4805-ae2d-a37a743173cf","title":"@csalgo Assignment Problem Pro","fileName":"16.Insert in queue.txt","filetype":"text","fileSize":369,"url":"http://older (11)/12.Lecture 10  Stacks  Queues/16.Insert in queue.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Insert in queue Problem Description: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue? Options: 0. Only front pointer 1. Only rear pointer 2. Both front and rear pointer 3. None =====Answer===== Correct Option: 2 @csalgo"},{"id":"41564db5-25e1-48dc-b5c9-e3d1d6c67d57","title":"@csalgo Chapter Assignment Pro","fileName":"0.Contains x.txt","filetype":"text","fileSize":929,"url":"http://older (11)/14.Assignment  Trees/0.Contains x.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Contains x Problem Level: EASY Problem Description: Given a generic tree and an integer x, check if x is present in the given tree or not. Return true if x is present, return false otherwise. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. The following line contains an integer, that denotes the value of x. Output format : The first and only line of output contains true, if x is present and false, otherwise. Constraints: Time Limit: 1 sec Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 40 Sample Output 1 : true Sample Input 2 : 10 3 20 30 40 2 40 50 0 0 0 0 4 Sample Output 2: false =====Answer===== Correct Option: @csalgo"},{"id":"d46872c7-a98c-4b84-a7af-7b33b2b59430","title":"@csalgo Chapter Assignment Pro","fileName":"1.Count nodes.txt","filetype":"text","fileSize":875,"url":"http://older (11)/14.Assignment  Trees/1.Count nodes.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Count nodes Problem Level: EASY Problem Description: Given a tree and an integer x, find and return the number of nodes which contains data greater than x. Input format: The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. The following line contains an integer, that denotes the value of x. Output Format : The first and only line of output prints the count of nodes greater than x. Constraints: Time Limit: 1 sec Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 35 Sample Output 1 : 3 Sample Input 2 : 10 3 20 30 40 2 40 50 0 0 0 0 10 Sample Output 2: 5 =====Answer===== Correct Option: @csalgo"},{"id":"19ba4100-00fc-488f-8808-2537363b224c","title":"@csalgo Chapter TEST Problem S","fileName":"1.Dequeue.txt","filetype":"text","fileSize":1236,"url":"http://older (11)/13.Test 2/1.Dequeue.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Dequeue Problem Level: MEDIUM Problem Description: You need to implement a class for Dequeue i.e. for double ended queue. In this queue, elements can be inserted and deleted from both the ends. You don't need to double the capacity. You need to implement the following functions  1. constructor You need to create the appropriate constructor. Size for the queue passed is 10. 2. insertFront  This function takes an element as input and insert the element at the front of queue. Insert the element only if queue is not full. And if queue is full, print  1 and return. 3. insertRear  This function takes an element as input and insert the element at the end of queue. Insert the element only if queue is not full. And if queue is full, print  1 and return. 4. deleteFront  This function removes an element from the front of queue. Print  1 if queue is empty. 5. deleteRear  This function removes an element from the end of queue. Print  1 if queue is empty. 6. getFront  Returns the element which is at front of the queue. Return  1 if queue is empty. 7. getRear  Returns the element which is at end of the queue. Return  1 if queue is empty. =====Answer===== Correct Option: @csalgo"},{"id":"d122a00d-c539-46d3-90e4-3b1ce90b5933","title":"@csalgo Chapter TEST Problem S","fileName":"2.Delete alternate nodes.txt","filetype":"text","fileSize":956,"url":"http://older (11)/13.Test 2/2.Delete alternate nodes.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Delete alternate nodes Problem Level: EASY Problem Description: Given a Singly Linked List of integers, delete all the alternate nodes in the list. Example: List: 10   20   30   40   50   60   null Alternate nodes will be: 20, 40, and 60. Hence after deleting, the list will be: Output: 10   30   50   null Note : The head of the list will remain the same. Don't need to print or return anything. Input format : The first and the only line of input will contain the elements of the Singly Linked List separated by a single space and terminated by  1. Output Format : The only line of output will contain the updated list elements. Input Constraints: 1  = N  = 10^6. Where N is the size of the Singly Linked List Time Limit: 1sec Sample Input 1: 1 2 3 4 5  1 Sample Output 1: 1 3 5 Sample Input 2: 10 20 30 40 50 60 70  1 Sample Output 2: 10 30 50 70 =====Answer===== Correct Option: @csalgo"},{"id":"31d0dda0-3b8a-48e1-b03d-d806b1096d60","title":"@csalgo Chapter Assignment Pro","fileName":"3.Structurally identical.txt","filetype":"text","fileSize":1373,"url":"http://older (11)/14.Assignment  Trees/3.Structurally identical.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Structurally identical Problem Level: MEDIUM Problem Description: Given two generic trees, return true if they are structurally identical. Otherwise return false. Structural Identical If the two given trees are made of nodes with the same values and the nodes are arranged in the same way, then the trees are called identical. Input format : The first line of input contains data of the nodes of the first tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. The following line of input contains data of the nodes of the second tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output format : The first and only line of output contains true, if the given trees are structurally identical and false, otherwise. Constraints: Time Limit: 1 sec Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1 : true Sample Input 2 : 10 3 20 30 40 2 40 50 0 0 0 0 10 3 2 30 40 2 40 50 0 0 0 0 Sample Output 2: false =====Answer===== Correct Option: @csalgo"},{"id":"98548e5f-b02b-4216-b89b-9daf4b4c3e3f","title":"@csalgo Chapter Assignment Pro","fileName":"2.Node with maximum child sum.txt","filetype":"text","fileSize":882,"url":"http://older (11)/14.Assignment  Trees/2.Node with maximum child sum.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Node with maximum child sum Problem Level: MEDIUM Problem Description: Given a generic tree, find and return the node for which sum of its data and data of all its child nodes is maximum. In the sum, data of the node and data of its immediate child nodes has to be taken. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output format : The first and only line of output contains the data of the node with maximum sum, as described in the task. Constraints: Time Limit: 1 sec Sample Input 1 : 5 3 1 2 3 1 15 2 4 5 1 6 0 0 0 0 Sample Output 1 : 1 =====Answer===== Correct Option: @csalgo"},{"id":"b58ba646-d7e1-460f-a4c6-a29e092c6136","title":"@csalgo Chapter Assignment Pro","fileName":"4.Next larger.txt","filetype":"text","fileSize":1018,"url":"http://older (11)/14.Assignment  Trees/4.Next larger.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Next larger Problem Level: MEDIUM Problem Description: Given a generic tree and an integer n. Find and return the node with next larger element in the tree i.e. find a node with value just greater than n. Note: Return NULL if no node is present with the value greater than n. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. The following line contains an integer, that denotes the value of n. Output format : The first and only line of output contains data of the node, whose data is just greater than n. Constraints: Time Limit: 1 sec Sample Input 1 : 18 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1 : 20 Sample Input 2 : 21 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 2: 30 =====Answer===== Correct Option: @csalgo"},{"id":"568c2ede-dccf-4ff0-96e9-9aad32bcc856","title":"@csalgo Chapter Assignment Pro","fileName":"6.Replace with depth.txt","filetype":"text","fileSize":872,"url":"http://older (11)/14.Assignment  Trees/6.Replace with depth.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Replace with depth Problem Level: MEDIUM Problem Description: You are given a generic tree. You have to replace each node with its depth value. You just have to update the data of each node, there is no need to return or print anything. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output format: The updated tree is printed level wise. Each level is printed in a new line. Please refer to sample output 1 for more details. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1: 0 1 1 1 2 2 =====Answer===== Correct Option: @csalgo"},{"id":"cfc1c791-d9a1-4e6e-8d84-add8f9bc10bb","title":"@csalgo Coding Problem Problem","fileName":"10.Height of generic Tree.txt","filetype":"text","fileSize":662,"url":"http://older (11)/14.Lecture 11  Trees/10.Height of generic Tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Height of generic Tree Problem Level: EASY Problem Description: Given a generic tree, find and return the height of given tree. Input format: The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output prints the height of the given generic tree. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1: 3 @csalgo"},{"id":"834b6117-7178-49a1-9b48-e84ca53b81e8","title":"@csalgo Coding Problem Problem","fileName":"13.Count leaf Nodes.txt","filetype":"text","fileSize":699,"url":"http://older (11)/14.Lecture 11  Trees/13.Count leaf Nodes.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Count leaf Nodes Problem Level: EASY Problem Description: Given a generic tree, count and return the number of leaf nodes present in the given tree. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output prints the count of leaf nodes present in the given tree. Constraints: Time Limit: 1 sec Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1 : 4 @csalgo"},{"id":"47617648-f2cc-414b-924c-e0b2db3d8ab3","title":"@csalgo Chapter Assignment Pro","fileName":"5.Second Largest Element In Tree.txt","filetype":"text","fileSize":809,"url":"http://older (11)/14.Assignment  Trees/5.Second Largest Element In Tree.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Second Largest Element In Tree Problem Level: MEDIUM Problem Description: Given a generic tree, find and return the node with second largest value in given tree. Note: Return NULL if no node with required value is present. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output contains data of the node with second largest data. Constraints: Time Limit: 1 sec Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1 : 40 =====Answer===== Correct Option: @csalgo"},{"id":"501bd3de-5f1a-4d38-ad87-690b489ce45a","title":"@csalgo Coding Problem Problem","fileName":"5.Print Tree level wise.txt","filetype":"text","fileSize":1044,"url":"http://older (11)/14.Lecture 11  Trees/5.Print Tree level wise.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Print Tree level wise Problem Level: MEDIUM Problem Description: Given a generic tree, print the input tree in level wise order. For printing a node with data N, you need to follow the exact format  N:x1,x2,x3,...,xn where, N is data of any node present in the generic tree. x1, x2, x3, ...., xn are the children of node N. Note that there is no space in between. You need to print all nodes in the level order form in different lines. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output contains the elements of the tree in level wise order, as described in the task. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1: 10:20,30,40 20:40,50 30: 40: 40: 50: @csalgo"},{"id":"14d1c886-85dd-4b9f-863e-f533d0568a2c","title":"@csalgo Coding Problem Problem","fileName":"15.Post-order Traversal.txt","filetype":"text","fileSize":829,"url":"http://older (11)/14.Lecture 11  Trees/15.Post-order Traversal.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Post order Traversal Problem Level: EASY Problem Description: Given a generic tree, print the post order traversal of given tree. The post order traversal is: visit child nodes first and then root node. Input format: The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output contains the elements printed in post order traversal. The elements in the output must be separated by a single space. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 400 50 0 0 0 0 Sample Output 1: 400 50 20 30 40 10 @csalgo"},{"id":"d1d582bc-627f-4227-a85a-d50e17d15d31","title":"@csalgo Coding Problem Problem","fileName":"7.Sum of all nodes.txt","filetype":"text","fileSize":691,"url":"http://older (11)/14.Lecture 11  Trees/7.Sum of all nodes.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Sum of all nodes Problem Level: EASY Problem Description: Given a generic tree, find and return the sum of all nodes present in the given tree. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output prints the sum of all nodes of the given generic tree. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1: 190 @csalgo"},{"id":"b06b96c7-b2b3-4e7a-bd6f-9b3bdc7e3ab6","title":"@csalgo Chapter Assignment Pro","fileName":"2.Level order traversal.txt","filetype":"text","fileSize":1327,"url":"http://older (11)/15.Assignment Binary Trees/2.Level order traversal.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Level order traversal Problem Level: EASY Problem Description: For a given a Binary Tree of type integer, print it in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion and a single space will separate them. Example: For the above depicted tree, when printed in a level order fashion, the output would look like: 10 20 30 40 50 60 Where each new line denotes the level in the tree. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The given input tree will be printed in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion. A single space will separate them. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 10 20 30 40 50  1 60  1  1  1  1  1  1 Sample Output 1: 10 20 30 40 50 60 Sample Input 2: 8 3 10 1 6  1 14  1  1 4 7 13  1  1  1  1  1  1  1 Sample Output 2: 8 3 10 1 6 14 4 7 13 =====Answer===== Correct Option: @csalgo"},{"id":"bbcf3b38-516b-4e29-a2ac-a711d0214194","title":"@csalgo Chapter Assignment Pro","fileName":"1. Balanced.txt","filetype":"text","fileSize":595,"url":"http://older (11)/15.Assignment Binary Trees/1. Balanced.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Balanced Problem Level: MEDIUM Problem Description: Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if given binary tree is balanced, false otherwise. Input format : Elements in level order form (separated by space). If any node does not have left or right child, take  1 in its place. Sample Input 1 : 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output 1 : false Sample Input 2 : 1 2 3  1  1  1  1 Sample Output 2 : true =====Answer===== Correct Option: @csalgo"},{"id":"4ae623bf-2d88-4493-a6a3-7a088ed2ef25","title":"@csalgo Coding Problem Problem","fileName":"8.Node with largest data.txt","filetype":"text","fileSize":778,"url":"http://older (11)/14.Lecture 11  Trees/8.Node with largest data.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Node with largest data Problem Level: MEDIUM Problem Description: Given a generic tree, find and return the node with maximum data. You need to return the node which is having maximum data. Return null if tree is empty. Input format : The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space. Output Format : The first and only line of output contains the data of the node with largest data in the given tree. Constraints: Time Limit: 1 sec Sample Input 1: 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1: 50 @csalgo"},{"id":"249fb2a6-1285-4963-b4d8-9a3d7ee03988","title":"@csalgo Chapter Assignment Pro","fileName":"0.Sum Of Nodes.txt","filetype":"text","fileSize":1184,"url":"http://older (11)/15.Assignment Binary Trees/0.Sum Of Nodes.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Sum Of Nodes Problem Level: EASY Problem Description: For a given Binary Tree of integers, find and return the sum of all the nodes data. Example:  10      20 30      40 50 When we sum up all the nodes data together, [10, 20, 30, 40 50] we get 150. Hence, the output will be 150. Input Format: The first and the only line of input will contain the nodes data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The first and the only line of output prints the sum of all the nodes data present in the binary tree. Note: You are not required to print anything explicitly. It has already been taken care of. Constraints: 1  = N  = 10^6 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 2 3 4 6  1  1  1  1  1 Sample Output 1:  15 Sample Input 2: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 Sample Output 2:  28 =====Answer===== Correct Option: @csalgo"},{"id":"5210bc2f-f858-4aa4-9335-884052fec9cd","title":"@csalgo Chapter Assignment Pro","fileName":"3.Remove Leaf nodes.txt","filetype":"text","fileSize":751,"url":"http://older (11)/15.Assignment Binary Trees/3.Remove Leaf nodes.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Remove Leaf nodes Problem Level: EASY Problem Description: Remove all leaf nodes from a given Binary Tree. Leaf nodes are those nodes, which don't have any children. Note : Root will also be a leaf node if it doesn't have left and right child. You don't need to print the tree, just remove all leaf nodes and return the updated root. Input format : Elements in level order form (separated by space) (If any node does not have left or right child, take  1 in its place) Output Format : Elements are printed level wise, each level in new line (separated by space). Sample Input : 8 3 10 1 6  1 14  1  1 4 7 13  1  1  1  1  1  1  1 Sample Output : 8 3 10 6 14 =====Answer===== Correct Option: @csalgo"},{"id":"8523e25c-b065-4dd3-ba95-9850a90858bd","title":"@csalgo Chapter Assignment Pro","fileName":"4.Level wise linkedlist.txt","filetype":"text","fileSize":888,"url":"http://older (11)/15.Assignment Binary Trees/4.Level wise linkedlist.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Level wise linkedlist Problem Level: MEDIUM Problem Description: Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list. Input format : The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. Output format : Each level linked list is printed in new line (elements are separated by space). Constraints: Time Limit: 1 second Sample Input 1: 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output 1: 5 6 10 2 3 9 =====Answer===== Correct Option: @csalgo"},{"id":"f6c09a68-0279-48b2-93fc-7eb0aca10dab","title":"@csalgo Chapter Assignment Pro","fileName":"5.ZigZag tree.txt","filetype":"text","fileSize":665,"url":"http://older (11)/15.Assignment Binary Trees/5.ZigZag tree.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: ZigZag tree Problem Level: HARD Problem Description: Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left. Input format : Elements in level order form (separated by space) (If any node does not have left or right child, take  1 in its place) Output Format : Elements are printed level wise, each level in new line (separated by space). Sample Input : 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output : 5 10 6 2 3 9 =====Answer===== Correct Option: @csalgo"},{"id":"7fb094d6-a64e-4fe4-a63d-40c521b4cf97","title":"@csalgo Chapter Assignment Pro","fileName":"6.Nodes without sibling.txt","filetype":"text","fileSize":1495,"url":"http://older (11)/15.Assignment Binary Trees/6.Nodes without sibling.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Nodes without sibling Problem Level: EASY Problem Description: For a given Binary Tree of type integer, print all the nodes without any siblings. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints the node data in a top to down fashion with reference to the root. Node data in the left subtree will be printed first and then the right subtree. A single space will separate them all. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 second Sample Input 1: 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output 1: 9 Sample Input 2: 2 4 5 6  1  1 7 20 30 80 90  1 8 9  1  1  1  1  1  1  1  1  1 Sample Output 2: 6 8 7 9 Explanation of Sample Input 2: The input tree when represented in a two dimensional plane, it would look like this: In respect to the root, node data in the left subtree that satisfy the condition of not having a sibling would be 6 and 8, taken in a top down sequence. Similarly, for the right subtree, 7 and 9 are the node data without any sibling. Since we print the siblings in the left subtree first and then the siblings from the right subtree, taken in a top down fashion, we print 6 8 7 9. =====Answer===== Correct Option: @csalgo"},{"id":"2460a854-bbfa-415e-a591-483e8e24f71b","title":"@csalgo Coding Problem Problem","fileName":"10.Postorder Binary Tree.txt","filetype":"text","fileSize":793,"url":"http://older (11)/15.Lecture 12  Binary Trees/10.Postorder Binary Tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Postorder Binary Tree Problem Level: EASY Problem Description: For a given Binary Tree of integers, print the post order traversal. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints the post order traversal of the given binary tree. Constraints: 1  = N  = 10^6 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 Sample Output 1: 4 5 2 6 7 3 1 Sample Input 2: 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output 1: 2 9 3 6 10 5 @csalgo"},{"id":"b1b12083-bfe8-465b-b61a-2b87de05b921","title":"@csalgo Coding Problem Problem","fileName":"12.Construct Tree from preorder  inorder.txt","filetype":"text","fileSize":1356,"url":"http://older (11)/15.Lecture 12  Binary Trees/12.Construct Tree from preorder  inorder.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Construct Tree from preorder inorder Problem Level: MEDIUM Problem Description: For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array list, create the binary tree using the given two arrays lists. You just need to construct the tree and return the root. Note: Assume that the Binary Tree contains only unique elements. Input Format: The first line of input contains an integer N denoting the size of the list array. It can also be said that N is the total number of nodes the binary tree would have. The second line of input contains N integers, all separated by a single space. It represents the preorder traversal of the binary tree. The third line of input contains N integers, all separated by a single space. It represents the inorder traversal of the binary tree. Output Format: The given input tree will be printed in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion. A single space will separate them. Constraints: 1  = N  = 10^4 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 7 1 2 4 5 3 6 7 4 2 5 1 6 3 7 Sample Output 1: 1 2 3 4 5 6 7 Sample Input 2: 6 5 6 2 3 9 10 2 6 3 9 5 10 Sample Output 2: 5 6 10 2 3 9 @csalgo"},{"id":"4ba39f05-44ac-433b-9040-9c719fe0c642","title":"@csalgo Coding Problem Problem","fileName":"17.Minimum and Maximum in the Binary Tree.txt","filetype":"text","fileSize":1080,"url":"http://older (11)/15.Lecture 12  Binary Trees/17.Minimum and Maximum in the Binary Tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Minimum and Maximum in the Binary Tree Problem Level: MEDIUM Problem Description: For a given a Binary Tree of type integer, find and return the minimum and the maximum data values. Return the output as an object of Pair class, which is already created. Note: All the node data will be unique and hence there will always exist a minimum and maximum node data. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints two integers denoting the minimum and the maximum data values respectively. A single line will separate them both. Constraints: 2  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 8 3 10 1 6  1 14  1  1 4 7 13  1  1  1  1  1  1  1 Sample Output 1: 1 14 Sample Input 2: 10 20 60  1  1 3 50  1  1  1  1 Sample Output 2: 3 60 @csalgo"},{"id":"088ea228-6d1c-455e-a2fd-b3bb9cfb8793","title":"@csalgo Coding Problem Problem","fileName":"14.Construct Tree from postorder  inorder.txt","filetype":"text","fileSize":1359,"url":"http://older (11)/15.Lecture 12  Binary Trees/14.Construct Tree from postorder  inorder.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Construct Tree from postorder inorder Problem Level: MEDIUM Problem Description: For a given postorder and inorder traversal of a Binary Tree of type integer stored in an array list, create the binary tree using the given two arrays lists. You just need to construct the tree and return the root. Note: Assume that the Binary Tree contains only unique elements. Input Format: The first line of input contains an integer N denoting the size of the list array. It can also be said that N is the total number of nodes the binary tree would have. The second line of input contains N integers, all separated by a single space. It represents the Postorder traversal of the binary tree. The third line of input contains N integers, all separated by a single space. It represents the inorder traversal of the binary tree. Output Format: The given input tree will be printed in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion. A single space will separate them. Constraints: 1  = N  = 10^4 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 7 4 5 2 6 7 3 1 4 2 5 1 6 3 7 Sample Output 1: 1 2 3 4 5 6 7 Sample Input 2: 6 2 9 3 6 10 5 2 6 3 9 5 10 Sample Output 2: 5 6 10 2 3 9 @csalgo"},{"id":"228cf392-ecef-406e-9d99-0c66628ffa14","title":"@csalgo Coding Problem Problem","fileName":"3.Print Level Wise.txt","filetype":"text","fileSize":1655,"url":"http://older (11)/15.Lecture 12  Binary Trees/3.Print Level Wise.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Print Level Wise Problem Level: MEDIUM Problem Description: For a given a Binary Tree of type integer, print the complete information of every node, when traversed in a level order fashion. To print the information of a node with data D, you need to follow the exact format :  D:L:X,R:Y Where D is the data of a node present in the binary tree. X and Y are the values of the left(L) and right(R) child of the node. Print  1 if the child doesn't exist. Example: For the above depicted Binary Tree, the level order travel will be printed as followed: 1:L:2,R:3 2:L:4:,R: 1 3:L:5:,R:6 4:L: 1:,R:7 5:L: 1:,R: 1 6:L: 1:,R: 1 7:L: 1:,R: 1 Note: There is no space in between while printing the information for each node. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: Information of all the nodes in the Binary Tree will be printed on a different line where each node will follow a format of D:L:X,R:Y, without any spaces in between. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 8 3 10 1 6  1 14  1  1 4 7 13  1  1  1  1  1  1  1 Sample Output 1: 8:L:3,R:10 3:L:1,R:6 10:L: 1,R:14 1:L: 1,R: 1 6:L:4,R:7 14:L:13,R: 1 4:L: 1,R: 1 7:L: 1,R: 1 13:L: 1,R: 1 Sample Input 2: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 Sample Output 2: 1:L:2,R:3 2:L:4,R:5 3:L:6,R:7 4:L: 1,R: 1 5:L: 1,R: 1 6:L: 1,R: 1 7:L: 1,R: 1 @csalgo"},{"id":"a816e73e-ee0c-473e-83d0-3129606ba030","title":"@csalgo Coding Problem Problem","fileName":"5.Is node present.txt","filetype":"text","fileSize":881,"url":"http://older (11)/15.Lecture 12  Binary Trees/5.Is node present.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Is node present? Problem Level: EASY Problem Description: For a given Binary Tree of type integer and a number X, find whether a node exists in the tree with data X or not. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints 'true' or 'false'. Note: You are not required to print anything explicitly. It has already been taken care of. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 8 3 10 1 6  1 14  1  1 4 7 13  1  1  1  1  1  1  1 7 Sample Output 1: true Sample Input 2: 2 3 4  1  1  1  1 10 Sample Output 2: false @csalgo"},{"id":"a1fb4009-57b9-4bc7-85a4-c4dce5a02c92","title":"@csalgo Coding Problem Problem","fileName":"7.Mirror Binary tree.txt","filetype":"text","fileSize":1017,"url":"http://older (11)/15.Lecture 12  Binary Trees/7.Mirror Binary tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Mirror Binary tree Problem Level: EASY Problem Description: For a given Binary Tree of type integer, update it with its corresponding mirror image. Example: Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints the mirrored tree in a level wise order. Each level will be printed on a new line. Elements printed at each level will be separated by a single line. Note: You are not required to print anything explicitly. It has already been taken care of. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 Sample Output 1: 1 3 2 7 6 5 4 Sample Input 2: 5 10 6 2 3  1  1  1  1  1 9  1  1 Sample Output 2: 5 6 10 3 2 9 @csalgo"},{"id":"f98045aa-a8ae-49aa-97d5-b358331130ae","title":"@csalgo Chapter Assignment Pro","fileName":"0.Create  Insert Duplicate Node.txt","filetype":"text","fileSize":1519,"url":"http://older (11)/16.Assignment BST and Binary Tree/0.Create  Insert Duplicate Node.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Create Insert Duplicate Node Problem Level: EASY Problem Description: For a given a Binary Tree of type integer, duplicate every node of the tree and attach it to the left of itself. The root will remain the same. So you just need to insert nodes in the given Binary Tree. Example: After making the changes to the above depicted tree, the updated tree will look like this. You can see that every node in the input tree has been duplicated and inserted to the left of itself. Input format : The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format : The updated tree will be printed in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion. A single space will separate them. Note: You are not required to print anything explicitly. It has already been taken care of. Just implement the function to achieve the desired structure of the tree. Constraints : 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 10 20 30 40 50  1 60  1  1  1  1  1  1 Sample Output 1: 10 10 30 20 30 60 20 50 60 40 50 40 Sample Input 2: 8 5 10 2 6  1  1  1  1  1 7  1  1 Sample Output 2: 8 8 10 5 10 5 6 2 6 7 2 7 =====Answer===== Correct Option: @csalgo"},{"id":"284e29e6-d6f1-46ac-9749-226af3764e13","title":"@csalgo Chapter Assignment Pro","fileName":"1.Pair sum BInary Tree.txt","filetype":"text","fileSize":736,"url":"http://older (11)/16.Assignment BST and Binary Tree/1.Pair sum BInary Tree.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pair sum BInary Tree Problem Level: MEDIUM Problem Description: Given a binary tree and an integer S, print all the pair of nodes whose sum equals S. Assume binary tree contains all unique elements. Note : In a pair, print the smaller element first. Order of different pair doesn't matter. Input format : Line 1 : Elements in level order form (separated by space) (If any node does not have left or right child, take  1 in its place) Line 2 : Integer S Output Format : Each pair in different line (pair elements separated by space) Constraints : 1  = N  = 1000 Sample Input 1: 5 10 6 2 3  1  1  1  1  1 9  1  1 15 Sample Output 1: 5 10 6 9 =====Answer===== Correct Option: @csalgo"},{"id":"78897d37-ca16-481c-aa84-9344af82736e","title":"@csalgo Coding Problem Problem","fileName":"6.Height Of Tree.txt","filetype":"text","fileSize":1126,"url":"http://older (11)/15.Lecture 12  Binary Trees/6.Height Of Tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Height Of Tree Problem Level: EASY Problem Description: For a given Binary Tree of integers, find and return the height of the tree. Example:  10      20 30      40 50 Height of the given tree is 3. Height is defined as the total number of nodes along the longest path from the root to any of the leaf node. Input Format: The first and the only line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The first and the only line of output prints the height of the given binary tree. Note: You are not required to print anything explicitly. It has already been taken care of. Constraints: 0  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 10 20 30 40 50  1  1  1  1  1  1 Sample Output 1: 3 Sample Input 2: 3  1  1 Sample Output 2: 1 @csalgo"},{"id":"8987b162-5c8f-4e8f-af50-032ae3bfcff4","title":"@csalgo Coding Problem Problem","fileName":"9.Preorder Binary Tree.txt","filetype":"text","fileSize":791,"url":"http://older (11)/15.Lecture 12  Binary Trees/9.Preorder Binary Tree.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Preorder Binary Tree Problem Level: EASY Problem Description: For a given Binary Tree of integers, print the pre order traversal. Input Format: The first and the only line of input will contain the nodes data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. Output Format: The only line of output prints the pre order traversal of the given binary tree. Constraints: 1  = N  = 10^6 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Ouptut 1: 5 6 2 3 9 10 Sample Input 2: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 Sample Ouptut 2: 1 2 4 5 3 6 7 @csalgo"},{"id":"7bcc3096-5586-4971-a006-81dd80c4c650","title":"@csalgo Chapter Assignment Pro","fileName":"2.LCA of Binary Tree.txt","filetype":"text","fileSize":910,"url":"http://older (11)/16.Assignment BST and Binary Tree/2.LCA of Binary Tree.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: LCA of Binary Tree Problem Level: MEDIUM Problem Description: Given a binary tree and two nodes, find LCA (Lowest Common Ancestor) of the given two nodes in Binary Tree. Read about LCA if you are having doubts about the definition. If out of 2 nodes only one node is present, return that node. If both are not present, return  1. Input format : Line 1 : Elements in level order form (separated by space) (If any node does not have left or right child, take  1 in its place) Line 2 : Two integers, Node 1 and Node 2 (separated by space) Output Format : LCA Constraints : 1  = N  = 1000 Sample Input 1: 5 10 6 2 3  1  1  1  1  1 9  1  1 2 10 Sample Output 1: 10 Sample Input 2: 5 10 6 2 3  1  1  1  1  1 9  1  1 2 6 Sample Output 2: 5 Sample Input 3: 5 10 6 2 3  1  1  1  1  1 9  1  1 12 78 Sample Output 3: 1 =====Answer===== Correct Option: @csalgo"},{"id":"bffec366-012b-45c5-8034-ccd3d7bd1166","title":"@csalgo Chapter Assignment Pro","fileName":"3.LCA of BST.txt","filetype":"text","fileSize":1578,"url":"http://older (11)/16.Assignment BST and Binary Tree/3.LCA of BST.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: LCA of BST Problem Level: MEDIUM Problem Description: Given a binary search tree and two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the BST. LCA LCA of two nodes A and B is the lowest or deepest node which has both A and B as its descendants. Example: In this example, the green coloured node is the LCA to A and B. Note: It is defined that each node is a descendant to itself, so, if there are two nodes X and Y and X has a direct connection from Y, then Y is the lowest common ancestor. Example:  Note: 1. If out of 2 nodes only one node is present, return that node. 2. If both are not present, return  1. Input format: The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. The following line of input contains two integers, denoting the value of data of two nodes of given BST. Output Format: The first and only line of output contains the data associated with the lowest common ancestor node. Constraints: Time Limit: 1 second Sample Input 1: 8 5 10 2 6  1  1  1  1  1 7  1  1 2 10 Sample Output 1: 8 Sample Input 2: 8 5 10 2 6  1  1  1  1  1 7  1  1 2 6 Sample Output 2: 5 Sample Input 3: 8 5 10 2 6  1  1  1  1  1 7  1  1 12 78 Sample Output 3: 1 =====Answer===== Correct Option: @csalgo"},{"id":"85461855-f281-4471-aaba-bcd04865ee78","title":"@csalgo Chapter Assignment Pro","fileName":"5.Replace with Sum of greater nodes.txt","filetype":"text","fileSize":1215,"url":"http://older (11)/16.Assignment BST and Binary Tree/5.Replace with Sum of greater nodes.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Replace with Sum of greater nodes Problem Level: MEDIUM Problem Description: Given a binary search tree, you have to replace each node's data with the sum of all nodes which are greater or equal than it. You need to include the current node's data also. That is, if in given BST there is a node with data 5, you need to replace it with sum of its data (i.e. 5) and all nodes whose data is greater than or equal to 5. Note: You don't need to return or print, just change the data of each node. Input format: The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. Output format: In the output, data of the nodes of the tree are printed in level order form. Each level of the tree is printed on a separate line. Constraints: Time Limit: 1 second Sample Input 1 : 8 5 10 2 6  1  1  1  1  1 7  1  1 Sample Output 1 : 18 36 10 38 31 25 =====Answer===== Correct Option: @csalgo"},{"id":"cdd430df-3a7f-454f-a373-e68732677f91","title":"@csalgo Chapter Assignment Pro","fileName":"6.Path Sum Root to Leaf.txt","filetype":"text","fileSize":1578,"url":"http://older (11)/16.Assignment BST and Binary Tree/6.Path Sum Root to Leaf.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Path Sum Root to Leaf Problem Level: HARD Problem Description: For a given Binary Tree of type integer and a number K, print out all root to leaf paths where the sum of all the node data along the path is equal to K. Example: If you see in the above depicted picture of Binary Tree, we see that there are a total of two paths, starting from the root and ending at the leaves which sum up to a value of K = 13. The paths are: a. 2 3 4 4 b. 2 3 8 One thing to note here is, there is another path in the right sub tree in reference to the root, which sums up to 13 but since it doesn't end at the leaf, we discard it. The path is: 2 9 2(not a leaf) Input Format: The first line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. The second line of input contains an integer value K. Output Format: Lines equal to the total number of paths will be printed. All the node data in every path will be printed in a linear fashion taken in the order they appear from top to down bottom in the tree. A single space will separate them all. Constriants: 1  = N  = 10^5 0  = K  = 10^8 Where N is the total number of nodes in the binary tree. Time Limit: 1 second Sample Input 1: 2 3 9 4 8  1 2 4  1  1  1 6  1  1  1  1  1 13 Sample Output 1: 2 3 4 4 2 3 8 Sample Input 2: 5 6 7 2 3  1 1  1  1  1 9  1  1  1  1 13 Sample Output 2: 5 6 2 5 7 1 =====Answer===== Correct Option: @csalgo"},{"id":"ead46029-c973-4601-93a7-52fe8667c823","title":"@csalgo Chapter Assignment Pro","fileName":"7.Print nodes at distance k from node.txt","filetype":"text","fileSize":1329,"url":"http://older (11)/16.Assignment BST and Binary Tree/7.Print nodes at distance k from node.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print nodes at distance k from node Problem Level: HARD Problem Description: You are given a Binary Tree of type integer, a target node, and an integer value K. Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter. Example: For a given input tree(refer to the image below): 1. Target Node: 5 2. K = 2 Starting from the target node 5, the nodes at distance K are 7 4 and 1. Input Format: The first line of input will contain the node data, all separated by a single space. Since  1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data. The second line of input contains two integers separated by a single space, representing the value of the target node and K, respectively. Output Format: All the node data at distance K from the target node will be printed on a new line. The order in which the data is printed doesn't matter. Constraints: 1  = N  = 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 sec Sample Input 1: 5 6 10 2 3  1  1  1  1  1 9  1  1 3 1 Sample Output 1: 9 6 Sample Input 2: 1 2 3 4 5 6 7  1  1  1  1  1  1  1  1 3 3 Sample Output 2: 4 5 =====Answer===== Correct Option: @csalgo"},{"id":"0af890ef-da0d-487c-bcec-b489d0bd5638","title":"@csalgo Coding Problem Problem","fileName":"10.Construct BST.txt","filetype":"text","fileSize":723,"url":"http://older (11)/16.Lecture 13  BST/10.Construct BST.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Construct BST Problem Level: EASY Problem Description: Given a sorted integer array A of size n, which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST. Note: If array size is even, take first mid as root. Input format: The first line of input contains an integer, which denotes the value of n. The following line contains n space separated integers, that denote the values of array. Output Format: The first and only line of output contains values of BST nodes, printed in pre order traversal. Constraints: Time Limit: 1 second Sample Input 1: 7 1 2 3 4 5 6 7 Sample Output 1: 4 2 1 3 6 5 7 @csalgo"},{"id":"902423e9-50c7-4d95-b014-df00bd8518f7","title":"@csalgo Chapter Assignment Pro","fileName":"4.Largest BST.txt","filetype":"text","fileSize":874,"url":"http://older (11)/16.Assignment BST and Binary Tree/4.Largest BST.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Largest BST Problem Level: HARD Problem Description: Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST. Input format : The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. Output format: The first and only line of output contains the height of the largest BST. Constraints: Time Limit: 1 second Sample Input 1: 5 10 6 2 3  1  1  1  1  1 9  1  1 Sample Output 1: 2 =====Answer===== Correct Option: @csalgo"},{"id":"01397d55-050c-4220-943a-edcc031147eb","title":"@csalgo Coding Problem Problem","fileName":"14.Find path in BST.txt","filetype":"text","fileSize":1060,"url":"http://older (11)/16.Lecture 13  BST/14.Find path in BST.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Find path in BST Problem Level: MEDIUM Problem Description: Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST) in a list. Return empty list otherwise. Note: Assume that BST contains all unique elements. Input Format : The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. The following line of input contains an integer, that denotes the value of k. Output Format : The first line and only line of output prints the data of the nodes in the path from node k to root. The data of the nodes is separated by single space. Constraints: Time Limit: 1 second Sample Input 1: 8 5 10 2 6  1  1  1  1  1 7  1  1 2 Sample Output 1: 2 5 8 @csalgo"},{"id":"cf053ba1-d664-4cef-88d1-2d64d004ee33","title":"@csalgo Chapter Assignment Pro","fileName":"8.Pair sum in a BST.txt","filetype":"text","fileSize":1107,"url":"http://older (11)/16.Assignment BST and Binary Tree/8.Pair sum in a BST.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pair sum in a BST Problem Level: MEDIUM Problem Description: Given a binary search tree and an integer S, find pair of nodes in the BST which sum to S. You can use extra space of the order of O(log n). Note: 1. Assume BST contains all unique elements. 2. In a pair, print the smaller element first. Input Format : The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. The following line of input contains an integer, that denotes the value of S. Output format: You have to print each pair in a different line (pair elements separated by space). The order of different pairs, to be printed, does not matter. Constraints: Time Limit: 1 second Sample Input 1: 8 5 10 2 6  1  1  1  1  1 7  1  1 12 Sample Output 1: 2 10 5 7 =====Answer===== Correct Option: @csalgo"},{"id":"74cacda8-147d-44be-bcea-1b09f8a9b905","title":"@csalgo Coding Problem Problem","fileName":"12.BST to LL.txt","filetype":"text","fileSize":762,"url":"http://older (11)/16.Lecture 13  BST/12.BST to LL.txt","fileDetails":"@csalgo Coding Problem Problem Statement: BST to LL Problem Level: EASY Problem Description: Given a BST, convert it into a sorted linked list. You have to return the head of LL. Input format: The first and only line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. Output Format: The first and only line of output prints the elements of sorted linked list. Constraints: Time Limit: 1 second Sample Input 1: 8 5 10 2 6  1  1  1  1  1 7  1  1 Sample Output 1: 2 5 6 7 8 10 @csalgo"},{"id":"a77d16b3-d2f1-429f-835b-031d3feb14dd","title":"@csalgo Coding Problem Problem","fileName":"5.Check BST.txt","filetype":"text","fileSize":645,"url":"http://older (11)/16.Lecture 13  BST/5.Check BST.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Check BST Problem Level: MEDIUM Problem Description: Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree) or not. If yes, return true, return false otherwise. Duplicate elements should be in right subtree. Input format : Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take  1 in its place Output format : true or false Constraints : 1  = N  = 10^5 Sample Input 1 : 3 1 5  1 2  1  1  1  1 Sample Output 1 : true Sample Input 2 : 5 2 10 0 1  1 15  1  1  1  1  1  1 Sample Output 2 : false @csalgo"},{"id":"8ad6d335-bde5-403e-9003-7dc0a53524a6","title":"@csalgo Coding Problem Problem","fileName":"2.Search in BST.txt","filetype":"text","fileSize":1097,"url":"http://older (11)/16.Lecture 13  BST/2.Search in BST.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Search in BST Problem Level: MEDIUM Problem Description: Given a BST and an integer k. Find if the integer k is present in given BST or not. You have to return true, if node with data k is present, return false otherwise. Note: Assume that BST contains all unique elements. Input Format: The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. The following line of input contains an integer, that denotes the value of k. Output Format: The first and only line of output contains a boolean value. Print true, if node with data k is present, print false otherwise. Constraints: Time Limit: 1 second Sample Input 1 : 8 5 10 2 6  1  1  1  1  1 7  1  1 2 Sample Output 1 : true Sample Input 2 : 8 5 10 2 6  1  1  1  1  1 7  1  1 12 Sample Output 2 : false @csalgo"},{"id":"92945348-53e4-47d6-b1bd-d4ab47ce4355","title":"@csalgo Coding Problem Problem","fileName":"17.BST Class.txt","filetype":"text","fileSize":971,"url":"http://older (11)/16.Lecture 13  BST/17.BST Class.txt","fileDetails":"@csalgo Coding Problem Problem Statement: BST Class Problem Level: MEDIUM Problem Description: Implement the BST class which includes following functions  1. search Given an element, find if that is present in BST or not. Return true or false. 2. insert  Given an element, insert that element in the BST at the correct position. Assume unique elements will be given. 3. delete  Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub tree. 4. printTree (recursive)  Print the BST in ithe following format  For printing a node with data N, you need to follow the exact format  N:L:x,R:y wherer, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null. There is no space in between. You need to print all nodes in the recursive format in different lines. @csalgo"},{"id":"0dba99fe-1ae8-4e4a-8014-8ce76391d19c","title":"@csalgo Coding Problem Problem","fileName":"4.Elements Between K1 and K2.txt","filetype":"text","fileSize":998,"url":"http://older (11)/16.Lecture 13  BST/4.Elements Between K1 and K2.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Elements Between K1 and K2 Problem Level: EASY Problem Description: Given a Binary Search Tree and two integers k1 and k2, find and print the elements which are in range k1 and k2 (both inclusive). Print the elements in increasing order. Input format: The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take  1 in its place. Since  1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node. The following line contains two integers, that denote the value of k1 and k2. Output Format:  The first and only line of output prints the elements which are in range k1 and k2 (both inclusive). Print the elements in increasing order. Constraints: Time Limit: 1 second Sample Input 1: 8 5 10 2 6  1  1  1  1  1 7  1  1 6 10 Sample Output 1: 6 7 8 10 @csalgo"},{"id":"b9b89da5-9671-401c-852b-09ee3ff047b9","title":"@csalgo Chapter TEST Problem S","fileName":"0.Check cousins.txt","filetype":"text","fileSize":744,"url":"http://older (11)/17.Test 3/0.Check cousins.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Check cousins Problem Level: MEDIUM Problem Description: Given the binary Tree and two nodes say ‘p’ and ‘q’. Determine whether the two nodes are cousins of each other or not. Two nodes are said to be cousins of each other if they are at same level of the Binary Tree and have different parents. Do it in O(n). Input format : Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take  1 in its place Line 2 : integer value of p Line 3 : Integer value of q Output format : true or false Constraints : 1  = N  = 10^5 Sample Input : 5 6 10 2 3 4  1  1  1  1 9  1  1  1  1 2 4 Sample Output : true =====Answer===== Correct Option: @csalgo"},{"id":"50bd1c89-1e8a-4a24-804e-ba809f6db2bb","title":"@csalgo Chapter TEST Problem S","fileName":"1.Longest Leaf to root path.txt","filetype":"text","fileSize":557,"url":"http://older (11)/17.Test 3/1.Longest Leaf to root path.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Longest Leaf to root path Problem Level: MEDIUM Problem Description: Given a binary tree, return the longest path from leaf to root. Longest means, a path which contain maximum number of nodes from leaf to root. Input format : Elements in level order form (separated by space) (If any node does not have left or right child, take  1 in its place) Line 1 : Binary Tree 1 (separated by space) Sample Input 1 :  5 6 10 2 3  1  1  1  1  1 9  1  1 Sample Output 1 : 9 3 6 5 =====Answer===== Correct Option: @csalgo"},{"id":"94e698ec-e83b-4a31-9870-19b1763367ad","title":"@csalgo Coding Problem Problem","fileName":"4.Array Intersection.txt","filetype":"text","fileSize":1887,"url":"http://older (11)/18.Lecture 14  Hashmaps/4.Array Intersection.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Array Intersection Problem Level: MEDIUM Problem Description: You have been given two integer arrays list(ARR1 and ARR2) of size N and M, respectively. You need to print their intersection; An intersection for this problem can be defined when both the arrays lists contain a particular value or to put it in other words, when there is a common value that exists in both the arrays lists. Note : Input arrays lists can contain duplicate elements. The intersection elements printed would be in the order they appear in the first sorted array list(ARR1). br Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains an integer 'N' representing the size of the first array list. The second line contains 'N' single space separated integers representing the elements of the first the array list. The third line contains an integer 'M' representing the size of the second array list. The fourth line contains 'M' single space separated integers representing the elements of the second array list. Output format : For each test case, print the intersection elements in a row, separated by a single space. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^6 0  = M  = 10^6 Time Limit: 1 sec Sample Input 1 : 2 6 2 6 8 5 4 3 4 2 3 4 7 2 10 10 1 10 Sample Output 1 : 2 3 4 10 Sample Input 2 : 1 4 2 6 1 2 5 1 2 3 4 2 Sample Output 2 : 1 2 2 Explanation for Sample Output 2 : Since, both input arrays have two '2's, the intersection of the arrays also have two '2's. The first '2' of first array matches with the first '2' of the second array. Similarly, the second '2' of the first array matches with the second '2' if the second array. @csalgo"},{"id":"e53bc60e-7b9f-49e8-af35-1aee703178d2","title":"@csalgo Chapter TEST Problem S","fileName":"2.Remove leaf nodes in Tree.txt","filetype":"text","fileSize":812,"url":"http://older (11)/17.Test 3/2.Remove leaf nodes in Tree.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Remove leaf nodes in Tree Problem Level: MEDIUM Problem Description: Remove all leaf nodes from a given generic Tree. Leaf nodes are those nodes, which don't have any children. Note : Root will also be a leaf node if it doesn't have any child. You don't need to print the tree, just remove all leaf nodes and return the updated root. Input format : Line 1 : Elements in level order form separated by space (as per done in class). Order is   ` Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element ` Output Format : Elements are printed level wise, each level in new line (separated by space) Sample Input 1 : 10 3 20 30 40 2 40 50 0 0 0 0 Sample Output 1 : (Level wise, each level in new line) 10 20 =====Answer===== Correct Option: @csalgo"},{"id":"e60e26e7-a024-4ed1-9970-0e2bf91d8a71","title":"@csalgo Coding Problem Problem","fileName":"3.Maximum Frequency Number.txt","filetype":"text","fileSize":919,"url":"http://older (11)/18.Lecture 14  Hashmaps/3.Maximum Frequency Number.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Maximum Frequency Number Problem Level: EASY Problem Description: You are given an array of integers that contain numbers in random order. Write a program to find and return the number which occurs the maximum times in the given input. If two or more elements contend for the maximum frequency, return the element which occurs in the array first. Input Format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N. The following line contains N space separated integers, that denote the value of the elements of the array. Output Format : The first and only line of output contains most frequent element in the given array. Constraints: 0  = N  = 10^8 Time Limit: 1 sec Sample Input 1 : 13 2 12 2 11 12 2 1 2 2 11 12 2 6 Sample Output 1 : 2 Sample Input 2 : 3 1 4 5 Sample Output 2 : 1 @csalgo"},{"id":"21215316-79a6-4749-9925-c0c73c3e3aef","title":"@csalgo Chapter Assignment Pro","fileName":"0.Extract Unique characters.txt","filetype":"text","fileSize":724,"url":"http://older (11)/18.Assignment  Hashmaps/0.Extract Unique characters.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Extract Unique characters Problem Level: EASY Problem Description: Given a string S, you need to remove all the duplicates. That means, the output string should contain each character only once. The respective order of characters should remain same, as in the input string. Input format: The first and only line of input contains a string, that denotes the value of S. Output format : The first and only line of output contains the updated string, as described in the task. Constraints : 0  = Length of S  = 10^8 Time Limit: 1 sec Sample Input 1 : ababacd Sample Output 1 : abcd Sample Input 2 : abcde Sample Output 2 : abcde =====Answer===== Correct Option: @csalgo"},{"id":"ca56049d-6d61-4b83-9004-47556787eb45","title":"@csalgo Coding Problem Problem","fileName":"5.Pair sum to 0.txt","filetype":"text","fileSize":753,"url":"http://older (11)/18.Lecture 14  Hashmaps/5.Pair sum to 0.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Pair sum to 0 Problem Level: MEDIUM Problem Description: Given a random integer array A of size N. Find and print the count of pair of elements in the array which sum up to 0. Note: Array A can contain duplicate elements as well. Input format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N. The following line contains N space separated integers, that denote the value of the elements of the array. Output format : The first and only line of output contains the count of pair of elements in the array which sum up to 0. Constraints : 0  = N  = 10^4 Time Limit: 1 sec Sample Input 1: 5 2 1  2 2 3 Sample Output 1: 2 @csalgo"},{"id":"1f835db1-7392-4993-b01f-d0323ed5ec52","title":"@csalgo Chapter Assignment Pro","fileName":"2.Pairs with difference K.txt","filetype":"text","fileSize":960,"url":"http://older (11)/18.Assignment  Hashmaps/2.Pairs with difference K.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pairs with difference K Problem Level: MEDIUM Problem Description: You are given with an array of integers and an integer K. You have to find and print the count of all such pairs which have difference K. Note: Take absolute difference between the elements of the array. Input Format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol n. The following line contains n space separated integers, that denote the value of the elements of the array. The following line contains an integer, that denotes the value of K. Output format : The first and only line of output contains count of all such pairs which have an absolute difference of K. Constraints : 0  = n  = 10^4 Time Limit: 1 sec Sample Input 1 : 4 5 1 2 4 3 Sample Output 1 : 2 Sample Input 2 : 4 4 4 4 4 0 Sample Output 2 : 6 =====Answer===== Correct Option: @csalgo"},{"id":"0c8076a3-59f4-457d-8445-b054871c0f99","title":"@csalgo Chapter Assignment Pro","fileName":"1.Longest Consecutive Sequence.txt","filetype":"text","fileSize":1775,"url":"http://older (11)/18.Assignment  Hashmaps/1.Longest Consecutive Sequence.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Longest Consecutive Sequence Problem Level: MEDIUM Problem Description: You are given an array of unique integers that contain numbers in random order. You have to find the longest possible sequence of consecutive numbers using the numbers from given array. You need to return the output array which contains starting and ending element. If the length of the longest possible sequence is one, then the output array must contain only single element. Note: 1. Best solution takes O(n) time. 2. If two sequences are of equal length, then return the sequence starting with the number whose occurrence is earlier in the array. Input format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol n. The following line contains n space separated integers, that denote the value of the elements of the array. Output format: The first and only line of output contains starting and ending element of the longest consecutive sequence. If the length of longest consecutive sequence, then just print the starting element. Constraints : 0  = n  = 10^6 Time Limit: 1 sec Sample Input 1 : 13 2 12 9 16 10 5 3 20 25 11 1 8 6 Sample Output 1 : 8 12 Sample Input 2 : 7 3 7 2 1 9 8 41 Sample Output 2 : 7 9 Explanation: Sequence should be of consecutive numbers. Here we have 2 sequences with same length i.e. [1, 2, 3] and [7, 8, 9], but we should select [7, 8, 9] because the starting point of [7, 8, 9] comes first in input array and therefore, the output will be 7 9, as we have to print starting and ending element of the longest consecutive sequence. Sample Input 3 : 7 15 24 23 12 19 11 16 Sample Output 3 : 15 16 =====Answer===== Correct Option: @csalgo"},{"id":"904d13e5-6c2c-4b54-97f4-d75bb747874d","title":"@csalgo Chapter Assignment Pro","fileName":"3.Longest subset zero sum.txt","filetype":"text","fileSize":879,"url":"http://older (11)/18.Assignment  Hashmaps/3.Longest subset zero sum.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Longest subset zero sum Problem Level: MEDIUM Problem Description: Given an array consisting of positive and negative integers, find the length of the longest subarray whose sum is zero. Input Format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N. The following line contains N space separated integers, that denote the value of the elements of the array. Output Format The first and only line of output contains length of the longest subarray whose sum is zero. Constraints: 0  = N  = 10^8 Time Limit: 1 sec Sample Input 1: 10 95  97  387  435  5  70 897 127 23 284 Sample Output 1: 5 Explanation: The five elements that form the longest subarray that sum up to zero are:  387,  435,  5,  70, 897 =====Answer===== Correct Option: @csalgo"},{"id":"bf36d6ac-bcd0-48e9-a1a3-7bb7900fe6dc","title":"@csalgo Chapter Assignment Pro","fileName":"2.Merge K sorted arrays.txt","filetype":"text","fileSize":621,"url":"http://older (11)/19.Assignment  Priority Queues/2.Merge K sorted arrays.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Merge K sorted arrays Problem Level: MEDIUM Problem Description: Given k different arrays, which are sorted individually (in ascending order). You need to merge all the given arrays such that output array should be sorted (in ascending order). Hint : Use Heaps. Input Format : Line 1 : Integer K Line 2 : Arrays 1 size (n1) Line 3 : Array 1 elements (separated by space) Line 4 : Array 2 size (n2) and so on for next arrays Sample Input 1 : 4 3 1 5 9 2 45 90 5 2 6 78 100 234 1 0 Sample Output 1 : 0 1 2 5 6 9 45 78 90 100 234 =====Answer===== Correct Option: @csalgo"},{"id":"42851ee7-8813-401d-8568-308e6af4ef3d","title":"@csalgo Chapter Assignment Pro","fileName":"1.Kth largest element.txt","filetype":"text","fileSize":900,"url":"http://older (11)/19.Assignment  Priority Queues/1.Kth largest element.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Kth largest element Problem Level: MEDIUM Problem Description: Given an array A of random integers and an integer k, find and return the kth largest element in the array. Note: Try to do this question in less than O(N * logN) time. Input Format : The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N. The following line contains N space separated integers, that denote the value of the elements of the array. The following contains an integer, that denotes the value of k. Output Format : The first and only line of output contains the kth largest element Constraints : 1  = N, Ai, k  = 10^5 Time Limit: 1 sec Sample Input 1 : 6 9 4 8 7 11 3 2 Sample Output 1 : 9 Sample Input 2 : 8 2 6 10 11 13 4 1 20 4 Sample Output 2 : 10 =====Answer===== Correct Option: @csalgo"},{"id":"dacb277a-83a8-4060-b434-f30b917b0cf5","title":"@csalgo Chapter Assignment Pro","fileName":"0.Check Max-Heap.txt","filetype":"text","fileSize":796,"url":"http://older (11)/19.Assignment  Priority Queues/0.Check Max-Heap.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Check Max Heap Problem Level: EASY Problem Description: Given an array of integers, check whether it represents max heap or not. Return true if the given array represents max heap, else return false. Input Format: The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N. The following line contains N space separated integers, that denote the value of the elements of the array. Output Format : The first and only line of output contains true if it represents max heap and false if it is not a max heap. Constraints: 1  = N  = 10^5 1  = Ai  = 10^5 Time Limit: 1 sec Sample Input 1: 8 42 20 18 6 14 11 9 4 Sample Output 1: true =====Answer===== Correct Option: @csalgo"},{"id":"92b76bc6-6754-4f48-86e1-f41ff398933e","title":"@csalgo Chapter Assignment Pro","fileName":"3.Running median.txt","filetype":"text","fileSize":1075,"url":"http://older (11)/19.Assignment  Priority Queues/3.Running median.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Running median Problem Level: HARD Problem Description: You are given a stream of N integers. For every i th integer added to the running list of integers, print the resulting median. Print only the integer part of the median. Input Format : The first line of input contains an integer N, denoting the number of integers in the stream. The second line of input contains 'N' integers separated by a single space. Output Format : Print the running median for every integer added to the running list on a new line. Input Constraints 1  = N  = 10^5 1  = Ai  = 10^5 Time Limit: 1sec Sample Input 1 : 6 6 2 1 3 7 5 Sample Output 1 : 6 4 2 2 3 4 Explanation of Sample Output 1 : S = {6}, median = 6 S = {6, 2}   {2, 6}, median = 4 S = {6, 2, 1}   {1, 2, 6}, median = 2 S = {6, 2, 1, 3}   {1, 2, 3, 6}, median = 2 S = {6, 2, 1, 3, 7}   {1, 2, 3, 6, 7}, median = 3 S = {6, 2, 1, 3, 7, 5}   {1, 2, 3, 5, 6, 7}, median = 4 Sample Input 2 : 5 5 4 3 2 1 Sample Output 2 : 5 4 4 3 3 =====Answer===== Correct Option: @csalgo"},{"id":"9a5f6b13-0843-4651-a860-588beac4f65e","title":"@csalgo Chapter Assignment Pro","fileName":"4.Buy the ticket.txt","filetype":"text","fileSize":2055,"url":"http://older (11)/19.Assignment  Priority Queues/4.Buy the ticket.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Buy the ticket Problem Level: MEDIUM Problem Description: You want to buy a ticket for a well known concert which is happening in your city. But the number of tickets available is limited. Hence the sponsors of the concert decided to sell tickets to customers based on some priority. A queue is maintained for buying the tickets and every person has attached with a priority (an integer, 1 being the lowest priority). The tickets are sold in the following manner  1. The first person (pi) in the queue asked to comes out. 2. If there is another person present in the queue who has higher priority than pi, then ask pi to move at end of the queue without giving him the ticket. 3. Otherwise, give him the ticket (and don't make him stand in queue again). Giving a ticket to a person takes exactly 1 minutes and it takes no time for removing and adding a person to the queue. And you can assume that no new person joins the queue. Given a list of priorities of N persons standing in the queue and the index of your priority (indexing starts from 0). Find and return the time it will take until you get the ticket. Input Format : Line 1 : Integer N (Total number of people standing in queue) Line 2 : Priorities of every person (n space separated integers) Line 3 : Integer k (index of your priority) Output Format : Time required Sample Input 1 : 3 3 9 4 2 Sample Output 1 : 2 Sample Output 1 Explanation : Person with priority 3 comes out. But there is a person with higher priority than him. So he goes and then stands in the queue at the end. Queue's status : {9, 4, 3}. Time : 0 secs. Next, the person with priority 9 comes out. And there is no person with higher priority than him. So he'll get the ticket. Queue's status : {4, 3}. Time : 1 secs. Next, the person with priority 4 comes out (which is you). And there is no person with higher priority than you. So you'll get the ticket. Time : 2 secs. Sample Input 2 : 5 2 3 2 2 4 3 Sample Output 2 : 4 =====Answer===== Correct Option: @csalgo"},{"id":"8ed762e0-4f30-4baf-a3b4-0439c41469b3","title":"@csalgo Coding Problem Problem","fileName":"13.Inplace Heap sort.txt","filetype":"text","fileSize":458,"url":"http://older (11)/19.Lecture 15  Priority Queues/13.Inplace Heap sort.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Inplace Heap sort Problem Level: MEDIUM Problem Description: Given an integer array of size n. Sort this array (in decreasing order) using heap sort. Space complexity should be O(1). Input Format : Line 1 : Integer n, Array size Line 2 : Array elements, separated by space Output Format : Array elements after sorting Constraints : 1  = n  = 10^6 Sample Input: 6 2 6 8 5 4 3 Sample Output: 8 6 5 4 3 2 @csalgo"},{"id":"f07f080a-eef8-47a0-be11-a5632b428035","title":"@csalgo Coding Problem Problem","fileName":"9.Remove Min.txt","filetype":"text","fileSize":401,"url":"http://older (11)/19.Lecture 15  Priority Queues/9.Remove Min.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Remove Min Problem Level: MEDIUM Problem Description: Implement the function RemoveMin for the min priority queue class. For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element. Note : main function is given for your reference which we are using internally to test the code. @csalgo"},{"id":"a4c1eb30-911e-4984-be4f-bebd1f8ef0bb","title":"@csalgo Coding Problem Problem","fileName":"11.Max priority queue class.txt","filetype":"text","fileSize":847,"url":"http://older (11)/19.Lecture 15  Priority Queues/11.Max priority queue class.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Max priority queue class Problem Level: MEDIUM Problem Description: Implement the class for Max Priority Queue which includes following functions  1. getSize  Return the size of priority queue i.e. number of elements present in the priority queue. 2. isEmpty  Check if priority queue is empty or not. Return true or false accordingly. 3. insert  Given an element, insert that element in the priority queue at the correct position. 4. getMax  Return the maximum element present in the priority queue without deleting. Return  Infinity if priority queue is empty. 5. removeMax  Delete and return the maximum element present in the priority queue. Return  Infinity if priority queue is empty. Note : main function is given for your reference which we are using internally to test the class. @csalgo"},{"id":"0576e9cf-22cc-4ad6-bce4-6a4bbded2913","title":"@csalgo Coding Problem Problem","fileName":"20.K largest elements.txt","filetype":"text","fileSize":678,"url":"http://older (11)/19.Lecture 15  Priority Queues/20.K largest elements.txt","fileDetails":"@csalgo Coding Problem Problem Statement: K largest elements Problem Level: MEDIUM Problem Description: You are given with an integer k and an array of integers that contain numbers in random order. Write a program to find k largest numbers from given array. You need to save them in an array and return it. Time complexity should be O(nlogk) and space complexity should be not more than O(k). Order of elements in the output is not important. Input Format : Line 1 : Size of array (n) Line 2 : Array elements (separated by space) Line 3 : Integer k Output Format : k largest elements Sample Input : 13 2 12 9 16 10 5 3 20 25 11 1 8 6 4 Sample Output : 12 16 20 25 @csalgo"},{"id":"a18ed983-567c-4cee-bbd4-b750ac695fac","title":"@csalgo Coding Problem Problem","fileName":"18.K smallest elements.txt","filetype":"text","fileSize":681,"url":"http://older (11)/19.Lecture 15  Priority Queues/18.K smallest elements.txt","fileDetails":"@csalgo Coding Problem Problem Statement: K smallest elements Problem Level: MEDIUM Problem Description: You are given with an integer k and an array of integers that contain numbers in random order. Write a program to find k smallest numbers from given array. You need to save them in an array and return it. Time complexity should be O(nlogk) and space complexity should be not more than O(k). Order of elements in the output is not important. Input Format : Line 1 : Size of array (n) Line 2 : Array elements (separated by space) Line 3 : Integer k Output Format : k smallest elements Sample Input 1 : 13 2 12 9 16 10 5 3 20 25 11 1 8 6 4 Sample Output 1 : 5 3 2 1 @csalgo"},{"id":"5b3bbf8c-6cc4-4376-8f23-ecdf5d21b6ee","title":"@csalgo Assignment Problem Pro","fileName":"10.What is the output.txt","filetype":"text","fileSize":389,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/10.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: What is the output of the following program? #include iostream using namespace std; int x = 1; void print(){  int x = 2;  {  int x = 3;  cout   x   endl;  } } int main(){  print();  return 0; } Options: 0. 1 1. 2 2. 3 3. Error =====Answer===== Correct Option: 2 @csalgo"},{"id":"5266a930-8600-499d-9144-c9189ba42009","title":"@csalgo Assignment Problem Pro","fileName":"1.void pointer.txt","filetype":"text","fileSize":214,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/1.void pointer.txt","fileDetails":"@csalgo Assignment Problem Problem Name: void pointer Problem Description: Void pointer can point to which type of objects ? Options: 0. int 1. double 2. float 3. All =====Answer===== Correct Option: 3 @csalgo"},{"id":"8ebccd0b-2493-4941-b799-9dd0c360f5ec","title":"@csalgo Assignment Problem Pro","fileName":"1.What is the output.txt","filetype":"text","fileSize":305,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/1.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: #include  iostream using namespace std; void updateValue(int *p){  *p = 610 % 255; } int main(){  char ch = 'A';  updateValue((int*)&ch);  cout   ch; } Options: =====Answer===== Correct Option: 3 @csalgo"},{"id":"eb14692a-b72b-41cf-a58c-1c6d424b61e0","title":"@csalgo Assignment Problem Pro","fileName":"10.Fill the output.txt","filetype":"text","fileSize":316,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/10.Fill the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fill the output Problem Description: What is the output of the following program? #include  iostream using namespace std; #define SQUARE(x) x*x int main(){  int x = 36   SQUARE(6);  cout   x;  return 0; } Options: =====Answer===== Correct Option: 2 @csalgo"},{"id":"2c22c49c-2e53-4c83-84bd-2a0ac409fd5f","title":"@csalgo Assignment Problem Pro","fileName":"12.Default arguments.txt","filetype":"text","fileSize":422,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/12.Default arguments.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Default arguments Problem Description: Which of the following statement is correct? Options: 0. Only one parameter of a function can be a default parameter. 1. Minimum one parameter of a function must be a default parameter. 2. All the parameters of a function can be default parameters. 3. No parameter of a function can be default. =====Answer===== Correct Option: 2 @csalgo"},{"id":"8997f8be-39ff-4aeb-90af-9783bd2fb32b","title":"@csalgo Assignment Problem Pro","fileName":"14.Constants.txt","filetype":"text","fileSize":317,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/14.Constants.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Constants Problem Description: Which statement(s) will give an error for the following code  #include  iostream using namespace std; int main(){  const int p = 5;  int const *q = &p; } Options: 0. p++; 1. q++ 2. (*q)++; =====Answer===== Correct Option: 2 @csalgo"},{"id":"a012a484-8463-4f70-8f14-2f00729ee705","title":"@csalgo Assignment Problem Pro","fileName":"12.What is the output.txt","filetype":"text","fileSize":387,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/12.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: What is the output of the following program ? #include iostream using namespace std; int getValue(int x = 0, int y = 0, int z){ return (x + y + z); } int main(){  cout   getValue(10);  return 0; } Options: 0. 10 1. 0 2. 20 3. Compilation Error =====Answer===== Correct Option: 3 @csalgo"},{"id":"b0d6620d-0e2f-44d5-bfe4-144859dca5f3","title":"@csalgo Assignment Problem Pro","fileName":"12.Inline functions.txt","filetype":"text","fileSize":344,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/12.Inline functions.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Inline functions Problem Description: Inline functions are useful when ______ Options: 0. Function is large with many nested loops 1. Function has many static variables 2. Function is small and we want to avoid function call overhead. 3. None of the above =====Answer===== Correct Option: 2 @csalgo"},{"id":"604b5a2e-0d52-48c0-99bf-046cc326ac81","title":"@csalgo Assignment Problem Pro","fileName":"3.Reference Variable.txt","filetype":"text","fileSize":315,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/3.Reference Variable.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Reference Variable Problem Description: What is the correct syntax of declaring and defining a reference? Options: 0. int a = 10; int &b; b = a; 1. int a = 10; int &b = a; 2. int a = 10; int b = &a; 3. int a = 10; int &b = &a; =====Answer===== Correct Option: 1 @csalgo"},{"id":"f4778b31-2bd2-4d57-974f-007a937dce3c","title":"@csalgo Assignment Problem Pro","fileName":"5.Create array.txt","filetype":"text","fileSize":309,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/5.Create array.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Create array Problem Description: Correct statement for creating an integer array of size 5, dynamically  Options: 0. int *arr[] = new int[5]; 1. int *arr = new int[5]; 2. int arr = new int[5]; 3. int *arr[5] = new int; =====Answer===== Correct Option: 1 @csalgo"},{"id":"8251aa4d-ae0b-4718-9aca-5702b1dc62f8","title":"@csalgo Assignment Problem Pro","fileName":"3.What is the output.txt","filetype":"text","fileSize":361,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/3.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: #include  iostream using namespace std; void func(int i, int& j, int p){  i++;  j++;  p++; } int main(){  int i = 10;  int j = 6;  int &p = i;  func(i, j, p);  cout   i   \" \"   j   \" \"   p; } Options: =====Answer===== Correct Option: 1 @csalgo"},{"id":"93ad0e21-4e81-47b6-a727-a2e56292798e","title":"@csalgo Assignment Problem Pro","fileName":"14.What is the output.txt","filetype":"text","fileSize":304,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/14.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: #include  iostream using namespace std; int main(){  int p = 5;  int const *q = &p;  p++;  cout   p   endl;  return 0; } Options: 0. Error 1. 5 2. 6 3. None =====Answer===== Correct Option: 2 @csalgo"},{"id":"3057e325-5b88-42fb-a0d8-e04e4d4b4d55","title":"@csalgo Assignment Problem Pro","fileName":"5.Deallocate memory.txt","filetype":"text","fileSize":325,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/5.Deallocate memory.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Deallocate memory Problem Description: How will you free the memory allocated by following program  #include  iostream using namespace std; int main() {  int *a = new int; } Options: 0. free a; 1. delete *a; 2. delete a; 3. new a; =====Answer===== Correct Option: 2 @csalgo"},{"id":"52e344a6-1173-4be8-83de-530d5b3fc1ac","title":"@csalgo Assignment Problem Pro","fileName":"5.Delete array.txt","filetype":"text","fileSize":249,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/5.Delete array.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Delete array Problem Description: Correct statement for deallocating the array is  Options: 0. delete [] arr; 1. delete arr; 2. delete *arr; 3. delete [] *arr; =====Answer===== Correct Option: 0 @csalgo"},{"id":"442b94c4-1246-47da-872c-b0b6ebd6b1e3","title":"@csalgo Assignment Problem Pro","fileName":"5.Dynamic memory allocation.txt","filetype":"text","fileSize":248,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/5.Dynamic memory allocation.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Dynamic memory allocation Problem Description: In CPP, dynamic memory allocation is done using __ operator. Options: 0. calloc() 1. malloc() 2. allocate 3. new =====Answer===== Correct Option: 3 @csalgo"},{"id":"6daccec9-549e-4f65-b3c1-6754f0f10f47","title":"@csalgo Assignment Problem Pro","fileName":"5.Delete memory.txt","filetype":"text","fileSize":366,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/5.Delete memory.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Delete memory Problem Description: On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to? Options: 0. NULL 1. Other dynamically allocated memory 2. The same deleted memory location 3. It points back to location it was initialized with =====Answer===== Correct Option: 2 @csalgo"},{"id":"9d98f3d1-e85a-445b-9527-f3296fcbc255","title":"@csalgo Assignment Problem Pro","fileName":"7.Create array.txt","filetype":"text","fileSize":309,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/7.Create array.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Create array Problem Description: Correct statement for creating an integer array of size 5, dynamically  Options: 0. int *arr[] = new int[5]; 1. int *arr = new int[5]; 2. int arr = new int[5]; 3. int *arr[5] = new int; =====Answer===== Correct Option: 1 @csalgo"},{"id":"94c64d77-6b65-464d-a286-2fb3165210c9","title":"@csalgo Assignment Problem Pro","fileName":"7.Deallocate memory.txt","filetype":"text","fileSize":325,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/7.Deallocate memory.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Deallocate memory Problem Description: How will you free the memory allocated by following program  #include  iostream using namespace std; int main() {  int *a = new int; } Options: 0. free a; 1. delete *a; 2. delete a; 3. new a; =====Answer===== Correct Option: 2 @csalgo"},{"id":"40d063ef-ea0c-4d90-a76b-f364f7e3b153","title":"@csalgo Assignment Problem Pro","fileName":"8.Delete 2D array.txt","filetype":"text","fileSize":645,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/8.Delete 2D array.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Delete 2D array Problem Description: Given the following CPP Program. Select the CORRECT Syntax of deleting this 2D array? Check all that apply. #include  iostream using namespace std; int main() {  int **twoDArray = new int*[10];  for(int i = 0; i   10; i++)  *(twoDArray + i) = new int[10]; } Options are  A. delete twoDArray [][]; B. for(int i = 0; i   10; i++)  delete twoDArray[i]; C. for(int i = 0; i   10; i++)  delete [] twoDArray[i]; D. for(int i = 0; i   10; i++)  delete twoDArray[i][]; Options: 0. A 1. B 2. C 3. D =====Answer===== Correct Option: 2 @csalgo"},{"id":"c7629c74-34a7-41b2-9ddd-65963831180f","title":"@csalgo Assignment Problem Pro","fileName":"7.Delete array.txt","filetype":"text","fileSize":249,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/7.Delete array.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Delete array Problem Description: Correct statement for deallocating the array is  Options: 0. delete [] arr; 1. delete arr; 2. delete *arr; 3. delete [] *arr; =====Answer===== Correct Option: 0 @csalgo"},{"id":"dd668f8a-4f9e-4743-bb69-308f680e4879","title":"@csalgo Assignment Problem Pro","fileName":"8.2D arrays.txt","filetype":"text","fileSize":296,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/8.2D arrays.txt","fileDetails":"@csalgo Assignment Problem Problem Name: 2D arrays Problem Description: How to Dynamically create a Two Dimensional Array in C++? Options: 0. int *twoDArray = new int[10][10]; 1. int **twoDArray = new int*[10]; 2. int **twoDArray = new int[10][10]; =====Answer===== Correct Option: 1 @csalgo"},{"id":"7e4ab02d-a367-4f53-bd06-a8c4125a0c96","title":"@csalgo Assignment Problem Pro","fileName":"7.Delete memory.txt","filetype":"text","fileSize":366,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/7.Delete memory.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Delete memory Problem Description: On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to? Options: 0. NULL 1. Other dynamically allocated memory 2. The same deleted memory location 3. It points back to location it was initialized with =====Answer===== Correct Option: 2 @csalgo"},{"id":"31257672-b969-496d-895a-f4cb7053860f","title":"@csalgo Assignment Problem Pro","fileName":"7.Dynamic memory allocation.txt","filetype":"text","fileSize":248,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/7.Dynamic memory allocation.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Dynamic memory allocation Problem Description: In CPP, dynamic memory allocation is done using __ operator. Options: 0. calloc() 1. malloc() 2. allocate 3. new =====Answer===== Correct Option: 3 @csalgo"},{"id":"a619f67d-b0dc-446b-b1f5-f77de8475110","title":"@csalgo Chapter Assignment Pro","fileName":"1.Palindrome Pair.txt","filetype":"text","fileSize":1064,"url":"http://older (11)/20.Assignment  Tries/1.Palindrome Pair.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Palindrome Pair Problem Level: HARD Problem Description: Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome. The function should return either true or false. You don't have to print anything. Input Format : The first line of the test case contains an integer value denoting 'n'. The following contains 'n' number of words each separated by a single space. Output Format : The first and only line of output contains true if the conditions described in the task are met and false otherwise. Constraints: Time Limit: 1 sec Sample Input 1 : 4 abc def ghi cba Sample Output 1 : true Explanation of Sample Input 1: \"abc\" and \"cba\" forms a palindrome Sample Input 2 : 2 abc def Sample Output 2 : false Explanation of Sample Input 2: Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.' =====Answer===== Correct Option: @csalgo"},{"id":"7dd62b79-3c20-4c81-9aef-2f6b0db46339","title":"@csalgo Assignment Problem Pro","fileName":"8.Jagged arrays.txt","filetype":"text","fileSize":182,"url":"http://older (11)/2.Lecture 2 Dynamic Allocation/8.Jagged arrays.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Jagged arrays Problem Description: Can we create Jagged Arrays in C++ ? Options: 0. Yes 1. No =====Answer===== Correct Option: 0 @csalgo"},{"id":"f8d2567c-501d-441d-bd07-ebefb517bf1b","title":"@csalgo Chapter Assignment Pro","fileName":"0.Pattern Matching.txt","filetype":"text","fileSize":888,"url":"http://older (11)/20.Assignment  Tries/0.Pattern Matching.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pattern Matching Problem Level: MEDIUM Problem Description: Given a list of n words and a pattern p that we want to search. Check if the pattern p is present the given words or not. Return true if the pattern is present and false otherwise. Input Format : The first line of input contains an integer, that denotes the value of n. The following line contains n space separated words. The following line contains a string, that denotes the value of the pattern p. Output Format : The first and only line of output contains true if the pattern is present and false otherwise. Constraints: Time Limit: 1 sec Sample Input 1 : 4 abc def ghi cba de Sample Output 2 : true Sample Input 2 : 4 abc def ghi hg hi Sample Output 2 : true Sample Input 3 : 4 abc def ghi hg hif Sample Output 3 : false =====Answer===== Correct Option: @csalgo"},{"id":"2b70a4ff-89ed-4b63-9552-65c583a30a0c","title":"@csalgo Chapter Assignment Pro","fileName":"2.Auto complete.txt","filetype":"text","fileSize":968,"url":"http://older (11)/20.Assignment  Tries/2.Auto complete.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Auto complete Problem Level: HARD Problem Description: Given n number of words and an incomplete word w. You need to auto complete that word w. That means, find and print all the possible words which can be formed using the incomplete word w. Note : Order of words does not matter. Input Format : The first line of input contains an integer, that denotes the value of n. The following line contains n space separated words. The following line contains the word w, that has to be auto completed. Output Format : Print all possible words in separate lines. Constraints: Time Limit: 1 sec Sample Input 1 : 7 do dont no not note notes den no Sample Output 2 : no not note notes Sample Input 2 : 7 do dont no not note notes den de Sample Output 2 : den Sample Input 3 : 7 do dont no not note notes den nom Sample Output 3 : (Empty) There is no word which starts with \"nom\" =====Answer===== Correct Option: @csalgo"},{"id":"8705b0fa-814d-45f4-a8af-cbe9b8472981","title":"Join @csalgo Telegram","fileName":"@csalgo Telegram.txt","filetype":"text","fileSize":21,"url":"http://older (11)/20.Assignment  Tries/@csalgo Telegram.txt","fileDetails":"Join @csalgo Telegram"},{"id":"2f714554-70c5-4765-bcaf-a9aff2dfff6f","title":"@csalgo Coding Problem Problem","fileName":"3.Min Steps to one.txt","filetype":"text","fileSize":995,"url":"http://older (11)/21.Lecture 17  DP - 1/3.Min Steps to one.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Min Steps to one Problem Level: EASY Problem Description: Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps: 1.) Subtract 1 from it. (n = n   ­1) , 2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n   2 ) , 3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n   3 ). Write brute force recursive solution for this. Input format : The first and the only line of input contains an integer value, 'n'. Output format : Print the minimum number of steps. Constraints : 1  = n  = 200 Time Limit: 1 sec Sample Input 1 : 4 Sample Output 1 : 2 Explanation of Sample Output 1 : For n = 4 Step 1 : n = 4   2 = 2 Step 2 : n = 2   2 = 1 Sample Input 2 : 7 Sample Output 2 : 3 Explanation of Sample Output 2 : For n = 7 Step 1 : n = 7 ­  1 = 6 Step 2 : n = 6   3 = 2 Step 3 : n = 2   2 = 1 @csalgo"},{"id":"52c964a1-a728-42d0-b964-260772a23b5b","title":"@csalgo Coding Problem Problem","fileName":"11.Number of balanced Binary Trees.txt","filetype":"text","fileSize":555,"url":"http://older (11)/21.Lecture 17  DP - 1/11.Number of balanced Binary Trees.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Number of balanced Binary Trees Problem Level: HARD Problem Description: Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced. This number can be huge, so return output modulus 10^9 + 7. Write a simple recursive solution. Input Format : Integer h Output Format : Count % 10^9 + 7 Input Constraints : 1  = h  = 40 Sample Input 1: 3 Sample Output 1: 15 Sample Input 2: 4 Sample Output 2: 315 @csalgo"},{"id":"1c5ed75c-eb8f-4f45-bfb9-69ca0002da89","title":"@csalgo Coding Problem Problem","fileName":"5.Min Steps to one using DP.txt","filetype":"text","fileSize":962,"url":"http://older (11)/21.Lecture 17  DP - 1/5.Min Steps to one using DP.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Min Steps to one using DP Problem Level: EASY Problem Description: Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps: 1.) Subtract 1 from it. (n = n   ­1) , 2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n   2 ) , 3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n   3 ). Input format : The first and the only line of input contains an integer value, 'n'. Output format : Print the minimum number of steps. Constraints : 1  = n  = 10 ^ 6 Time Limit: 1 sec Sample Input 1 : 4 Sample Output 1 : 2 Explanation of Sample Output 1 : For n = 4 Step 1 : n = 4   2 = 2 Step 2 : n = 2   2 = 1 Sample Input 2 : 7 Sample Output 2 : 3 Explanation of Sample Output 2 : For n = 7 Step 1 : n = 7 ­  1 = 6 Step 2 : n = 6   3 = 2 Step 3 : n = 2   2 = 1 @csalgo"},{"id":"f08d3d53-f432-40e5-a1f4-b5e54fd15785","title":"@csalgo Coding Problem Problem","fileName":"13.Number of balanced Binary Trees.txt","filetype":"text","fileSize":554,"url":"http://older (11)/21.Lecture 17  DP - 1/13.Number of balanced Binary Trees.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Number of balanced Binary Trees Problem Level: HARD Problem Description: Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced. This number can be huge, so return output modulus 10^9 + 7. Time complexity should be O(h). Input Format : Integer h Output Format : Count % 10^9 + 7 Input Constraints : 1  = h  = 10^7 Sample Input 1: 3 Sample Output 1: 15 Sample Input 2: 4 Sample Output 2: 315 @csalgo"},{"id":"ab590827-6de8-49af-a4ee-8d217514fd69","title":"@csalgo Coding Problem Problem","fileName":"7.Staircase.txt","filetype":"text","fileSize":616,"url":"http://older (11)/21.Lecture 17  DP - 1/7.Staircase.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Staircase Problem Level: MEDIUM Problem Description: A child runs up a staircase with 'n' steps and can hop either 1 step, 2 steps or 3 steps at a time. Implement a method to count and return all possible ways in which the child can run up to the stairs. Input format : The first and the only line of input contains an integer value, 'n', denoting the total number of steps. Output format : Print the total possible number of ways. Constraints : 0  = n  = 10 ^ 4 Time Limit: 1 sec Sample Input 1: 4 Sample Output 1: 7 Sample Input 2: 10 Sample Output 2: 274 @csalgo"},{"id":"e4a3b785-f91a-4641-8d85-0286461d5c2a","title":"@csalgo Chapter Assignment Pro","fileName":"0.Loot Houses.txt","filetype":"text","fileSize":968,"url":"http://older (11)/22.Assignment DP/0.Loot Houses.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Loot Houses Problem Level: MEDIUM Problem Description: A thief wants to loot houses. He knows the amount of money in each house. He cannot loot two consecutive houses. Find the maximum amount of money he can loot. Input format : The first line of input contains an integer value of 'n'. It is the total number of houses. The second line of input contains 'n' integer values separated by a single space denoting the amount of money each house has. Output format : Print the the maximum money that can be looted. Constraints : 0  = n  = 10 ^ 4 Time Limit: 1 sec Sample Input 1 : 6 5 5 10 100 10 5 Sample Output 1 : 110 Sample Input 2 : 6 10 2 30 20 3 50 Sample Output 2 : 90 Explanation of Sample Output 2 : Looting first, third, and the last houses([10 + 30 + 50]) will result in the maximum loot, and all the other possible combinations would result in less than 90. =====Answer===== Correct Option: @csalgo"},{"id":"ad55fd97-4c59-445a-b5ed-7aa58d9d8408","title":" Coding Problem Problem Statem","fileName":"9.Minimum Count.txt","filetype":"text","fileSize":1039,"url":"http://older (11)/21.Lecture 17  DP - 1/9.Minimum Count.txt","fileDetails":" Coding Problem Problem Statement: Minimum Count Problem Level: MEDIUM Problem Description: Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares. That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares. Input format : The first and the only line of input contains an integer value, 'N'. Output format : Print the minimum count of numbers required. Constraints : 0  = n  = 10 ^ 4 Time Limit: 1 sec Sample Input 1 : 12 Sample Output 1 : 3 Explanation of Sample Output 1 : 12 can be represented as : A) (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) B) (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (2 ^ 2) C) (1^1) + (1^1) + (1^1) + (1^1) + (2 ^ 2) + (2 ^ 2) D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2) As we can see, the output should be 3. Sample Input 2 : 9 Sample Output 2 : 1 @csalgo"},{"id":"7819983e-9534-44ac-b5c7-d530ff38d82c","title":"@csalgo Chapter Assignment Pro","fileName":"1.Longest Increasing Subsequence.txt","filetype":"text","fileSize":718,"url":"http://older (11)/22.Assignment DP/1.Longest Increasing Subsequence.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Longest Increasing Subsequence Problem Level: MEDIUM Problem Description: Given an array with N elements, you need to find the length of the longest subsequence of a given sequence such that all elements of the subsequence are sorted in strictly increasing order. Input Format Line 1 : An integer N Line 2 : Elements of arrays separated by spaces Output Format Line 1 : Length of longest subsequence Input Constraints 1  = n  = 10^3 Sample Input : 6 5 4 11 1 16 8 Sample Output 1 : 3 Sample Output Explanation Length of longest subsequence is 3 i.e. (5,11,16) or (4,11,16). Sample Input 2: 3 1 2 2 Sample Output 2 : 2 =====Answer===== Correct Option: @csalgo"},{"id":"9ba4c16e-8784-452e-8100-576f799bf74e","title":" Chapter Assignment Problem St","fileName":"2.All possible ways.txt","filetype":"text","fileSize":672,"url":"http://older (11)/22.Assignment DP/2.All possible ways.txt","fileDetails":" Chapter Assignment Problem Statement: All possible ways Problem Level: MEDIUM Problem Description: Given two integers a and b. You need to find and return the count of possible ways in which we can represent the number a as the sum of unique integers raise to the power b. For eg. if a = 10 and b = 2, only way to represent 10 as  10 = 1^2 + 3^2 Hence, answer is 1. Note : x^y represents x raise to the power y Inout Format : Two integers a and b (separated by space) Output Format : Count Constraints : 1  = a  = 10^5 1  = b  = 50 Sample Input 1 : 10 2 Sample Output 1 : 1 Sample Input 2 : 100 2 Sample Output 2 : 3 =====Answer===== Correct Option: @csalgo"},{"id":"f44150fb-ed6f-4a9f-8827-0ebf0fca6b69","title":"@csalgo Chapter Assignment Pro","fileName":"5.Coin Tower.txt","filetype":"text","fileSize":862,"url":"http://older (11)/22.Assignment DP/5.Coin Tower.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Coin Tower Problem Level: MEDIUM Problem Description: Whis and Beerus are playing a new game today. They form a tower of N coins and make a move in alternate turns. Beerus plays first. In one step, the player can remove either 1, X, or Y coins from the tower. The person to make the last move wins the game. Can you find out who wins the game? Input format : The first and the only line of input contains three integer values separated by a single space. They denote the value of N, X and Y, respectively. Output format : Prints the name of the winner, either 'Whis' or 'Beerus' (Without the quotes). Constraints : 1  = N  = 10 ^ 6 2  = X  = Y = 50 Time Limit: 1 sec Sample Input 1 : 4 2 3 Sample Output 1 : Whis Sample Input 2 : 10 2 4 Sample Output 2 : Beerus =====Answer===== Correct Option: @csalgo"},{"id":"ca16d3ce-68af-4d5e-882f-279f7bb00cfb","title":"@csalgo Chapter Assignment Pro","fileName":"3.Ways To Make Coin Change.txt","filetype":"text","fileSize":1093,"url":"http://older (11)/22.Assignment DP/3.Ways To Make Coin Change.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Ways To Make Coin Change Problem Level: MEDIUM Problem Description: For the given infinite supply of coins of each of denominations, D = {D0, D1, D2, D3, ...... Dn 1}. You need to figure out the total number of ways W, in which you can make the change for Value V using coins of denominations D. Return 0 if the change isn't possible. Input Format The first line of the input contains an integer value N, which denotes the total number of denominations. The second line of input contains N values, separated by a single space. These values denote the value of denomination. The third line of the input contains an integer value, that denotes the value of V. Output Format Print the total total number of ways i.e. W. Constraints : 1  = n  = 10 1  = V  = 1000 Time Limit: 1sec Sample Input 1 : 3 1 2 3 4 Sample Output 1 : 4 Explanation to Sample Input 1 : Number of ways are   4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2). Sample Input 2 : 6 1 2 3 4 5 6 250 Sample Output 2 : 13868903 =====Answer===== Correct Option: @csalgo"},{"id":"9bf0f393-dbc1-4344-ad10-ac8c202c49d5","title":"@csalgo Chapter Assignment Pro","fileName":"4.Matrix Chain Multiplication.txt","filetype":"text","fileSize":1115,"url":"http://older (11)/22.Assignment DP/4.Matrix Chain Multiplication.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Matrix Chain Multiplication Problem Level: HARD Problem Description: Given a chain of matrices A1, A2, A3,.....An, you have to figure out the most efficient way to multiply these matrices i.e. determine where to place parentheses to minimise the number of multiplications. You will be given an array p[] of size n + 1. Dimension of matrix Ai is p[i   1]*p[i]. You need to find minimum number of multiplications needed to multiply the chain. Input Format : Line 1 : Integer n i.e. number of matrices Line 2 : n + 1 integers i.e. elements of array p[] Output Format : Line 1 : Minimum number of multiplication needed Constraints : 1  = n  = 100 Sample Input 1 : 3 10 15 20 25 Sample Output : 8000 Sample Output Explanation : There are two ways to multiply the chain   A1*(A2*A3) or (A1*A2)*A3. If multiply in order A1*(A2*A3) then number of multiplications required are 15000. If multiply in order (A1*A2)*A3 then number of multiplications required are 8000. Thus minimum number of multiplications required are 8000 =====Answer===== Correct Option: @csalgo"},{"id":"24d863f7-3c89-4113-a829-a4d9223fd18a","title":"@csalgo Coding Problem Problem","fileName":"1.Min cost Path.txt","filetype":"text","fileSize":1271,"url":"http://older (11)/22.Lecture 18  DP - 2/1.Min cost Path.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Min cost Path Problem Level: MEDIUM Problem Description: An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M   1, N   1). From a cell (i, j), you can move in three directions: 1. ((i + 1), j) which is, \"down\" 2. (i, (j + 1)) which is, \"to the right\" 3. ((i+1), (j+1)) which is, \"to the diagonal\" The cost of a path is defined as the sum of each cell's values through which the route passes. Input format : The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two dimensional array list. The second line onwards, the next 'M' lines or rows represent the ith row values. Each of the ith row constitutes 'N' column values separated by a single space. Output format : Print the minimum cost to reach the destination. Constraints : 1  = M  = 10 ^ 2 1  = N  = 10 ^ 2 Time Limit: 1 sec Sample Input 1 : 3 4 3 4 1 2 2 1 8 9 4 7 8 1 Sample Output 1 : 13 Sample Input 2 : 3 4 10 6 9 0 23 8 9 90 200 0 89 200 Sample Output 2 : 76 Sample Input 3 : 5 6 9 6 0 12 90 1 2 7 8 5 78 6 1 6 0 5 10  4 9 6 2  10 7 4 10  2 0 5 5 7 Sample Output 3 : 18 @csalgo"},{"id":"7f6d39a9-121e-4c60-9491-badfe0281a28","title":"@csalgo Chapter Assignment Pro","fileName":"6.Maximum Square Matrix With All Zeros.txt","filetype":"text","fileSize":949,"url":"http://older (11)/22.Assignment DP/6.Maximum Square Matrix With All Zeros.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Maximum Square Matrix With All Zeros Problem Level: MEDIUM Problem Description: Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub matrix with all 0s. You need to return the size of the square matrix with all 0s. Input format : The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively. Second line onwards, the next 'N' lines or rows represent the ith row values. Each of the ith rows constitutes column values separated by a single space (Either 0 or 1). Output Format: Print the size of maximum square sub matrix. Constraints : 0  = N  = 10^4 0  = M  = 10^4 Time Limit: 1 sec Sample Input 1: 3 3 1 1 0 1 1 1 1 1 1 Sample Output 1: 1 Sample Input 2: 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Sample Output 2: 4 =====Answer===== Correct Option: @csalgo"},{"id":"2c3999c6-25b4-424d-a236-65901a5b5c1f","title":"@csalgo Coding Problem Problem","fileName":"11.Edit Distance.txt","filetype":"text","fileSize":1244,"url":"http://older (11)/22.Lecture 18  DP - 2/11.Edit Distance.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Edit Distance Problem Level: MEDIUM Problem Description: You are given two strings S and T of lengths M and N, respectively. Find the 'Edit Distance' between the strings. Edit Distance of two strings is the minimum number of steps required to make one string equal to the other. In order to do so, you can perform the following three operations: 1. Delete a character 2. Replace a character with another one 3. Insert a character Note : Strings don't contain spaces in between. Input format : The first line of input contains the string S of length M. The second line of the input contains the String T of length N. Output format : Print the minimum 'Edit Distance' between the strings. Constraints : 0  = M  = 10 ^ 3 0  = N  = 10 ^ 3 Time Limit: 1 sec Sample Input 1 : abc dc Sample Output 1 : 2 Explanation to the Sample Input 1 :  In 2 operations we can make string T to look like string S. First, insert character 'a' to string T, which makes it \"adc\". And secondly, replace the character 'd' of string T with 'b' from the string S. This would make string T as \"abc\" which is also string S. Hence, the minimum distance. Sample Input 2 : whgtdwhgtdg aswcfg Sample Output 2 : 9 @csalgo"},{"id":"05d89a9f-c1b2-4491-8ca9-d5c5c1449a8a","title":"@csalgo Chapter Assignment Pro","fileName":"7.Shortest Subsequence.txt","filetype":"text","fileSize":599,"url":"http://older (11)/22.Assignment DP/7.Shortest Subsequence.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Shortest Subsequence Problem Level: MEDIUM Problem Description: Gary has two string S and V. Now Gary wants to know the length shortest subsequence in S such that it is not a subsequence in V. Note: input data will be such so there will always be a solution. Input Format : Line 1 : String S of length N (1  = N  = 1000) Line 2 : String V of length M (1  = M  = 1000) Output Format : Length of shortest subsequence in S such that it is not a subsequence in V Sample Input : babab babba Sample Output : 3 =====Answer===== Correct Option: @csalgo"},{"id":"3141427b-96ea-426a-9c04-a4570f2ba3d0","title":"@csalgo Coding Problem Problem","fileName":"15.0 1 Knapsack.txt","filetype":"text","fileSize":993,"url":"http://older (11)/22.Lecture 18  DP - 2/15.0 1 Knapsack.txt","fileDetails":"@csalgo Coding Problem Problem Statement: 0 1 Knapsack Problem Level: MEDIUM Problem Description: A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal? Input Format : The first line of the input contains an integer value N, which denotes the total number of items. The second line of input contains the N number of weights separated by a single space. The third line of input contains the N number of values separated by a single space. The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal. Output Format : Print the maximum value of V that the thief can steal. Constraints : 1  = N  = 20 1 = Wi  = 100 1  = Vi  = 100 Time Limit: 1 sec Sample Input 1 : 4 1 2 4 5 5 4 8 6 5 Sample Output 1 : 13 Sample Input 2 : 5 12 7 11 8 9 24 13 23 15 16 26 Sample Output 2 : 51 @csalgo"},{"id":"99ca6c6e-69d2-43b3-96f3-aeb275c0ae91","title":"@csalgo Coding Problem Problem","fileName":"9.Edit Distance.txt","filetype":"text","fileSize":672,"url":"http://older (11)/22.Lecture 18  DP - 2/9.Edit Distance.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Edit Distance Problem Level: MEDIUM Problem Description: Given two strings s and t of lengths m and n respectively, find the Edit Distance between the strings. Edit Distance of two strings is minimum number of steps required to make one string equal to other. In order to do so you can perform following three operations only : 1. Delete a character 2. Replace a character with another one 3. Insert a character Note   Strings don't contain spaces Input Format : Line 1 : String s Line 2 : String t Output Format : Line 1 : Edit Distance value Constraints 1 = m,n  = 10 Sample Input 1 : abc dc Sample Output 1 : 2 @csalgo"},{"id":"08ba4804-028e-4efe-8069-f2ed73dd8e2e","title":"@csalgo Coding Problem Problem","fileName":"17.0 1 Knapsack.txt","filetype":"text","fileSize":709,"url":"http://older (11)/22.Lecture 18  DP - 2/17.0 1 Knapsack.txt","fileDetails":"@csalgo Coding Problem Problem Statement: 0 1 Knapsack Problem Level: HARD Problem Description: A thief robbing a store and can carry a maximal weight of W into his knapsack. There are N items and ith item weigh wi and is of value vi. What is the maximum value V, that thief can take ? Space complexity should be O(W). Input Format : Line 1 : N i.e. number of items Line 2 : N Integers i.e. weights of items separated by space Line 3 : N Integers i.e. values of items separated by space Line 4 : Integer W i.e. maximum weight thief can carry Output Format : Line 1 : Maximum value V Constraints 1  = N  = 10^4 1 = wi  = 100 1  = vi  = 100 Sample Input 1 : 4 1 2 4 5 5 4 8 6 5 Sample Output : 13 @csalgo"},{"id":"16d0c3aa-82c2-47cb-b4e8-1a4ca2d2284b","title":"@csalgo Chapter Assignment Pro","fileName":"4.3 Cycle.txt","filetype":"text","fileSize":871,"url":"http://older (11)/23.Assignment  Graphs/4.3 Cycle.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: 3 Cycle Problem Level: MEDIUM Problem Description: Given a graph with N vertices (numbered from 0 to N 1) and M undirected edges, then count the distinct 3 cycles in the graph. A 3 cycle PQR is a cycle in which (P,Q), (Q,R) and (R,P) are connected by an edge. Input Format : The first line of input contains two space separated integers, that denotes the value of N and M. Each of the following M lines contain two integers, that denote the vertices which have an undirected edge between them. Let us denote the two vertices with the symbol u and v. Output Format : Print the count the number of 3 cycles in the given graph Constraints : 0  = N  = 100 0  = M  = (N*(N 1)) 2 0  = u  = N   1 0  = v  = N   1 Time Limit: 1 sec Sample Input 1: 3 3 0 1 1 2 2 0 Sample Output 1: 1 =====Answer===== Correct Option: @csalgo"},{"id":"8c2bd64b-5f17-4aae-be4d-d3ffe8be4404","title":"@csalgo Chapter Assignment Pro","fileName":"0.Islands.txt","filetype":"text","fileSize":929,"url":"http://older (11)/23.Assignment  Graphs/0.Islands.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Islands Problem Level: MEDIUM Problem Description: An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given V islands (numbered from 1 to V) and E connections or edges between islands. Can you count the number of connected groups of islands. Input Format : The first line of input contains two integers, that denote the value of V and E. Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b. Output Format : Print the count the number of connected groups of islands Constraints : 0  = V  = 1000 0  = E  = (V * (V 1))   2 0  = a  = V   1 0  = b  = V   1 Time Limit: 1 second Sample Input 1: 5 8 0 1 0 4 1 2 2 0 2 4 3 0 3 2 4 3 Sample Output 1: 1 =====Answer===== Correct Option: @csalgo"},{"id":"96cba3e0-667b-4e6c-9cfa-892abfade1fd","title":"@csalgo Chapter Assignment Pro","fileName":"3.Largest Piece.txt","filetype":"text","fileSize":901,"url":"http://older (11)/23.Assignment  Graphs/3.Largest Piece.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Largest Piece Problem Level: MEDIUM Problem Description: It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ? Input Format : The first line of input contains an integer, that denotes the value of N. Each of the following N lines contain N space separated integers. Output Format : Print the count of '1's in the biggest piece of '1's, according to the description in the task. Constraints : 1  = N  = 1000 Time Limit: 1 sec Sample Input 1: 2 1 1 0 1 Sample Output 1: 3 =====Answer===== Correct Option: @csalgo"},{"id":"f7caa06c-8391-4cda-a435-24c4c185f461","title":"@csalgo Chapter Assignment Pro","fileName":"2.Connecting Dots.txt","filetype":"text","fileSize":1480,"url":"http://older (11)/23.Assignment  Graphs/2.Connecting Dots.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Connecting Dots Problem Level: EASY Problem Description: Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition: 1. These k dots are different: if i ≠ j then di is different from dj. 2. k is at least 4. 3. All dots belong to the same colour. 4. For all 1 ≤ i ≤ k   1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge. Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board. Input Format : The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter. Output Format : Print true if there is a cycle in the board, else print false. Constraints : 2  = N  = 1000 2  = M  = 1000 Time Limit: 1 second Sample Input 1: 3 4 AAAA ABCA AAAA Sample Output 1: true =====Answer===== Correct Option: @csalgo"},{"id":"9ad5d768-593e-44f1-96ca-6cc8d5aea766","title":"@csalgo Chapter Assignment Pro","fileName":"1.Coding Ninjas.txt","filetype":"text","fileSize":1006,"url":"http://older (11)/23.Assignment  Graphs/1.Coding Ninjas.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Coding Ninjas Problem Level: EASY Problem Description: Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” . There is a path from any cell to all its neighbouring cells. For a particular cell, neighbouring cells are those cells that share an edge or a corner with the cell. Input Format : The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns in the matrix. Each of the following N lines contain M characters. Please note that characters are not space separated. Output Format : Print 1 if there is a path which makes the sentence “CODINGNINJA” else print 0. Constraints : 1  = N  = 1000 1  = M  = 1000 Time Limit: 1 second Sample Input 1: 2 11 CXDXNXNXNXA XOXIXGXIXJX Sample Output 1: 1 2 11 AXDXNXNXNXA XOXjXGXIXJX =====Answer===== Correct Option: @csalgo"},{"id":"2e0057d1-1d15-4f76-bd42-3fcb456272d1","title":"@csalgo Coding Problem Problem","fileName":"15.Is Connected.txt","filetype":"text","fileSize":902,"url":"http://older (11)/23.Lecture 17  Graphs/15.Is Connected.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Is Connected ? Problem Level: MEDIUM Problem Description: Given an undirected graph G(V,E), check if the graph G is connected graph or not. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. Input Format : Line 1: Two Integers V and E (separated by space) Next 'E' lines, each have two space separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'. Output Format : \"true\" or \"false\" Constraints : 2  = V  = 1000 1  = E  = 1000 Sample Input 1: 4 4 0 1 0 3 1 2 2 3 Sample Output 1: true Sample Input 2: 4 3 0 1 1 3 0 3 Sample Output 2: false Sample Output 2 Explanation The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isn’t any path from vertices 0,1,3 to vertex 2. @csalgo"},{"id":"cdf819c0-5acc-4585-9079-3de409f1a99d","title":"@csalgo Coding Problem Problem","fileName":"11.Get Path - DFS.txt","filetype":"text","fileSize":1149,"url":"http://older (11)/23.Lecture 17  Graphs/11.Get Path - DFS.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Get Path   DFS Problem Level: MEDIUM Problem Description: Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), find and print the path from v1 to v2 (if exists). Print nothing if there is no path between v1 and v2. Find the path using DFS and print the first path that you encountered. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. Print the path in reverse order. That is, print v2 first, then intermediate vertices and v1 at last. Note : Save the input graph in Adjacency Matrix. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Two integers a and b, denoting that there exists an edge between vertex a and vertex b (separated by space) Line (E+2) : Two integers v1 and v2 (separated by space) Output Format : Path from v1 to v2 in reverse order (separated by space) Constraints : 2  = V  = 1000 1  = E  = 1000 0  = v1, v2  = V 1 Sample Input 1 : 4 4 0 1 0 3 1 2 2 3 1 3 Sample Output 1 : 3 0 1 Sample Input 2 : 6 3 5 3 0 1 3 4 0 3 Sample Output 2 : @csalgo"},{"id":"c66ac889-b71d-4d54-b8d5-782c0ebf7206","title":"@csalgo Coding Problem Problem","fileName":"13.Get Path - BFS.txt","filetype":"text","fileSize":1141,"url":"http://older (11)/23.Lecture 17  Graphs/13.Get Path - BFS.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Get Path   BFS Problem Level: MEDIUM Problem Description: Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), find and print the path from v1 to v2 (if exists). Print nothing if there is no path between v1 and v2. Find the path using BFS and print the shortest path available. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. Print the path in reverse order. That is, print v2 first, then intermediate vertices and v1 at last. Note : Save the input graph in Adjacency Matrix. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Two integers a and b, denoting that there exists an edge between vertex a and vertex b (separated by space) Line (E+2) : Two integers v1 and v2 (separated by space) Output Format : Path from v1 to v2 in reverse order (separated by space) Constraints : 2  = V  = 1000 1  = E  = 1000 0  = v1, v2  = V 1 Sample Input 1 : 4 4 0 1 0 3 1 2 2 3 1 3 Sample Output 1 : 3 0 1 Sample Input 2 : 6 3 5 3 0 1 3 4 0 3 Sample Output 2 : @csalgo"},{"id":"eeecc88c-e7b5-4e48-9f45-a9879dfae8e9","title":"@csalgo Coding Problem Problem","fileName":"5.BFS Traversal.txt","filetype":"text","fileSize":863,"url":"http://older (11)/23.Lecture 17  Graphs/5.BFS Traversal.txt","fileDetails":"@csalgo Coding Problem Problem Statement: BFS Traversal Problem Level: MEDIUM Problem Description: Given an undirected and disconnected graph G(V, E), print its BFS traversal. Here you need to consider that you need to print BFS path starting from vertex 0 only. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. Note : 1. Take graph input in the adjacency matrix. 2. Handle for Disconnected Graphs as well Input Format : Line 1: Two Integers V and E (separated by space) Next 'E' lines, each have two space separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'. Output Format : BFS Traversal (separated by space) Constraints : 2  = V  = 1000 1  = E  = 1000 Sample Input 1: 4 4 0 1 0 3 1 2 2 3 Sample Output 1: 0 1 3 2 @csalgo"},{"id":"de5a2a4b-1d1a-401e-b029-0300c6236ec4","title":"@csalgo Coding Problem Problem","fileName":"17.All connected components.txt","filetype":"text","fileSize":1090,"url":"http://older (11)/23.Lecture 17  Graphs/17.All connected components.txt","fileDetails":"@csalgo Coding Problem Problem Statement: All connected components Problem Level: MEDIUM Problem Description: Given an undirected graph G(V,E), find and print all the connected components of the given graph G. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. You need to take input in main and create a function which should return all the connected components. And then print them in the main, not inside function. Print different components in new line. And each component should be printed in increasing order (separated by space). Order of different components doesn't matter. Input Format : Line 1: Two Integers V and E (separated by space) Next 'E' lines, each have two space separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'. Output Format : Different components in new line Constraints : 2  = V  = 1000 1  = E  = 1000 Sample Input 1: 4 2 0 1 2 3 Sample Output 1: 0 1 2 3 Sample Input 2: 4 3 0 1 1 3 0 3 Sample Output 2: 0 1 3 2 @csalgo"},{"id":"8fd1504d-1399-4127-b051-e7a23cdb0a13","title":"@csalgo Coding Problem Problem","fileName":"9.Has Path .txt","filetype":"text","fileSize":854,"url":"http://older (11)/23.Lecture 17  Graphs/9.Has Path .txt","fileDetails":"@csalgo Coding Problem Problem Statement: Has Path Problem Level: MEDIUM Problem Description: Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), check if there exists any path between them or not. Print true or false. V is the number of vertices present in graph G and vertices are numbered from 0 to V 1. E is the number of edges present in graph G. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Two integers a and b, denoting that there exists an edge between vertex a and vertex b (separated by space) Line (E+2) : Two integers v1 and v2 (separated by space) Output Format : true or false Constraints : 2  = V  = 1000 1  = E  = 1000 0  = v1, v2  = V 1 Sample Input 1 : 4 4 0 1 0 3 1 2 2 3 1 3 Sample Output 1 : true Sample Input 2 : 6 3 5 3 0 1 3 4 0 3 Sample Output 2 : false @csalgo"},{"id":"ac9ecaa6-c321-4a45-8773-2e19fce3e3ac","title":"@csalgo Coding Problem Problem","fileName":"11.Dijkstra's Algorithm.txt","filetype":"text","fileSize":1029,"url":"http://older (11)/24.Lecture 20  Graphs 2_/11.Dijkstra's Algorithm.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Dijkstra's Algorithm Problem Level: HARD Problem Description: Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V 1) and E number of edges. Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm. Print the ith vertex number and the distance from source in one line separated by space. Print different vertices in different lines. Note : Order of vertices in output doesn't matter. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space) Output Format : In different lines, ith vertex number and its distance from source (separated by space) Constraints : 2  = V, E  = 10^5 Sample Input 1 : 4 4 0 1 3 0 3 5 1 2 1 2 3 8 Sample Output 1 : 0 0 1 3 2 4 3 5 @csalgo"},{"id":"901d84cd-b0df-4df8-8ba4-799bfa145ee7","title":"@csalgo Coding Problem Problem","fileName":"3.Kruskals Algorithm.txt","filetype":"text","fileSize":1060,"url":"http://older (11)/24.Lecture 20  Graphs 2_/3.Kruskals Algorithm.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Kruskals Algorithm Problem Level: HARD Problem Description: Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V 1) and E number of edges. Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm. For printing MST follow the steps  1. In one line, print an edge which is part of MST in the format  v1 v2 w where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  = v2 i.e. print the smaller vertex first while printing an edge. 2. Print V 1 edges in above format in different lines. Note : Order of different edges doesn't matter. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space) Output Format : MST Constraints : 2  = V, E  = 10^5 Sample Input 1 : 4 4 0 1 3 0 3 5 1 2 1 2 3 8 Sample Output 1 : 1 2 1 0 1 3 0 3 5 @csalgo"},{"id":"1c35f7a3-2bf8-46f1-80db-67ffccd9a001","title":"@csalgo Coding Problem Problem","fileName":"7.Prim's Algorithm.txt","filetype":"text","fileSize":1055,"url":"http://older (11)/24.Lecture 20  Graphs 2_/7.Prim's Algorithm.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Prim's Algorithm Problem Level: HARD Problem Description: Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V 1) and E number of edges. Find and print the Minimum Spanning Tree (MST) using Prim's algorithm. For printing MST follow the steps  1. In one line, print an edge which is part of MST in the format  v1 v2 w where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  = v2 i.e. print the smaller vertex first while printing an edge. 2. Print V 1 edges in above format in different lines. Note : Order of different edges doesn't matter. Input Format : Line 1: Two Integers V and E (separated by space) Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space) Output Format : MST Constraints : 2  = V, E  = 10^5 Sample Input 1 : 4 4 0 1 3 0 3 5 1 2 1 2 3 8 Sample Output 1 : 0 1 3 1 2 1 0 3 5 @csalgo"},{"id":"72bdf578-a70a-4464-8743-641442d3ba5f","title":"@csalgo Chapter Assignment Pro","fileName":"1.Count Zeros.txt","filetype":"text","fileSize":441,"url":"http://older (11)/3.Assignment Recursion 1a/1.Count Zeros.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Count Zeros Problem Level: EASY Problem Description: Given an integer N, count and return the number of zeros that are present in the given integer using recursion. Input Format : Integer N Output Format : Number of zeros in N Constraints : 0  = N  = 10^9 Sample Input 1 : 10204 Sample Output 1 : 2 Sample Input 2 : 708000 Sample Output 2 : 4 =====Answer===== Correct Option: @csalgo"},{"id":"ee91aa21-651b-44f2-bdf9-f0716fca5d94","title":"@csalgo Chapter Assignment Pro","fileName":"3.Check Palindrome (recursive).txt","filetype":"text","fileSize":479,"url":"http://older (11)/3.Assignment Recursion 1a/3.Check Palindrome (recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Check Palindrome (recursive) Problem Level: MEDIUM Problem Description: Check whether a given String S is a palindrome using recursion. Return true or false. Input Format : String S Output Format : 'true' or 'false' Constraints : 0  = |S|  = 1000 where |S| represents length of string S. Sample Input 1 : racecar Sample Output 1: true Sample Input 2 : ninja Sample Output 2: false =====Answer===== Correct Option: @csalgo"},{"id":"b50a1eea-1f22-4c09-8ca1-ae18f95fcbdf","title":"@csalgo Chapter Assignment Pro","fileName":"0.Multiplication (Recursive).txt","filetype":"text","fileSize":551,"url":"http://older (11)/3.Assignment Recursion 1a/0.Multiplication (Recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Multiplication (Recursive) Problem Level: EASY Problem Description: Given two integers M & N, calculate and return their multiplication using recursion. You can only use subtraction and addition for your calculation. No other operators are allowed. Input format : Line 1 : Integer M Line 2 : Integer N Output format : M x N Constraints : 0  = M  = 1000 0  = N  = 1000 Sample Input 1 : 3 5 Sample Output 1 : 15 Sample Input 2 : 4 0 Sample Output 2 : 0 =====Answer===== Correct Option: @csalgo"},{"id":"9d9a300a-327c-4229-b783-d36dd9ef3876","title":"@csalgo Chapter Assignment Pro","fileName":"2.Geometric Sum.txt","filetype":"text","fileSize":418,"url":"http://older (11)/3.Assignment Recursion 1a/2.Geometric Sum.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Geometric Sum Problem Level: MEDIUM Problem Description: Given k, find the geometric sum i.e. 1 + 1 2 + 1 4 + 1 8 + ... + 1 (2^k) using recursion. Input format : Integer k Output format : Geometric sum Constraints : 0  = k  = 1000 Sample Input 1 : 3 Sample Output 1 : 1.875 Sample Input 2 : 4 Sample Output 2 : 1.93750 =====Answer===== Correct Option: @csalgo"},{"id":"f89c75a5-1067-4cee-98e2-9fda46a1b12a","title":"@csalgo Coding Problem Problem","fileName":"12.First Index.txt","filetype":"text","fileSize":666,"url":"http://older (11)/3.Lecture 3 Recursion 1/12.First Index.txt","fileDetails":"@csalgo Coding Problem Problem Statement: First Index Problem Level: EASY Problem Description: Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return  1 if it is not present in the array. First index means, the index of first occurrence of x in the input array. Do this recursively. Indexing in the array starts from 0. Input Format : Line 1 : An Integer N i.e. size of array Line 2 : N integers which are elements of the array, separated by spaces Line 3 : Integer x Output Format : first index or  1 Constraints : 1  = N  = 10^3 Sample Input : 4 9 8 10 8 8 Sample Output : 1 @csalgo"},{"id":"4e47ac46-bfb4-4281-8f34-9ca885132483","title":"@csalgo Coding Problem Problem","fileName":"10.Check number recursively.txt","filetype":"text","fileSize":579,"url":"http://older (11)/3.Lecture 3 Recursion 1/10.Check number recursively.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Check number recursively Problem Level: EASY Problem Description: Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false. Do this recursively. Input Format : Line 1 : An Integer N i.e. size of array Line 2 : N integers which are elements of the array, separated by spaces Line 3 : Integer x Output Format : 'true' or 'false' Constraints : 1  = N  = 10^3 Sample Input 1 : 3 9 8 10 8 Sample Output 1 : true Sample Input 2 : 3 9 8 10 2 Sample Output 2 : false @csalgo"},{"id":"deda87ad-914e-44a2-b99b-cf2b17f60b64","title":"@csalgo Coding Problem Problem","fileName":"17.All indexes of x.txt","filetype":"text","fileSize":652,"url":"http://older (11)/3.Lecture 3 Recursion 1/17.All indexes of x.txt","fileDetails":"@csalgo Coding Problem Problem Statement: All indexes of x Problem Level: MEDIUM Problem Description: Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order). Do this recursively. Indexing in the array starts from 0. Input Format : Line 1 : An Integer N i.e. size of array Line 2 : N integers which are elements of the array, separated by spaces Line 3 : Integer x Output Format : indexes where x is present in the array (separated by space) Constraints : 1  = N  = 10^3 Sample Input : 5 9 8 10 8 8 8 Sample Output : 1 3 4 @csalgo"},{"id":"20138d53-389a-41d9-afbd-290ab05c69cf","title":"@csalgo Chapter Assignment Pro","fileName":"4.Sum of digits (recursive).txt","filetype":"text","fileSize":419,"url":"http://older (11)/3.Assignment Recursion 1a/4.Sum of digits (recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Sum of digits (recursive) Problem Level: EASY Problem Description: Write a recursive function that returns the sum of the digits of a given integer. Input format : Integer N Output format : Sum of digits of N Constraints : 0  = N  = 10^9 Sample Input 1 : 12345 Sample Output 1 : 15 Sample Input 2 : 9 Sample Output 2 : 9 =====Answer===== Correct Option: @csalgo"},{"id":"3671c76b-acc1-47f7-933b-fa8a85fc3fd3","title":"@csalgo Coding Problem Problem","fileName":"2.x to the power n.txt","filetype":"text","fileSize":481,"url":"http://older (11)/3.Lecture 3 Recursion 1/2.x to the power n.txt","fileDetails":"@csalgo Coding Problem Problem Statement: x to the power n Problem Level: EASY Problem Description: Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to return the answer. Do this recursively. Input format : Two integers x and n (separated by space) Output Format : x^n (i.e. x raise to the power n) Constraints : 1  = x  = 30 0  = n  = 30 Sample Input 1 :  3 4 Sample Output 1 : 81 Sample Input 2 :  2 5 Sample Output 2 : 32 @csalgo"},{"id":"165484c2-f627-4750-8619-05aff7748a6e","title":"@csalgo Coding Problem Problem","fileName":"14.Last index of x.txt","filetype":"text","fileSize":778,"url":"http://older (11)/3.Lecture 3 Recursion 1/14.Last index of x.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Last index of x Problem Level: MEDIUM Problem Description: Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return  1 if it is not present in the array. Last index means   if x is present multiple times in the array, return the index at which x comes last in the array. You should start traversing your array from 0, not from (N   1). Do this recursively. Indexing in the array starts from 0. Input Format : Line 1 : An Integer N i.e. size of array Line 2 : N integers which are elements of the array, separated by spaces Line 3 : Integer x Output Format : last index or  1 Constraints : 1  = N  = 10^3 Sample Input : 4 9 8 10 8 8 Sample Output : 3 @csalgo"},{"id":"b1343dc2-b572-4d77-90dc-f8b474c2950a","title":"@csalgo Coding Problem Problem","fileName":"3.Print numbers.txt","filetype":"text","fileSize":485,"url":"http://older (11)/3.Lecture 3 Recursion 1/3.Print numbers.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Print numbers Problem Level: EASY Problem Description: Given is the code to print numbers from 1 to n in increasing order recursively. But it contains few bugs that you need to rectify such that all the test cases pass. Input Format : Integer n Output Format : Numbers from 1 to n (separated by space) Constraints : 1  = n  = 10000 Sample Input 1 :  6 Sample Output 1 : 1 2 3 4 5 6 Sample Input 2 :  4 Sample Output 2 : 1 2 3 4 @csalgo"},{"id":"c075173a-05bc-4fd1-a9ec-dbc4c3db6693","title":"@csalgo Coding Problem Problem","fileName":"4.Number of digits.txt","filetype":"text","fileSize":468,"url":"http://older (11)/3.Lecture 3 Recursion 1/4.Number of digits.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Number of digits Problem Level: EASY Problem Description: Given the code to find out and return the number of digits present in a number recursively. But it contains few bugs, that you need to rectify such that all the test cases should pass. Input Format : Integer n Output Format : Count of digits Constraints : 1  = n  = 10^6 Sample Input 1 :  156 Sample Output 1 : 3 Sample Input 2 :  7 Sample Output 2 : 1 @csalgo"},{"id":"e39277d9-1ef3-4124-ae50-21d3b7444629","title":"@csalgo Coding Problem Problem","fileName":"9.Sum of array (recursive).txt","filetype":"text","fileSize":507,"url":"http://older (11)/3.Lecture 3 Recursion 1/9.Sum of array (recursive).txt","fileDetails":"@csalgo Coding Problem Problem Statement: Sum of array (recursive) Problem Level: EASY Problem Description: Given an array of length N, you need to find and return the sum of all elements of the array. Do this recursively. Input Format : Line 1 : An Integer N i.e. size of array Line 2 : N integers which are elements of the array, separated by spaces Output Format : Sum Constraints : 1  = N  = 10^3 Sample Input 1 : 3 9 8 9 Sample Output 1 : 26 Sample Input 2 : 3 4 2 1 Sample Output 2 : 7 @csalgo"},{"id":"d774d00b-3774-4898-9132-d3c477f8e6e4","title":"@csalgo Assignment Problem Pro","fileName":"7.What is the output.txt","filetype":"text","fileSize":491,"url":"http://older (11)/3.Lecture 3 Recursion 1/7.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: What will be the output of the following code ? #include  iostream using namespace std; void print(int n){  if(n   0){  return;  }  if(n == 0){  cout   n   “ “;  return;  }  print(n  );  cout   n   “ “; } int main() {  int num = 3;  print(num); } Options: 0. Runtime Error 1. 3 2 1 2. 3 3 3 3. 0 1 2 3 =====Answer===== Correct Option: 0 @csalgo"},{"id":"34f97eb5-107d-493b-94f7-805a72528881","title":"@csalgo Chapter Assignment Pro","fileName":"1.Remove X.txt","filetype":"text","fileSize":493,"url":"http://older (11)/4.Assignment Recursion 1b/1.Remove X.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Remove X Problem Level: MEDIUM Problem Description: Given a string, compute recursively a new string where all 'x' chars have been removed. Input format : String S Output format : Modified String Constraints : 1  = |S|  = 10^3 where |S| represents the length of string S. Sample Input 1 : xaxb Sample Output 1: ab Sample Input 2 : abc Sample Output 2: abc Sample Input 3 : xx Sample Output 3: =====Answer===== Correct Option: @csalgo"},{"id":"d658a693-08dd-477c-8d3f-5eab3cb9f718","title":"@csalgo Chapter Assignment Pro","fileName":"0.Replace pi (recursive).txt","filetype":"text","fileSize":408,"url":"http://older (11)/4.Assignment Recursion 1b/0.Replace pi (recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Replace pi (recursive) Problem Level: MEDIUM Problem Description: Given a string, compute recursively a new string where all appearances of \"pi\" have been replaced by \"3.14\". Sample Input 1 : xpix Sample Output : x3.14x Sample Input 2 : pipi Sample Output : 3.143.14 Sample Input 3 : pip Sample Output : 3.14p =====Answer===== Correct Option: @csalgo"},{"id":"a1c4dfa2-582e-4475-b188-3988eea929a0","title":"@csalgo Chapter Assignment Pro","fileName":"2.String to Integer.txt","filetype":"text","fileSize":661,"url":"http://older (11)/4.Assignment Recursion 1b/2.String to Integer.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: String to Integer Problem Level: MEDIUM Problem Description: Write a recursive function to convert a given string into the number it represents. That is input will be a numeric string that contains only numbers, you need to convert the string into corresponding integer and return the answer. Input format : Numeric string S (string, Eg. \"1234\") Output format : Corresponding integer N (int, Eg. 1234) Constraints : 0  = |S|  = 9 where |S| represents length of string S. Sample Input 1 : 1231 Sample Output 1 : 1231 Sample Input 2 : 12567 Sample Output 2 : 12567 =====Answer===== Correct Option: @csalgo"},{"id":"620defb6-f4d9-4875-a02e-c83e37ede793","title":"@csalgo Chapter Assignment Pro","fileName":"4.Tower of Hanoi.txt","filetype":"text","fileSize":952,"url":"http://older (11)/4.Assignment Recursion 1b/4.Tower of Hanoi.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Tower of Hanoi Problem Level: EASY Problem Description: Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are : 1) Only one disk can be moved at a time. 2) A disk can be moved only if it is on the top of a rod. 3) No disk can be placed on the top of a smaller disk. Print the steps required to move n disks from source rod to destination rod. Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'. Input Format : Integer n Output Format : Steps in different lines (in one line print source and destination rod name separated by space) Constraints : 0  = n  = 20 Sample Input 1 : 2 Sample Output 1 : a b a c b c Sample Input 2 : 3 Sample Output 2 : a c a b c b a c b a b c a c =====Answer===== Correct Option: @csalgo"},{"id":"cce2e17b-7f80-42e4-be4a-024d4aa1fa01","title":"@csalgo Chapter Assignment Pro","fileName":"3.Pair star.txt","filetype":"text","fileSize":528,"url":"http://older (11)/4.Assignment Recursion 1b/3.Pair star.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pair star Problem Level: MEDIUM Problem Description: Given a string S, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a \"*\". Input format : String S Output format : Modified string Constraints : 0  = |S|  = 1000 where |S| represents length of string S. Sample Input 1 : hello Sample Output 1: hel*lo Sample Input 2 : aaaa Sample Output 2 : a*a*a*a =====Answer===== Correct Option: @csalgo"},{"id":"8b01aede-9752-405b-946b-ca4f27b34643","title":"@csalgo Chapter Assignment Pro","fileName":"0.d Check AB.txt","filetype":"text","fileSize":748,"url":"http://older (11)/5.Assignment Recursion 2/0.d Check AB.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Check AB Problem Level: MEDIUM Problem Description: Suppose you have a string, S, made up of only 'a's and 'b's. Write a recursive function that checks if the string was generated using the following rules: a. The string begins with an 'a' b. Each 'a' is followed by nothing or an 'a' or \"bb\" c. Each \"bb\" is followed by nothing or an 'a' If all the rules are followed by the given string, return true otherwise return false. Input format : String S Output format : 'true' or 'false' Constraints : 0  = |S|  = 1000 where |S| represents length of string S. Sample Input 1 : abb Sample Output 1 : true Sample Input 2 : abababa Sample Output 2 : false =====Answer===== Correct Option: @csalgo"},{"id":"cc124691-2a6c-4320-9a0c-17c8b3009980","title":"@csalgo Chapter Assignment Pro","fileName":"1.d Staircase.txt","filetype":"text","fileSize":544,"url":"http://older (11)/5.Assignment Recursion 2/1.d Staircase.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Staircase Problem Level: EASY Problem Description: A child is running up a staircase with N steps, and can hop either 1 step, 2 steps or 3 steps at a time. Implement a method to count how many possible ways the child can run up to the stairs. You need to return number of possible ways W. Input format : Integer N Output Format : Integer W Constraints : 1  = N  = 30 Sample Input 1 : 4 Sample Output 1 : 7 Sample Input 2 : 5 Sample Output 2 : 13 =====Answer===== Correct Option: @csalgo"},{"id":"de7a757e-7c99-4c0c-ad8f-b095d7759e3f","title":"@csalgo Chapter Assignment Pro","fileName":"10. Print Permutations.txt","filetype":"text","fileSize":751,"url":"http://older (11)/5.Assignment Recursion 2/10. Print Permutations.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print Permutations Problem Level: MEDIUM Problem Description: Given an input string (STR), find and return all possible permutations of the input string. Note: The input string may contain the same characters, so there will also be the same permutations. The order of permutations doesn’t matter. Input Format: The only input line contains a string (STR) of alphabets in lower case Output Format: Print each permutations in a new line Note: You do not need to print anything, it has already been taken care of. Just implement the function. Constraint: 1 =length of STR =8 Time Limit: 1sec Sample Input 1: cba Sample Output 1: abc acb bac bca cab cba =====Answer===== Correct Option: @csalgo"},{"id":"4e2081fd-680f-4b1b-9811-31b78138b9e0","title":"@csalgo Chapter Assignment Pro","fileName":"2.d Binary Search (Recursive).txt","filetype":"text","fileSize":575,"url":"http://older (11)/5.Assignment Recursion 2/2.d Binary Search (Recursive).txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Binary Search (Recursive) Problem Level: EASY Problem Description: Given an integer sorted array (sorted in increasing order) and an element x, find the x in given array using binary search. Return the index of x. Return  1 if x is not present in the given array. Note : If given array size is even, take first mid. Input format : Line 1 : Array size Line 2 : Array elements (separated by space) Line 3 : x (element to be searched) Sample Input : 6 2 3 4 5 6 8 5 Sample Output: 3 =====Answer===== Correct Option: @csalgo"},{"id":"77f96245-14ea-4622-8057-d0b1c3b9d2fe","title":"@csalgo Chapter Assignment Pro","fileName":"3.Return subset of an array.txt","filetype":"text","fileSize":686,"url":"http://older (11)/5.Assignment Recursion 2/3.Return subset of an array.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Return subset of an array Problem Level: HARD Problem Description: Given an integer array (of length n), find and return all the subsets of input array. Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array. Note : The order of subsets are not important. Input format : Line 1 : Size of array Line 2 : Array elements (separated by space) Sample Input: 3 15 20 12 Sample Output: [] (this just represents an empty array, don't worry about the square brackets) 12 20 20 12 15 15 12 15 20 15 20 12 =====Answer===== Correct Option: @csalgo"},{"id":"ef1e458b-ad56-4aee-bda9-0de4f9a0d739","title":"@csalgo Chapter Assignment Pro","fileName":"4.Print Subsets of Array.txt","filetype":"text","fileSize":764,"url":"http://older (11)/5.Assignment Recursion 2/4.Print Subsets of Array.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print Subsets of Array Problem Level: HARD Problem Description: Given an integer array (of length n), find and print all the subsets of input array. Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array. Note : The order of subsets are not important. Just print the subsets in different lines. Input format : Line 1 : Integer n, Size of array Line 2 : Array elements (separated by space) Constraints : 1  = n  = 15 Sample Input: 3 15 20 12 Sample Output: [] (this just represents an empty array, don't worry about the square brackets) 12 20 20 12 15 15 12 15 20 15 20 12 =====Answer===== Correct Option: @csalgo"},{"id":"0b520b9e-19e8-450a-9cad-c3a92cb53463","title":"@csalgo Chapter Assignment Pro","fileName":"5.Return subsets sum to K.txt","filetype":"text","fileSize":643,"url":"http://older (11)/5.Assignment Recursion 2/5.Return subsets sum to K.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Return subsets sum to K Problem Level: HARD Problem Description: Given an array A of size n and an integer K, return all subsets of A which sum to K. Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array. Note : The order of subsets are not important. Input format : Line 1 : Integer n, Size of input array Line 2 : Array elements separated by space Line 3 : K Constraints : 1  = n  = 20 Sample Input : 9 5 12 3 17 1 18 15 3 17 6 Sample Output : 3 3 5 1 =====Answer===== Correct Option: @csalgo"},{"id":"9afb9dbb-7160-4882-a496-f3f97825bc00","title":"@csalgo Chapter Assignment Pro","fileName":"6.Print Subset Sum to K.txt","filetype":"text","fileSize":625,"url":"http://older (11)/5.Assignment Recursion 2/6.Print Subset Sum to K.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print Subset Sum to K Problem Level: HARD Problem Description: Given an array A and an integer K, print all subsets of A which sum to K. Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array. Note : The order of subsets are not important. Just print them in different lines. Input format : Line 1 : Size of input array Line 2 : Array elements separated by space Line 3 : K Sample Input: 9 5 12 3 17 1 18 15 3 17 6 Sample Output: 3 3 5 1 =====Answer===== Correct Option: @csalgo"},{"id":"e5a444dd-4e3c-45bd-99d1-969c0b8809b6","title":"@csalgo Chapter Assignment Pro","fileName":"7.Return all codes - String.txt","filetype":"text","fileSize":571,"url":"http://older (11)/5.Assignment Recursion 2/7.Return all codes - String.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Return all codes   String Problem Level: HARD Problem Description: Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to return the list of all possible codes that can be generated from the given string. Note : The order of codes are not important. And input string does not contain 0s. Input format : A numeric string Constraints : 1  = Length of String S  = 10 Sample Input: 1123 Sample Output: aabc kbc alc aaw kw =====Answer===== Correct Option: @csalgo"},{"id":"b3214174-5cb5-4d51-bf55-368142353dc2","title":"@csalgo Chapter Assignment Pro","fileName":"9.Return Permutations - String.txt","filetype":"text","fileSize":537,"url":"http://older (11)/5.Assignment Recursion 2/9.Return Permutations - String.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Return Permutations   String Problem Level: HARD Problem Description: Given a string S, find and return all the possible permutations of the input string. Note 1 : The order of permutations is not important. Note 2 : If original string contains duplicate characters, permutations will also be duplicates. Input Format : String S Output Format : All permutations (in different lines) Sample Input : abc Sample Output : abc acb bac bca cab cba =====Answer===== Correct Option: @csalgo"},{"id":"b78757a6-fa74-44d8-ba57-ac3b043a8340","title":"@csalgo Chapter Assignment Pro","fileName":"8.Print all Codes - String.txt","filetype":"text","fileSize":624,"url":"http://older (11)/5.Assignment Recursion 2/8.Print all Codes - String.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Print all Codes   String Problem Level: HARD Problem Description: Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to print the list of all possible codes that can be generated from the given string. Note : The order of codes are not important. Just print them in different lines. Input format : A numeric string S Output Format : All possible codes in different lines Constraints : 1  = Length of String S  = 10 Sample Input: 1123 Sample Output: aabc kbc alc aaw kw =====Answer===== Correct Option: @csalgo"},{"id":"e196e74b-7f96-4ab7-87f3-fd9007a3c5b8","title":"@csalgo Coding Problem Problem","fileName":"1.Replace character recursively.txt","filetype":"text","fileSize":506,"url":"http://older (11)/5.Lecture 4 Recursion 2/1.Replace character recursively.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Replace character recursively Problem Level: EASY Problem Description: Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string. Do this recursively. Input Format : Line 1 : Input String S Line 2 : Character c1 and c2 (separated by space) Output Format : Updated string Constraints : 1  = Length of String S  = 10^6 Sample Input : abacd a x Sample Output : xbxcd @csalgo"},{"id":"77a64a74-5c07-4a52-bdf2-c4c7ac2eded3","title":"@csalgo Coding Problem Problem","fileName":"11.Return Keypad - String.txt","filetype":"text","fileSize":650,"url":"http://older (11)/5.Lecture 4 Recursion 2/11.Return Keypad - String.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Return Keypad   String Problem Level: Problem Description: Given an integer n, using phone keypad find out all the possible strings that can be made using digits of input n. Return empty string for numbers 0 and 1. Note : 1. The order of strings are not important. 2. Input and output has already been managed for you. You just have to populate the output array and return the count of elements populated in the output array. Input Format : Integer n Output Format : All possible strings in different lines Constraints : 1  = n  = 10^6 Sample Input: 23 Sample Output: ad ae af bd be bf cd ce cf @csalgo"},{"id":"edfa4a4d-f974-4fd4-a3e3-e91e5e80aa50","title":"@csalgo Coding Problem Problem","fileName":"14.Print Keypad - String.txt","filetype":"text","fileSize":502,"url":"http://older (11)/5.Lecture 4 Recursion 2/14.Print Keypad - String.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Print Keypad   String Problem Level: HARD Problem Description: Given an integer n, using phone keypad find out and print all the possible strings that can be made using digits of input n. Note : The order of strings are not important. Just print different strings in new lines. Input Format : Integer n Output Format : All possible strings in different lines Constraints : 1  = n  = 10^6 Sample Input: 23 Sample Output: ad ae af bd be bf cd ce cf @csalgo"},{"id":"9913b658-7223-4b88-adbe-8340cfeb6410","title":"@csalgo Coding Problem Problem","fileName":"7.Quick Sort.txt","filetype":"text","fileSize":539,"url":"http://older (11)/5.Lecture 4 Recursion 2/7.Quick Sort.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Quick Sort Problem Level: MEDIUM Problem Description: Sort an array A using Quick Sort. Change in the input array itself. So no need to return or print anything. br Input format : Line 1 : Integer n i.e. Array size Line 2 : Array elements (separated by space) Output format : Array elements in increasing order (separated by space) Constraints : 1  = n  = 10^3 Sample Input 1 : 6 2 6 8 5 4 3 Sample Output 1 : 2 3 4 5 6 8 Sample Input 2 : 5 1 5 2 7 3 Sample Output 2 : 1 2 3 5 7 @csalgo"},{"id":"de702b7a-dbef-4d9a-a163-2cdf5bd09338","title":"@csalgo Coding Problem Problem","fileName":"2.Remove Duplicates .txt","filetype":"text","fileSize":416,"url":"http://older (11)/5.Lecture 4 Recursion 2/2.Remove Duplicates .txt","fileDetails":"@csalgo Coding Problem Problem Statement: Remove Duplicates Problem Level: EASY Problem Description: Given a string S, remove consecutive duplicates from it recursively. Input Format : String S Output Format : Output string Constraints : 1  = |S|  = 10^3 where |S| represents the length of string Sample Input 1 : aabccba Sample Output 1 : abcba Sample Input 2 : xxxyyyzwwzzz Sample Output 2 : xyzwz @csalgo"},{"id":"6ee6e607-f78b-4b27-91b7-97d6a1c998a6","title":"@csalgo Coding Problem Problem","fileName":"4.Merge Sort.txt","filetype":"text","fileSize":534,"url":"http://older (11)/5.Lecture 4 Recursion 2/4.Merge Sort.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Merge Sort Problem Level: MEDIUM Problem Description: Sort an array A using Merge Sort. Change in the input array itself. So no need to return or print anything. Input format : Line 1 : Integer n i.e. Array size Line 2 : Array elements (separated by space) Output format : Array elements in increasing order (separated by space) Constraints : 1  = n  = 10^3 Sample Input 1 : 6 2 6 8 5 4 3 Sample Output 1 : 2 3 4 5 6 8 Sample Input 2 : 5 2 1 5 2 3 Sample Output 2 : 1 2 2 3 5 @csalgo"},{"id":"003ea767-48b9-4269-a78d-e02ba91f54e0","title":"@csalgo Chapter Assignment Pro","fileName":"1.Duplicate in array.txt","filetype":"text","fileSize":1265,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/1.Duplicate in array.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Duplicate in array Problem Level: EASY Problem Description: You have been given an integer array list(ARR) of size N which contains numbers from 0 to (N   2). Each number is present at least once. That is, if N = 5, the array list constitutes values ranging from 0 to 3, and among these, there is a single integer value that is present twice. You need to find and return that duplicate number present in the array. Note : Duplicate number is always present in the given array list. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the array list. Second line contains 'N' single space separated integers representing the elements in the array list. Output Format : For each test case, print the duplicate element in the array list. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^6 Time Limit: 1 sec Sample Input 1: 1 9 0 7 2 5 4 7 1 3 6 Sample Output 1: 7 Sample Input 2: 2 5 0 2 1 3 1 7 0 3 1 5 4 3 2 Sample Output 2: 1 3 =====Answer===== Correct Option: @csalgo"},{"id":"5b9103b8-cf80-4eed-afeb-c06bbedd5496","title":"@csalgo Chapter Assignment Pro","fileName":"0.Find the Unique Element.txt","filetype":"text","fileSize":1203,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/0.Find the Unique Element.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Find the Unique Element Problem Level: MEDIUM Problem Description: You have been given an integer array list(ARR) of size N. Where N is equal to [2M + 1]. Now, in the given array list, 'M' numbers are present twice and one number is present only once. You need to find and return that number which is unique in the array list. Note: Unique element is always present in the array list according to the given condition. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the array list. Second line contains 'N' single space separated integers representing the elements in the array list. Output Format : For each test case, print the unique element present in the array. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^6 Time Limit: 1 sec Sample Input 1: 1 7 2 3 1 6 3 6 2 Sample Output 1: 1 Sample Input 2: 2 5 2 4 7 2 7 9 1 3 1 3 6 6 7 10 7 Sample Output 2: 4 10 =====Answer===== Correct Option: @csalgo"},{"id":"2ea9cce6-7920-410f-b343-6694a22fecf9","title":"@csalgo Chapter Assignment Pro","fileName":"2.Array Intersection.txt","filetype":"text","fileSize":1928,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/2.Array Intersection.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Array Intersection Problem Level: MEDIUM Problem Description: You have been given two integer arrays list(ARR1 and ARR2) of size N and M, respectively. You need to print their intersection; An intersection for this problem can be defined when both the arrays lists contain a particular value or to put it in other words, when there is a common value that exists in both the arrays lists. Note : Input arrays lists can contain duplicate elements. The intersection elements printed would be in the order they appear in the first sorted array list(ARR1). br Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. The first line of each test case or query contains an integer 'N' representing the size of the first array list. The second line contains 'N' single space separated integers representing the elements of the first the array list. The third line contains an integer 'M' representing the size of the second array list. The fourth line contains 'M' single space separated integers representing the elements of the second array list. Output format : For each test case, print the intersection elements in a row, separated by a single space. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^6 0  = M  = 10^6 Time Limit: 1 sec Sample Input 1 : 2 6 2 6 8 5 4 3 4 2 3 4 7 2 10 10 1 10 Sample Output 1 : 2 3 4 10 Sample Input 2 : 1 4 2 6 1 2 5 1 2 3 4 2 Sample Output 2 : 1 2 2 Explanation for Sample Output 2 : Since, both input arrays have two '2's, the intersection of the arrays also have two '2's. The first '2' of first array matches with the first '2' of the second array. Similarly, the second '2' of the first array matches with the second '2' if the second array. =====Answer===== Correct Option: @csalgo"},{"id":"5ea4cb14-9335-48de-a43c-95a5ee5fbb66","title":"@csalgo Chapter Assignment Pro","fileName":"4.Triplet sum.txt","filetype":"text","fileSize":1388,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/4.Triplet sum.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Triplet sum Problem Level: MEDIUM Problem Description: You have been given a random integer array list(ARR) and a number X. Find and return the triplet(s) in the array list which sum to X. Note : Given array list can contain duplicate elements. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the first array list. Second line contains 'N' single space separated integers representing the elements in the array list. Third line contains an integer 'X'. Output format : For each test case, print the total number of triplets present in the array list. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^3 0  = X  = 10^9 Time Limit: 1 sec Sample Input 1: 1 7 1 2 3 4 5 6 7 12 Sample Output 1: 5 Sample Input 2: 2 7 1 2 3 4 5 6 7 19 9 2  5 8  6 0 5 10 11  3 10 Sample Output 2: 0 5 br Explanation for Input 2: Since there doesn't exist any triplet with sum equal to 19 for the first query, we print 0. For the second query, we have 5 triplets in total that sum up to 10. They are, (2, 8, 0), (2, 11,  3), ( 5, 5, 10), (8, 5,  3) and ( 6, 5, 11) =====Answer===== Correct Option: @csalgo"},{"id":"40ad7c56-9fca-4444-8fd2-8304c2876901","title":"@csalgo Chapter Assignment Pro","fileName":"3.Pair sum in array.txt","filetype":"text","fileSize":1352,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/3.Pair sum in array.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Pair sum in array Problem Level: MEDIUM Problem Description: You have been given an integer array list(ARR) and a number 'num'. Find and return the total number of pairs in the array list which sum to 'num'. Note: Given array list can contain duplicate elements. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the first array list. Second line contains 'N' single space separated integers representing the elements in the array list. Third line contains an integer 'num'. Output format : For each test case, print the total number of pairs present in the array list. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^4 0  = num  = 10^9 Time Limit: 1 sec Sample Input 1: 1 9 1 3 6 2 5 4 3 2 4 7 Sample Output 1: 7 Sample Input 2: 2 9 1 3 6 2 5 4 3 2 4 12 6 2 8 10 5  2 5 10 Sample Output 2: 0 2 br Explanation for Input 2: Since there doesn't exist any pair with sum equal to 12 for the first query, we print 0. For the second query, we have 2 pairs in total that sum up to 10. They are, (2, 8) and (5, 5). =====Answer===== Correct Option: @csalgo"},{"id":"afe114f7-1e16-4c59-b802-824f384f294d","title":"@csalgo Chapter Assignment Pro","fileName":"5.Rotate array.txt","filetype":"text","fileSize":1222,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/5.Rotate array.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Rotate array Problem Level: EASY Problem Description: You have been given a random integer array list(ARR) of size N. Write a function that rotates the given array list by D elements(towards the left). Note: Change in the input array list itself. You don't need to return or print the elements. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the array list. Second line contains 'N' single space separated integers representing the elements in the array list. Third line contains the value of 'D' by which the array list needs to be rotated. Output Format : For each test case, print the rotated array list in a row separated by a single space. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^4 0  = N  = 10^6 0  = D  = N Time Limit: 1 sec Sample Input 1: 1 7 1 2 3 4 5 6 7 2 Sample Output 1: 3 4 5 6 7 1 2 Sample Input 2: 2 7 1 2 3 4 5 6 7 0 4 1 2 3 4 2 Sample Output 2: 1 2 3 4 5 6 7 3 4 1 2 =====Answer===== Correct Option: @csalgo"},{"id":"9d60946e-989b-4349-b326-0e070efcd0e6","title":"@csalgo Assignment Problem Pro","fileName":"10.Fibonacci.txt","filetype":"text","fileSize":355,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/10.Fibonacci.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fibonacci Problem Description: What is the time complexity of following code for calculating nth fibonacci number long fib(int n){  if(n == 0 || n == 1){  return n;  }  return fib(n   1) + fib(n   2); } Options: 0. O(n) 1. O(n^2) 2. O(2^n) 3. O(n^3) =====Answer===== Correct Option: 2 @csalgo"},{"id":"c88f49ab-1e8b-42bf-8238-380c45104418","title":"@csalgo Chapter Assignment Pro","fileName":"6.Check Array Rotation.txt","filetype":"text","fileSize":1167,"url":"http://older (11)/6.Assignment  Arrays (Optimised)/6.Check Array Rotation.txt","fileDetails":"@csalgo Chapter Assignment Problem Statement: Check Array Rotation Problem Level: EASY Problem Description: You have been given an integer array list(ARR) of size N. It has been sorted(in increasing order) and then rotated by some number 'K' in the clockwise direction. Your task is to write a function that returns the value of 'K', that means, the index from which the array list has been rotated. Input format : The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow. First line of each test case or query contains an integer 'N' representing the size of the array list. Second line contains 'N' single space separated integers representing the elements in the array list. Output Format : For each test case, print the value of 'K' or the index from which which the array list has been rotated. Output for every test case will be printed in a separate line. Constraints : 1  = t  = 10^2 0  = N  = 10^5 Time Limit: 1 sec Sample Input 1: 1 6 5 6 1 2 3 4 Sample Output 1: 2 Sample Input 2: 2 5 3 6 8 9 10 4 10 20 30 1 Sample Output 2: 0 3 =====Answer===== Correct Option: @csalgo"},{"id":"7647b462-4047-4ce0-884c-5c1d8d32cca5","title":"@csalgo Assignment Problem Pro","fileName":"10.What is time complexity.txt","filetype":"text","fileSize":422,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/10.What is time complexity.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is time complexity Problem Description: What is the time complexity of following code ? int sumOfDigits(int n){  int sum;  if(n   10){  return n;  }  sum = (n % 10) + sumOfDigits(n   10);  return sum; } Options: 0. O(logn)   log is to the base 10 1. O(n) 2. O(n^2) 3. None of these =====Answer===== Correct Option: 0 @csalgo"},{"id":"311e3ecf-0f39-4101-9cc7-f4dd4677c8f8","title":"@csalgo Assignment Problem Pro","fileName":"13.Merge Sort space.txt","filetype":"text","fileSize":218,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/13.Merge Sort space.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Merge Sort space Problem Description: The space complexity for merge sort is : Options: 0. O(n) 1. O(n^2) 2. O(nlogn) 3. O(log n) =====Answer===== Correct Option: 0 @csalgo"},{"id":"1cc3f760-e806-4af7-9ecd-0dded04da43e","title":"@csalgo Assignment Problem Pro","fileName":"13.Fibonacci.txt","filetype":"text","fileSize":255,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/13.Fibonacci.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Fibonacci Problem Description: The space complexity for finding nth fibonacci number using recursion is : Options: 0. O(n) 1. O(2^n) 2. O(log n) 3. O(n^2) 4. O(nlogn) =====Answer===== Correct Option: 0 @csalgo"},{"id":"b17a11d6-da6b-4e38-92ea-234cb6df04c7","title":"@csalgo Assignment Problem Pro","fileName":"2.Linear Search Worst Case.txt","filetype":"text","fileSize":374,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/2.Linear Search Worst Case.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Linear Search Worst Case Problem Description: The Worst case(s) occur in linear search algorithm when  Options: 0. Item is somewhere in the middle of the array 1. Item is the last element in the array 2. Item is present at first index of the array. 3. Item is not in the array at all =====Answer===== Correct Option: 3 @csalgo"},{"id":"bf11eea7-1c73-4524-9452-f54d0b048d8c","title":"@csalgo Assignment Problem Pro","fileName":"2.InsertionSort Worst Case Time Complexity.txt","filetype":"text","fileSize":250,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/2.InsertionSort Worst Case Time Complexity.txt","fileDetails":"@csalgo Assignment Problem Problem Name: InsertionSort Worst Case Time Complexity Problem Description: Worst case time complexity of insertion sort is ? Options: 0. O(n) 1. O(n^2) 2. O(nlogn) 3. O(logn) =====Answer===== Correct Option: 1 @csalgo"},{"id":"a5766dcd-52a9-4d7e-ac49-c1b054a51b57","title":"@csalgo Assignment Problem Pro","fileName":"6.Operations for merging.txt","filetype":"text","fileSize":303,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/6.Operations for merging.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Operations for merging Problem Description: For merging two sorted arrays of size m and n into a sorted array of size m+n, we require operations  Options: 0. O(m * n) 1. O(m + n) 2. O(m) if m  = n 3. O(n) if n   m =====Answer===== Correct Option: 1 @csalgo"},{"id":"18c0303e-ca61-404e-be60-4ee70df811d5","title":"@csalgo Assignment Problem Pro","fileName":"6.Efficiency of an Algorithm.txt","filetype":"text","fileSize":293,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/6.Efficiency of an Algorithm.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Efficiency of an Algorithm Problem Description: Two main measures for the efficiency of an algorithm are  Options: 0. Processor and memory 1. Complexity and capacity 2. Time and space 3. Data and space =====Answer===== Correct Option: 2 @csalgo"},{"id":"12bc2c29-a9c9-4ab4-852e-2007263595a4","title":"@csalgo Assignment Problem Pro","fileName":"2.Selection Sort.txt","filetype":"text","fileSize":224,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/2.Selection Sort.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Selection Sort Problem Description: Worst case time complexity of Selection sort is ? Options: 0. O(n) 1. O(n^2) 2. O(nlogn) 3. O(logn) =====Answer===== Correct Option: 1 @csalgo"},{"id":"ab51df05-8587-4fe4-96b3-aa77651ec624","title":"@csalgo Assignment Problem Pro","fileName":"6.Time Complexity.txt","filetype":"text","fileSize":344,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/6.Time Complexity.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Time Complexity Problem Description: If the number of primary operations of an algorithm that takes an array of size n as input are 3n^2 + 5n. The worst case time complexity of the algorithm will be ? Options: 0. O(n^3) 1. O((n^2)*logn) 2. O(n^2) 3. O(n) =====Answer===== Correct Option: 2 @csalgo"},{"id":"05a54189-d769-4935-beb9-8176bbaf1257","title":"No Title Description Exists","fileName":"C - Priority Queues.pdf","filetype":"pdf","fileSize":134364,"url":"http://older (11)/19.Lecture 15  Priority Queues/C - Priority Queues.pdf","fileDetails":"  C++ Foundation with Data Structures Lecture 15 : Priority Queues Implementing Min Priority Queue : A priority queue is just like a normal queue data structure except that each element inserted is associated with a “priority”. It supports the usual push(), pop(), top() etc operations, but is specifically designed so that its first element is always the greatest of the elements it contains, i.e. max heap. In STL, priority queues take three template parameters: template  class T, class Container = vector T , class Compare = less typename Container::value_type    class priority_queue; • The first element of the template defines the class of each element. It can be user defined classes or primitive data types. Like in you case it can be int, float or double. • The second element defines the container to be used to store the elements. The standard container classes std::vector and std::dequeue fulfil these requirements. It is usually the vector of the class defined in the first argument. Like in your case it can be vector int , vector float , vector double . • The third element is the comparative class. By default it is less T  but can be changed to suit your need. For min heap it can be changed to greater T . Example #include  iostream  #include  queue  using namespace std; int main() { priority_queue int, vector int , greater int    pq; pq.push(40); pq.push(320); pq.push(42); pq.push(42); pq.push(65); pq.push(12); pq.push(245); cout   pq.top()   endl; return 0; } The above code used the greater T  functional. Below is the code using a comparative class which performs operator overloading. The code below will make it clear. #include iostream  #include  queue  using namespace std; class Comp{ public: bool operator () (int a, int b) { return a   b; } }; int main() { priority_queue int, vector int , Comp  pq; pq.push(40); pq.push(320); pq.push(42); pq.push(42); pq.push(65); pq.push(12); pq.push(245); cout pq.top() endl; return 0; } The output for both the code will be 12. The priority_queue uses the function inside Comp class to maintain the elements sorted in a way that preserves heap properties(i.e., that the element popped is the last according to this strict weak ordering). In above example we have used custom function which will make the heap as min heap. "},{"id":"fc31bdff-da59-4814-95db-d1b7a780466f","title":"No Title Description Exists","fileName":"C - Recursion.pdf","filetype":"pdf","fileSize":134801,"url":"http://older (11)/3.Lecture 3 Recursion 1/C - Recursion.pdf","fileDetails":"  C++ Foundation with Data Structures Topic: Recursion Recursion a. What is Recursion? In previous lectures, we used iteration to solve problems. Now, we’ll learn about recursion for solving problems which contain smaller sub ­‐problems of the same kind. Recursion in computer science is a method where the solution to a problem depends on solutions to smaller instances of the same problem. By same nature it actually means that the approach that we use to solve the original problem can be used to solve smaller problems as well. So in other words in recursion a function calls itself to solve smaller problems. Recursion is a popular approach for solving problems because recursive solutions are generally easier to think than their iterative counterparts and the code is also shorter and easier to understand. b. How Does Recursion Work? We can define the steps of a recursive solution as follows: 1. Base Case: A recursive function must have a terminating condition at which the function will stop calling itself. Such a condition is known as a base case. 2. Recursive Call: The recursive function will recursively invoke itself on the smaller version of problem. We need to be careful while writing this step as it is important to correctly figure out what your smaller problem is on whose solution the original problem’s solution depends. 3. Small Calculation: Generally we perform a some calculation step in each recursive call. We can perform this calculation step before or after the recursive call depending upon the nature of the problem. It is important to note here that recursion uses stack to store the recursive calls. So, to avoid memory overflow problem, we should define a recursive solution with minimum possible number of recursive calls such that the base condition is achieved before the recursion stack starts overflowing on getting completely filled. Now, let us look at an example to calculate factorial of a number using recursion. Example Code 1: #include iostream  using namespace std; int fact(int n) { if(n==0)  Base Case { return 1; } return n * fact(n ­‐1);  Recursive call with small calculation } int main() { int num; cin num; cout fact(num); return 0; } Output: 120  For num=5 Explanation: Here, we called factorial function recursively till number became 0. Then, the statements below the recursive call statement were executed. We can visualize the recursion tree for this function, where let n=5, as follows: We are calculating the factorial of n=5 here. We can infer that the function recursively calls fact(n) till n becomes 0, which is the base case here. In the base case, we returned the value 1. Then, the statements after the recursive calls were executed which returned n*fact(n ­‐1) for each call. Finally, fact(5) returned the answer 120 to main() from where we had invoked the fact() function. Now, let us look at another example to find n th  Fibonacci number . In Fibonacci series to calculate nth Fibonacci number we can use the formula F(n) = F(n – 1) + F(n – 2) i.e. nth Fibonacci term is equal to sum of n ­‐1 and n ­‐2 Fibonacci terms. So let’s use this to write recursive code for nth Fibonacci number. Example Code 2: fact(5) fact(4) fact(3) fact(2) fact(1) fact(0) Returns 1 Returns 3 * 2 = 6 Returns 1 * 1 = 1 Returns 2 * 1 = 2 Returns 4 * 6 = 24 fact(5) finally returns 5 * 24 = 120 to the code which called the function fact(n)   Recursive function: int fibo(int n) { if(n==0 || n==1) {  Base Case return n; } int a = fibo(n ­‐1);  Recursive call int b = fibo(n ­‐2);  Recursive call return a+b;  Small Calculation and return statement } Explanation: As we are aware of the Fibonacci Series (0, 1, 1, 2, 3, 5, 8,... and so on), let us assume that the index starts from 0, so, 5 th  Fibonacci number will correspond to 5; 6 th  Fibonacci number will correspond to 8; and so on. Here, in recursive Fibonacci function, we have made two recursive calls which are depicted as follows: Note: One thing that we should be clear about is that both recursive calls don’t happen simultaneously. First fibo(n ­‐1) is called, and only after we have its result and store it in “a” we move to next statement to calculate fibo(n – 2). It is interesting to note here that the concept of recursion is based on the mathematical concept of PMI (Principle of Mathematical Induction). When we use PMI to prove a theorem, we have to show that the base case (usually for x=0 or x=1) is true and, the induction hypothesis for case x=k is true must imply that case x=k+1 is also true. We can now understand how the steps which we followed in recursion are based on the induction steps, as in recursion also, we have a base case while the assumption corresponds to the recursive call. fibo(n) fibo(n ­‐1) fibo(n ­‐2) "},{"id":"b7a67df8-b986-4b0e-92e4-326a9aaee8ad","title":"No Title Description Exists","fileName":"Exception Handling - C.pdf","filetype":"pdf","fileSize":198709,"url":"http://older (11)/25.Lecture 19  OOPS 3/Exception Handling - C.pdf","fileDetails":"  C++ Foundation with Data Structures Exception Handling Exception Handling An exception is a problem or error that arises during the execution of a program. There could be errors that cause the programs to fail or certain conditions that lead to errors. If these run time errors are not handled by the program, OS handles them and program terminates abruptly, which is not good. Few of such errors or error conditions are divide by zero, out of bound index, accessing memory not allowed to access, etc. To avoid such conditions, C++ provides exception handling mechanism. C++ exception handling is built upon three keywords: try, catch, and throw. 1. throw − A program throws an exception when a problem shows up. This is done using a throw keyword. 2. catch − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception 3. try − A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks Why we need Exception Handling: 1. Exception handling provide a way to transfer control from one part of a program to another and can avoid the brupt termination of program. int main() { int n1, n2; try { cout   \"Enter two nos:\"; cin   n1   n2; if (n2 == 0) throw \"Divide by zero\"; else throw n1 n2; }catch (char *s) { cout   s; } catch (int ans){ cout   ans; } cout   \"Done\"; } In the above example we can see if user enters n2 as 0, then we will throw an exception and we can avoid abrupt termination of program. 2. Separation of Error Handling code from Normal Code: In traditional error handling codes, there are always if else conditions to handle errors. These conditions and the code to handle errors get mixed up with the normal flow. This makes the code less readable and maintainable. With try catch blocks, the code for error handling becomes separate from the normal flow. 3. Functions Methods can handle any exceptions they choose: A function can throw many exceptions, but may choose to handle some of them. The other exceptions which are thrown, but not caught can be handled by caller. If the caller chooses not to catch them, then the exceptions are handled by caller of the caller. In C++, a function can specify the exceptions that it throws using the throw keyword. The caller of this function must handle the exception in some way (either by specifying it again or catching it) 4. Grouping of Error Types: In C++, both basic types and objects can be thrown as exception. We can create a hierarchy of exception objects, group exceptions in namespaces or classes, categorize them according to types Some examples to understand exception handling better 1. Following is a simple example to show exception handling in C++. The output of program explains flow of execution of try catch blocks #include  iostream  using namespace std; int main() { int x =  1; cout   \"Before try\"   endl; try{ cout   \"Inside try  n\"; if (x   0) { throw x; cout   \"After throw\"   endl; } } catch(int x) { cout   \"Exception Caught\"   endl; } cout   \"After catch\"   endl; } Output : Before try Inside try Exception Caught After catch In the above example we can see the normal flow of throw, catch block. We can observe that after the exception is thrown, the remaining try block after throw statement is not executed, instead program control goes to catch and never comes back. But all the code below the catch block is executed. So to conclude code after throw is never executed but all the code after catch gets executed. 2. Above example shows that when exception is caught in try block it goes to a catch block whose parameter matched the throws argument, but if let’s suppose I choose x to be double, then I need another catch block for that, which accepts double variable. To handle such conditions we have a special all catch block, which catches all types of exceptions. #include  iostream  using namespace std; int main() { try { throw 10; } catch (char c) { cout   \"character type exception\"   endl; } catch(...) { cout   \"Default Exception\"   endl; } } Output: Default Exception We can see here that catch(...) catches all type of exceptions. Few things about all catch blocks : a) If there are multiple catch blocks, all catch block should be placed last. b) Since all catch block (generic catch) is placed last, if any specific type exception occurs, it will try to find its specific catch block and if it is not found then it will go to the generic catch block. 3. Implicit type conversion doesn’t happen for primitive types. #include  iostream  using namespace std; int main() { try { throw 10; } catch (double c) { cout   \"integer type exception\"   endl; } catch(...) { cout   \"Default Exception\"   endl; } } Output : Default Exception Here in the above example, “throw 10” should be Implicitly get converted to double, but it doesn’t get converted. Instead it get caught in generic catch block. So Implicit type casting doesn’t happen for primitive type. 4. If an exception is thrown and not caught anywhere, the program terminates abnormally. #include  iostream  using namespace std; int main() { try{ char c = 'a'; throw c; } catch(int x) { cout   \"integer exception\"   endl; } } Output : terminating with uncaught exception of type char Abort trap: 6 If the catch block for any throw doesn’t exists it will terminate abruptly. 5. Nested try blocks #include  iostream  using namespace std; int main() { try { try { throw 20; } catch (int n) { cout   \"Inner catch \"   endl; throw;  Re throwing an exception } } catch (int n) { cout   \"Outer catch\"   endl; } } Output : Inner catch Outer catch A function can also re throw a function using same “throw“. A function can handle a part and can ask the caller to handle remaining. 6. When an exception is thrown, all objects created inside the enclosing try block are destructed before the control is transferred to catch block. #include  iostream  using namespace std; class Test { public: Test() { cout   \"Constructor called\"   endl; } ~Test() { cout   \"Destructor called\"   endl; } }; int main() { try { Test t1; throw 10; } catch(int i) { cout   \"Caught \"   i   endl; } } Output: Constructor called Destructor called Caught 10 Define New Exceptions You can define your own exceptions by inheriting and overriding exception class functionality. Below is the example, which shows how you can use exception class to implement your own exception #include  iostream  #include  exception  using namespace std; class MyException : public exception { virtual const char * what () const throw () { return \"C++ Exception\"; } }myex; int main() { try { throw myex; } catch(exception& e) { std::cout   e.what()   endl; } catch(MyException& e) {  Other errors } } Output for the above code : MyException caught C++ Exception what() is a public method provided by exception class and it has been overridden by all the child exception classes. This returns the cause of an exception. "},{"id":"a5b116a0-b47f-4a5e-8a6e-76a931446692","title":"No Title Description Exists","fileName":"C - Pointers.pdf","filetype":"pdf","fileSize":167569,"url":"http://older (11)/1.Lecture 1  Pointers/C - Pointers.pdf","fileDetails":"  C++ Foundation with Data Structures Topic : Pointers Address of Operator (&) The address of a variable can be obtained by preceding the name of a variable with an ampersand sign (&), known as address ­‐of operator. For example: cout   (&var)   endl; This would print address of variable var; by preceding the name of the variable var with the address ­‐of operator (&), we are no longer printing the content of the variable itself, but its address. What are Pointers? Pointers are one of the most important aspects of C++. Pointers are another type of variables in CPP and these variables store addresses of other variables. While creating a pointer variable, we need to mention the type of data whose address is stored in the pointer. e.g. in order to create a pointer which stores address of an integer, we need to write: int* p; This means that p will contain address of an integer. So, if a pointer is going to store address of datatype X, it will be declared like this: X* p; Now let’s say we have an integer i & an integer pointer p, we will use addressof(&) operator in order to put address of i in p. Address of operator:& as studied abpve is a unary operator which returns address of a variable. e.g. &i will give us address of variable i. Here is the code to put address of i in p. int i = 10; int* p; p = &i; Dereference Operator As just seen, a variable which stores the address of another variable is called a pointer. Pointers are said to \"point to\" the variable whose address they store. An interesting property of pointers is that they can be used to access the variable they point to directly. This is done by preceding the pointer name with the dereference operator (*). The operator itself can be read as \"value pointed to by\". Therefore, following with the values of the previous example, consider the following statement: int a = *p; So in this assignment we are assigning value pointed to by pointer p(i.e. value of to int i) to int variable a. The reference and dereference operators are thus complementary: • & is the address ­‐of operator, and can be read simply as \"address of\" • * is the dereference operator, and can be read as \"value pointed to by\" Thus, they have sort of opposite meanings: An address obtained with & can be dereferenced with *. Note that the asterisk (*) used when declaring a pointer only means that it is a pointer (it is part of its type compound specifier), and should not be confused with the dereference operator seen above, but which is also written with an asterisk (*). They are simply two different things represented with the same sign. Following #include  iostream  using namespace std; int main () { int firstvalue = 5, secondvalue = 15; char thirdvalue = ‘a’; int * p1, * p2; char *p3; firstvalue is 10 secondvalue is 20 thirdvalue is b p1 = &firstvalue;   p1 = address of firstvalue p2 = &secondvalue;   p2 = address of secondvalue p3 = &thirdvalue;   p3 = address of thirdvalue *p1 = 10;   value pointed to by p1 = 10 *p2 = *p1;   value pointed to by p2 = value pointed to by p1 p1 = p2;   p1 = p2 (value of pointer is copied) *p1 = 20;   value pointed to by p1 = 20 *p3 = ‘b’   value pointed to by p3 = ‘b ’ cout   \"firstvalue is \"   firstvalue   ' n'; cout   \"secondvalue is \"   secondvalue   ' n'; cout   \"thirdvalue is \"   thirdvalue   ' n'; return 0; } Note: While solving pointers question, you should use pen and paper and draw things to get better idea. Null Pointer Consider the following statement – int *p; Here we have created a pointer variable that contains garbage value. In order to dereference the pointer, we will try reading out the value at the garbage stored in the pointer. This will lead to unexpected results or segmentation faults. Hence we should never leave a pointer uninitialized and instead initialize it to NULL, so as to avoid unexpected behavior. int *p = NULL;   NULL is a constant with a value 0 int *q = 0;   Same as above So now if we try to dereference the pointer we will get segmentation fault as 0 is a reserved memory address. Pointer Arithmetic Arithmetic operations on pointers behave differently than they do on simple data types we studied earlier. Only addition and subtraction operations are allowed; the others aren’t allowed on pointers. But both addition and subtraction have a slightly different behavior with pointers, according to the size of the data type to which they point. For example: char always has a size of 1 byte, short is generally larger than that, and int and long are even larger; the exact size of these being dependent on the system. For example, let's imagine that in a given system, char takes 1 byte, short takes 2 bytes, and long takes 4. Suppose now that we define three pointers in this compiler: char *mychar; short *myshort; long *mylong; and that we know that they point to the memory locations 1000, 2000, and 3000, respectively. Therefore, if we write: ++mychar; ++myshort; ++mylong; mychar, as one would expect, would contain the value 1001. But not so obviously, myshort would contain the value 2002, and mylong would contain 3004, even though they have each been incremented only once. The reason is that, when adding one to a pointer, the pointer is made to point to the following element of the same type, and, therefore, the size in bytes of the type it points to is added to the pointer. This is applicable both when adding and subtracting any number to a pointer. It would happen exactly the same if we wrote: mychar = mychar + 1; myshort = myshort + 1; mylong = mylong + 1; Essentially, these are the four possible combinations of the dereference operator with both the prefix and suffix versions of the increment operator (the same being applicable also to the decrement operator): 1 2 3 4 *p++   same as *(p++): increment pointer, and dereference unincremented address *++p   same as *(++p): increment pointer, and dereference incremented address ++*p   same as ++(*p): dereference pointer, and increment the value it points to (*p)++   dereference pointer, and post ­‐increment the value it points to Pointers may be compared by using relational operators, such as ==,  , and  . If p1 and p2 point to variables that are related to each other, such as elements of the same array, then p1 and p2 can be meaningfully compared. Pointer and Arrays Pointers and arrays are intricately linked. An Array is actually a pointer that points to the first element of the array. Because the array variable is a pointer, you can dereference it, which returns array element 0. Consider the following code – int a[] = {1,2,3,4,5}; int *b = &a[0]; cout   b   endl; cout   a   endl; cout   *b   endl;   This will print 1 Both b and a will print same same address as they are referring to first element of the array. Also in arrays  ­‐ a[i] is same as *(a + i). Consider an example for the same– #include iostream  using namespace std; int main(){ int a[5] = {1,2,3,4,5}; cout   *(a + 2)   endl; } Output: 3 Differences between arrays and pointers: 1. the sizeof operator: sizeof(array) returns the amount of memory used by all elements in array whereas sizeof(pointer) only returns the amount of memory used by the pointer variable itself. #include iostream  using namespace std; int main(){ int a[5] = {1,2,3,4,5}; int *b = &a[0]; cout   sizeof(a)   endl; cout   sizeof(b)   endl; } Output : 20 8   Size of pointer is compiler dependent. Here it is 8. 2. the & operator In the example above &a is an alias for &a[0] and returns the address of the first element in array &b returns the address of pointer. 3. Pointer variable can be assigned a value whereas array variable cannot be. int a[10]; int *p; p=a;  legal a=p;  illegal 4. Arithmetic on pointer variable is allowed, but not allowed on array variable. p++;  Legal a++;  illegal Double Pointer As we know by now that pointers are variables that store address of other variables, so we can create variables that store address of pointer itself i.e. a pointer to a pointer. Let’s see how can we create one. int a = 10; int *p = &a; int **q = &p; Here q is a pointer to a pointer i.e. a double pointer,as indicated by **. Consider the following code for better understanding – #include iostream  using namespace std; int main(){ int a = 10; int *p = &a; int **q = &p;   Next three statements will print same value i.e. address of a cout   &a   endl; cout   p   endl; cout   *q   endl;   Next two statements will print same value i.e. address of p cout   &p   endl; cout   q   endl;   Next two statements will print same value i.e. value of a which is 10 cout   a   endl; cout   *p   endl; cout   **q   endl; } Void Pointer A void pointer is a generic pointer, it has no associated type with it. A void pointer can hold address of any type and can be typcasted to any type. Void pointer is declared normally the way we do for pointers. void *ptr; This statement will create a void pointer. Example: void *v; int *i; int ivar; char chvar; float fvar; v = &ivar;   valid v = &chvar;  valid v = &fvar;   valid i = &ivar;  valid i = &chvar;  invalid i = &fvar;  invalid Thus we can use void pointer to store address of any variable. "},{"id":"cba0c98c-98d8-49e5-852a-5f1bacf3d7b5","title":"@csalgo Assignment Problem Pro","fileName":"6.Time Complexity of Code.txt","filetype":"text","fileSize":670,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/6.Time Complexity of Code.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Time Complexity of Code Problem Description: What will be the Time Complexity of following code in terms of ‘n’ ? Note : Assume k to be a constant value Refer the code in C++   for(int i = 0; i   n; i++){  for(int j = 1 ; j   k; j++){  cout   (i + j )   endl;  }  } Refer the same code in Java  for(int i = 0; i   n; i++){  for(int j = 1 ; j   k; j++){  System.out.println(i + j);  } } Refer the same code in Python  for i in range(n):  for j in range(k):  print(i+j) Options: 0. O(n^2) 1. O(n) 2. O(logn) 3. None of these =====Answer===== Correct Option: 1 @csalgo"},{"id":"c0121425-cefe-4946-970e-da0de1476d95","title":"@csalgo Assignment Problem Pro","fileName":"2.Linear Search.txt","filetype":"text","fileSize":226,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/2.Linear Search.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Linear Search Problem Description: The worst case time complexity of Linear search is : Options: 0. O(n) 1. O(n^2) 2. O(nlogn) 3. O(logn) =====Answer===== Correct Option: 0 @csalgo"},{"id":"a3b96d49-d2fb-42a9-bfaf-b7ce144ff22b","title":"@csalgo Assignment Problem Pro","fileName":"8.Merge sort.txt","filetype":"text","fileSize":215,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/8.Merge sort.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Merge sort Problem Description: What is the time complexity of merge sort : Options: 0. O(n) 1. O(n^2) 2. O(nlogn) 3. O(log n) =====Answer===== Correct Option: 2 @csalgo"},{"id":"f2fac3ca-32e2-4b9f-b824-4aae503690ce","title":"@csalgo Assignment Problem Pro","fileName":"6. Theoretical Analysis.txt","filetype":"text","fileSize":394,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/6. Theoretical Analysis.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Theoretical Analysis Problem Description: In theoretical analysis the time factor when determining the efficiency of algorithm is measured by  Options: 0. Counting microseconds 1. Counting the number of statements in code 2. Counting the number of unit operations 3. Counting the kilobytes of algorithm =====Answer===== Correct Option: 2 @csalgo"},{"id":"846ec8f4-1070-4f20-a8fa-dc512735e76c","title":"@csalgo Assignment Problem Pro","fileName":"8.Recurrence for Merge Sort.txt","filetype":"text","fileSize":287,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/8.Recurrence for Merge Sort.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Recurrence for Merge Sort Problem Description: What is the recurrence relation for merge sort : Options: 0. T(n) = 2T(n 2) 1. T(n) = 2T(n 2) + k 2. T(n) = 2T(n 2) + O(n) 3. T(n) = 2T(n 2) + O(log n) =====Answer===== Correct Option: 2 @csalgo"},{"id":"3ece14b7-5371-47de-8c0b-7fba2ece9f7a","title":"@csalgo Chapter TEST Problem S","fileName":"2.Complexity of a Recurrence Relation.txt","filetype":"text","fileSize":328,"url":"http://older (11)/7.Test 1/2.Complexity of a Recurrence Relation.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Complexity of a Recurrence Relation Problem Level: EASY Problem Description: Which one of the following correctly determines the solution of the recurrence relation with T(1) = 1? T(n) = 2T(n 2) + Logn 0.O(N) 1.O(NlogN) 2.O(N^2) 3.O(log N) =====Answer===== Correct Option: 0 @csalgo"},{"id":"fc041240-99b5-485d-b8c4-ba551565a433","title":"@csalgo Chapter TEST Problem S","fileName":"0.Recurrence Relation for Tower of Hanoi Problem.txt","filetype":"text","fileSize":382,"url":"http://older (11)/7.Test 1/0.Recurrence Relation for Tower of Hanoi Problem.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Recurrence Relation for Tower of Hanoi Problem Problem Level: EASY Problem Description: The recurrence relation capturing the optimal execution time of the Towers of Hanoi problem with n discs is : 0.T(n) = 2T(n − 2) + 2 1.T(n) = 2T(n − 1) + n 2.T(n) = 2T(n 2) + 1 3.T(n) = 2T(n − 1) + 1 =====Answer===== Correct Option: 3 @csalgo"},{"id":"1103c877-a95f-45f0-b063-d1e9c45c75ca","title":"@csalgo Chapter TEST Problem S","fileName":"1.Complexity of different operations in a sorted array..txt","filetype":"text","fileSize":409,"url":"http://older (11)/7.Test 1/1.Complexity of different operations in a sorted array..txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Complexity of different operations in a sorted array. Problem Level: EASY Problem Description: Which of the following operations is not O(1) for an array of sorted data. You may assume that array elements are distinct. 0.Find the ith largest element 1.Delete an element 2.Find the ith smallest element 3.All of the above =====Answer===== Correct Option: 1 @csalgo"},{"id":"ddb4c130-7b53-47d1-8838-a39fd99d73c6","title":"No Title Description Exists","fileName":"C - Time Complexity.pdf","filetype":"pdf","fileSize":166172,"url":"http://older (11)/6.Lecture 5  Time and Space Complexity Analysis/C - Time Complexity.pdf","fileDetails":"  C++ Foundation with Data Structures Topic: Time Complexity Introduction An important question while programming is: How efficient is an algorithm or piece of code? Efficiency covers lots of resources, including: • CPU (time) usage • memory usage • disk usage • network usage All are important but we are mostly concerned about CPU time. Be careful to differentiate between: 1. Performance: how much time memory disk etc. is actually used when a program is run. This depends on the machine, compiler, etc. as well as the code we write. 2. Complexity: how do the resource requirements of a program or algorithm scale, i.e. what happens as the size of the problem being solved by the code gets larger. Complexity affects performance but not vice ­‐versa. The time required by a function method is proportional to the number of \"basic operations\" that it performs. Here are some examples of basic operations: • one arithmetic operation (e.g. a+b   a*b) • one assignment (e.g. int x = 5) • one condition test (e.g. x == 0) • one input read (e.g. reading a variable from console) • one output write (e.g. writing a variable on console) Some functions methods perform the same number of operations every time they are called. For example, the size function method of the string class always performs just one operation: return number of Items; the number of operations is independent of the size of the string. We say that functions methods like this (that always perform a fixed number of basic operations) require constant time. Other functions methods may perform different numbers of operations, depending on the value of a parameter. For example, for the array implementation of the Vector list(Java) class(vector list classes are implemented similar to the dynamic class we have built), the remove function method has to move over all of the items that were to the right of the item that was removed (to fill in the gap). The number of moves depends both on the position of the removed item and the number of items in the list. We call the important factors (the parameters and or fields whose values affect the number of operations performed) the problem size or the input size. When we consider the complexity of a function method, we don't really care about the exact number of operations that are performed; instead, we care about how the number of operations relates to the problem size. If the problem size doubles, does the number of operations stay the same? double? increase in some other way? For constant ­‐time functions methods like the size function method, doubling the problem size does not affect the number of operations (which stays the same). Furthermore, we are usually interested in the worst case: what is the most operations that might be performed for a given problem size. For example, as discussed above, the remove function method has to move all of the items that come after the removed item one place to the left in the array. In the worst case, all of the items in the array must be moved. Therefore, in the worst case, the time for remove is proportional to the number of items in the list, and we say that the worst ­‐case time for remove is linear to the number of items in the array. For a linear ­‐time function method, if the problem size doubles, the number of operations also doubles. Big ­‐O Notation We express complexity using big ­‐O notation. For a problem of size N: a constant ­‐time function method is \"order 1\": O(1) a linear ­‐time function method is \"order N\": O(N) a quadratic ­‐time function method is \"order N squared\": O(N \" ) Note that the big ­‐O expressions do not have constants or low ­‐order terms. This is because, when N gets large enough, constants and low ­‐order terms don't matter (a constant ­‐time function method will be faster than a linear ­‐time function method, which will be faster than a quadratic ­‐time function method). See below for an example. Formal definition: A function T(N) is O(F(N)) if for some constant c and for all values of N greater than some value n $ : T(N)  = c * F(N) The idea is that T(N) is the exact complexity of a function method or algorithm as a function of the problem size N, and that F(N) is an upper ­‐bound on that complexity (i.e. the actual time space or whatever for a problem of size N will be no worse than F(N)). In practice, we want the smallest F(N)  ­‐ the least upper bound on the actual complexity. For example, consider T(N) = 3 * N \"  + 5. We can show that T(N) is O(N \" ) by choosing c = 4 and n $  = 2. This is because for all values of N greater than 2: 3 * N \"  + 5  = 4 * N \"  T(N) is not O(N), because whatever constant c and value n0 you choose, I can always find a value of N greater than n $  so that 3 * N \"  + 5 is greater than c * N. How to Determine Complexities In general, how can you determine the running time of a piece of code? The answer is that it depends on what kinds of statements are used. 1. Sequence of statements statement 1; statement 2; ... statement k; The total time is found by adding the times for all statements: total time = time(statement 1) + time(statement 2) + ... + time(statement k) If each statement is \"simple\" (only involves basic operations) then the time for each statement is constant and the total time is also constant: O(1). In the following examples, assume the statements are simple unless noted otherwise. 2. if ­‐then ­‐else statements if (condition) { sequence of statements 1 } else { sequence of statements 2 } Here, either sequence 1 will execute, or sequence 2 will execute. Therefore, the worst ­‐case time is the slowest of the two possibilities: max(time(sequence 1), time(sequence 2)). For example, if sequence 1 is O(N) and sequence 2 is O(1) the worst ­‐case time for the whole if ­‐then ­‐else statement would be O(N). 3. for loops for (i = 0; i   N; i++) { sequence of statements } The loop executes N times, so the sequence of statements also executes N times. Since we assume the statements are O(1), the total time for the for loop is N * O(1), which is O(N) overall. 4. Nested loops First we'll consider loops where the number of iterations of the inner loop is independent of the value of the outer loop's index. For example: for (i = 0; i   N; i++) { for (j = 0; j   M; j++) { sequence of statements } } The outer loop executes N times. Every time the outer loop executes, the inner loop executes M times. As a result, the statements in the inner loop execute a total of N * M times. Thus, the complexity is O(N * M). In a common special case where the stopping condition of the inner loop is j   N instead of j   M (i.e., the inner loop also executes N times), the total complexity for the two loops is O(N \" ). Now let's consider nested loops where the number of iterations of the inner loop depends on the value of the outer loop's index. For example: for (i = 0; i   N; i++) { for (j = i+1; j   N; j++) { sequence of statements } } Now we can't just multiply the number of iterations of the outer loop times the number of iterations of the inner loop, because the inner loop has a different number of iterations each time. So let's think about how many iterations that inner loop has. That information is given in the following table: Value of i Number of iterations of inner loop 0 N 1 N ­‐1 2 N ­‐2 ... ... N ­‐2 2 N ­‐1 1 So we can see that the total number of times the sequence of statements executes is: N + N ­‐1 + N ­‐2 + ... + 3 + 2 + 1. the total is O(N \" ). 5. Statements with function method calls: When a statement involves a function method call, the complexity of the statement includes the complexity of the function method call. Assume that you know that function method f takes constant time, and that function method g takes time proportional to (linear in) the value of its parameter k. Then the statements below have the time complexities indicated. f(k);   O(1) g(k);   O(k) When a loop is involved, the same rule applies. For example: for (j = 0; j   N; j++) { g(N); } has complexity (N \" ). The loop executes N times and each function method call g(N) is complexity O(N). Best ­‐case and Average ­‐case Complexity Some functions methods may require different amounts of time on different calls, even when the problem size is the same for both calls. For example, consider the add function method that adds an item to the end of the Vector list. In the worst case (the array is full), that function method requires time proportional to the number of items in the Vector list (because it has to copy all of them into the new, larger array). However, when the array is not full, add will only have to copy one value into the array, so in that case its time is independent of the length of the Vector list; i.e. constant time. In general, we may want to consider the best and average time requirements of a function method as well as its worst ­‐case time requirements. Which is considered the most important will depend on several factors. For example, if a function method is part of a time ­‐critical system like one that controls an airplane, the worst ­‐case times are probably the most important (if the plane is flying towards a mountain and the controlling program can't make the next course correction until it has performed a computation, then the best ­‐case and average ­‐case times for that computation are not relevant  ­‐ ­‐ the computation needs to be guaranteed to be fast enough to finish before the plane hits the mountain). On the other hand, if occasionally waiting a long time for an answer is merely inconvenient (as opposed to life ­‐threatening), it may be better to use an algorithm with a slow worst ­‐case time and a fast average ­‐case time, rather than one with so ­‐ so times in both the average and worst cases. Note that calculating the average ­‐case time for a function method can be tricky. You need to consider all possible values for the important factors, and whether they will be distributed evenly. When do Constants Matter? Recall that when we use big ­‐O notation, we drop constants and low ­‐order terms. This is because when the problem size gets sufficiently large, those terms don't matter. However, this means that two algorithms can have the same big ­‐O time complexity, even though one is always faster than the other. For example, suppose algorithm 1 requires N \"  time, and algorithm 2 requires 10 * N \"  + N time. For both algorithms, the time is O(N \" ), but algorithm 1 will always be faster than algorithm 2. In this case, the constants and low ­‐order terms do matter in terms of which algorithm is actually faster. However, it is important to note that constants do not matter in terms of the question of how an algorithm \"scales\" (i.e., how does the algorithm's time change when the problem size doubles). Although an algorithm that requires N \"  time will always be faster than an algorithm that requires 10*N \"  time, for both algorithms, if the problem size doubles, the actual time will quadruple. When two algorithms have different big ­‐O time complexity, the constants and low ­‐ order terms only matter when the problem size is small. For example, even if there are large constants involved, a linear ­‐time algorithm will always eventually be faster than a quadratic ­‐time algorithm. This is illustrated in the following table, which shows the value of 100*N (a time that is linear in N) and the value of N \" 100 (a time that is quadratic in N) for some values of N. For values of N less than 104, the quadratic time is smaller than the linear time. However, for all values of N greater than 104, the linear time is smaller. N 100*N 퐍 ퟐ 100 10 \"  10 )  10 \"  10 *  10 +  10 )  10 )  10 ,  10 ,  10 +  10  10 .  10 ,  10 .  10 $  10  10 0  10 \"  "},{"id":"ff4d5829-8927-4f1d-bb3a-34c9be6d1629","title":"@csalgo Chapter TEST Problem S","fileName":"3.Does s contain t .txt","filetype":"text","fileSize":660,"url":"http://older (11)/7.Test 1/3.Does s contain t .txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Does s contain t ? Problem Level: EASY Problem Description: Given two string s and t, write a function to check if s contains all characters of t (in the same order as they are in string t). Return true or false. Do it recursively. E.g. : s = “abchjsgsuohhdhyrikkknddg” contains all characters of t=”coding” in the same order. So function will return true. Input Format : Line 1 : String s Line 2 : String t Output Format : true or false Sample Input 1 : abchjsgsuohhdhyrikkknddg coding Sample Output 1 : true Sample Input 2 : abcde aeb Sample Output 2 : false =====Answer===== Correct Option: @csalgo"},{"id":"e124ca08-6b6c-4f5a-8953-7625e6437f41","title":"@csalgo Chapter TEST Problem S","fileName":"4.Maximum Profit on App.txt","filetype":"text","fileSize":1196,"url":"http://older (11)/7.Test 1/4.Maximum Profit on App.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Maximum Profit on App Problem Level: MEDIUM Problem Description: You have made a smartphone app and want to set its price such that the profit earned is maximised. There are certain buyers who will buy your app only if their budget is greater than or equal to your price. You will be provided with a list of size N having budgets of buyers and you need to return the maximum profit that you can earn. Lets say you decide that price of your app is Rs. x and there are N number of buyers. So maximum profit you can earn is :  m * x where m is total number of buyers whose budget is greater than or equal to x. Input format : Line 1 : N (No. of buyers) Line 2 : Budget of buyers (separated by space) Output Format :  Maximum profit Constraints : 1  = N  = 10^6 Sample Input 1 : 4 30 20 53 14 Sample Output 1 : 60 Sample Output 1 Explanation : Price of your app should be Rs. 20 or Rs. 30. For both prices, you can get the profit Rs. 60. Sample Input 2 : 5 34 78 90 15 67 Sample Output 2 : 201 Sample Output 2 Explanation : Price of your app should be Rs. 67. You can get the profit Rs. 201 (i.e. 3 * 67). =====Answer===== Correct Option: @csalgo"},{"id":"572a1f02-37f6-45fd-9881-09647cb2c591","title":"@csalgo Chapter TEST Problem S","fileName":"5.Split Array.txt","filetype":"text","fileSize":1104,"url":"http://older (11)/7.Test 1/5.Split Array.txt","fileDetails":"@csalgo Chapter TEST Problem Statement: Split Array Problem Level: MEDIUM Problem Description: Given an integer array A of size N, check if the input array can be splitted in two parts such that   Sum of both parts is equal  All elements in the input, which are divisible by 5 should be in same group.  All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.  Elements which are neither divisible by 5 nor by 3, can be put in any group. Groups can be made with any set of elements, i.e. elements need not to be continuous. And you need to consider each and every element of input array in some group. Return true, if array can be split according to the above rules, else return false. Note : You will get marks only if all the test cases are passed. Input Format : Line 1 : Integer N (size of array) Line 2 : Array A elements (separated by space) Output Format : true or false Constraints : 1  = N  = 50 Sample Input 1 : 2 1 2 Sample Output 1 : false Sample Input 2 : 3 1 4 3 Sample Output 2 : true =====Answer===== Correct Option: @csalgo"},{"id":"c196f19d-a46e-4f28-82cd-7b7eac9cd00f","title":"@csalgo Coding Problem Problem","fileName":"12.Complex Number Class.txt","filetype":"text","fileSize":1421,"url":"http://older (11)/8.Lecture 6 OOPS 1/12.Complex Number Class.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Complex Number Class Problem Level: MEDIUM Problem Description: A ComplexNumber class contains two data members : one is the real part (R) and the other is imaginary (I) (both integers). Implement the Complex numbers class that contains following functions  1. constructor You need to create the appropriate constructor. 2. plus  This function adds two given complex numbers and updates the first complex number. e.g. if C1 = 4 + i5 and C2 = 3 +i1 C1.plus(C2) results in: C1 = 7 + i6 and C2 = 3 + i1 3. multiply  This function multiplies two given complex numbers and updates the first complex number. e.g. if C1 = 4 + i5 and C2 = 1 + i2 C1.multiply(C2) results in: C1 =  6 + i13 and C2 = 1 + i2 4. print  This function prints the given complex number in the following format : a + ib Note : There is space before and after '+' (plus sign) and no space between 'i' (iota symbol) and b. Input Format : Line 1 : Two integers   real and imaginary part of 1st complex number Line 2 : Two integers   real and imaginary part of 2nd complex number Line 3 : An integer representing choice (1 or 2) (1 represents plus function will be called and 2 represents multiply function will be called) Output format : Check details of 'print' function given above. Sample Input 1 : 4 5 6 7 1 Sample Output 1 : 10 + i12 Sample Input 2 : 4 5 6 7 2 Sample Output 2 : 11 + i58 @csalgo"},{"id":"ae395e66-4783-4cf9-8fb3-81a0befabd69","title":"@csalgo Assignment Problem Pro","fileName":"2.Correct Statement.txt","filetype":"text","fileSize":408,"url":"http://older (11)/8.Lecture 6 OOPS 1/2.Correct Statement.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Correct Statement Problem Description: Figure out the correct statement class Car{  public : int price; }; int main() {  Car c;  Figure out the correct statement to set the price of the car object referred to by c to “10000” } Options: 0. c price = 10000 1. Car.price = 10000 2. c.price = 10000; =====Answer===== Correct Option: 2 @csalgo"},{"id":"e9cfe1f3-73ac-4a81-903a-b32ab5aeb87a","title":"@csalgo Assignment Problem Pro","fileName":"2.False statement.txt","filetype":"text","fileSize":427,"url":"http://older (11)/8.Lecture 6 OOPS 1/2.False statement.txt","fileDetails":"@csalgo Assignment Problem Problem Name: False statement Problem Description: Which statement is not true in C++ language ? Options: 0. A public member of a class can be accessed outside the class. 1. A private member of a class cannot be accessed by the functions of the same class. 2. A private member of a class cannot be accessed outside the same class. 3. None of the above =====Answer===== Correct Option: 1 @csalgo"},{"id":"0da6be86-e5a6-4257-a82a-c67ab8e109b6","title":"@csalgo Assignment Problem Pro","fileName":"8.Copy Assignment Operator.txt","filetype":"text","fileSize":515,"url":"http://older (11)/8.Lecture 6 OOPS 1/8.Copy Assignment Operator.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Copy Assignment Operator Problem Description: Consider following piece of code: #include iostream using namespace std; class Pair{  public :  int first;  int second; }; int main(){  Pair p1;  p1.first = 10;  p1.second = 20;  Pair p2;  p2 = p1;  cout   p2.first   \" \"   p2.second   endl; } What will be the output ? Options: 0. 10 20 1. Error 2. Garbage_value Garbage_value =====Answer===== Correct Option: 0 @csalgo"},{"id":"d9d2b15c-5262-4ae4-8913-b5e8f03794d9","title":"@csalgo Assignment Problem Pro","fileName":"2.What is the output.txt","filetype":"text","fileSize":416,"url":"http://older (11)/8.Lecture 6 OOPS 1/2.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: What will be the output of the following program ? #include  iostream using namespace std; class Shape{  public : int height;  int width; }; int main() {  Shape *s = new Shape();  s   height = 1;  cout   s   height; } Options: 0. Error 1. 0 2. 1 3. GarbageValue =====Answer===== Correct Option: 2 @csalgo"},{"id":"7d03cf60-54b6-4d91-8ddf-6c62fe9e19b3","title":"@csalgo Assignment Problem Pro","fileName":"2.Create object.txt","filetype":"text","fileSize":299,"url":"http://older (11)/8.Lecture 6 OOPS 1/2.Create object.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Create object Problem Description: Which of the following is are a valid statement(s) to create an object of class Bird in C++ ? Options: 0. Bird b = new Bird; 1. Bird *b = new Bird; 2. Bird b; 3. new Bird b; =====Answer===== Correct Option: 2 @csalgo"},{"id":"86ab15b7-6af3-44f8-bb4b-0d96ad484d49","title":"@csalgo Assignment Problem Pro","fileName":"5.What is the output.txt","filetype":"text","fileSize":573,"url":"http://older (11)/8.Lecture 6 OOPS 1/5.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: What will be the output of the following code ? #include  iostream using namespace std; class Student{  public :  char name;  int rollNo;  Student(int num){  rollNo = num;  }  void print(){  cout   name   \" \"   rollNo;  } }; int main() {  Student *s = new Student();  s   name = 'A';  s   rollNo = 15;  s   print(); } Options: 0. GarbageValue 0 1. GarbageValue 15 2. Compilation Error =====Answer===== Correct Option: 2 @csalgo"},{"id":"07e10cbc-b5ae-4884-a20f-e0c84e5f71b2","title":"@csalgo Assignment Problem Pro","fileName":"8.Copy Constructor.txt","filetype":"text","fileSize":407,"url":"http://older (11)/8.Lecture 6 OOPS 1/8.Copy Constructor.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Copy Constructor Problem Description: Assume class DEMO. Which of the following statement(s) responsible to invoke copy constructor? 1. DEMO D2(D1);   Here D1 is an already created object of class DEMO 2. D2 = D1;   Here D1, D2 are already created objects of class DEMO Options: 0. Only 1 1. Only 2 2. Both 1 and 2 =====Answer===== Correct Option: 0 @csalgo"},{"id":"fef1a585-8c26-48b1-8633-250f5fb3cc27","title":"@csalgo Assignment Problem Pro","fileName":"8.Find Incorrect Statement.txt","filetype":"text","fileSize":481,"url":"http://older (11)/8.Lecture 6 OOPS 1/8.Find Incorrect Statement.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Find Incorrect Statement Problem Description: Which of the following statements are not true about destructor? 1. It is invoked when object goes out of the scope 2. Like constructor, it can also have parameters 3. It can be declared in private section 4. It bears same name as that of the class and precedes tilde sign. Options: 0. Only 2, 4 1. Only 2, 3 2. Only 1, 3 3. Only 1, 4 4. Only 2 =====Answer===== Correct Option: 4 @csalgo"},{"id":"31202ba3-212c-448a-8963-912d7c1637a5","title":"@csalgo Assignment Problem Pro","fileName":"1.What is the output.txt","filetype":"text","fileSize":637,"url":"http://older (11)/9.Lecture 7 OOPS 2/1.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: #include  iostream using namespace std; class Student{  public :  char *name;  int rollNo;  void print(){  cout   name   \" \"   rollNo   \" \";  } }; int main() {  char name[] = \"Misha\";  Student s1;  s1.name = name;  s1.rollNo = 101;  name[0] = 'N';  Student s2;  s2.name = name;  s2.rollNo = 102;  s1.print();  s2.print(); } Options: 0. Misha 101 Nisha 102 1. Nisha 101 Nisha 102 2. Misha 101 Misha 102 3. Nisha 101 Misha 102 =====Answer===== Correct Option: 1 @csalgo"},{"id":"16b2df39-a424-4175-bf0b-5e29d96e2504","title":"@csalgo Coding Problem Problem","fileName":"14.Polynomial class.txt","filetype":"text","fileSize":2330,"url":"http://older (11)/9.Lecture 7 OOPS 2/14.Polynomial class.txt","fileDetails":"@csalgo Coding Problem Problem Statement: Polynomial class Problem Level: MEDIUM Problem Description: Implement a polynomial class, with following properties and functions. Properties : 1. An integer (lets say A) which holds the coefficient and degrees. Use array indices as degree and A[i] as coefficient of ith degree. 2. An integer holding total size of array A. Functions : 1. Default constructor 2. Copy constructor 3. setCoefficient  This function sets coefficient for a particular degree value. If the given degree is greater than the current capacity of polynomial, increase the capacity accordingly and add then set the required coefficient. If the degree is within limits, then previous coefficient value is replaced by given coefficient value 4. Overload \"+\" operator (P3 = P1 + P2) : Adds two polynomials and returns a new polynomial which has result. 5. Overload \" \" operator (P3 = p1   p2) : Subtracts two polynomials and returns a new polynomial which has result 6. Overload * operator (P3 = P1 * P2) : Multiplies two polynomials and returns a new polynomial which has result 7. Overload \"=\" operator (Copy assignment operator)  Assigns all values of one polynomial to other. 8. print()  Prints all the terms (only terms with non zero coefficients are to be printed) in increasing order of degree. Print pattern for a single term :  coefficient \"x\" degree And multiple terms should be printed separated by space. And after printing one polynomial, print new line. For more clarity, refer sample test cases Input Format : Line 1 : N, total number of terms in polynomial P1 Line 2 : N integers representing degree of P1 (separated by space) Line 3 : N integers representing coefficients of P1 (separated by space) Line 4 : M, total number of terms in polynomial P2 Line 5 : M integers representing degree of P2 (separated by space) Line 6 : M integers representing coefficients of P2 (separated by space) Line 7 : Integer C, choice representing the function to be called (See main for more details) Sample Input 1 : 3 1 3 5 1 2  4 4 0 1 2 3 4 2  3 1 1 Sample Output 1 : 4x0 3x1  3x2 3x3  4x5 Sample Input 2 : 3 1 3 5 1 2  4 4 0 1 2 3 4 2  3 1 2 Sample Output 2 : 4x0  1x1 3x2 1x3  4x5 Sample Input 3 : 3 1 3 5 1 2  4 4 0 1 2 3 4 2  3 1 3 Sample Output 3 : 4x1 2x2 5x3 5x4  22x5  6x6 12x7  4x8 @csalgo"},{"id":"6200a6af-8160-4f04-8a4e-bda1e28f8707","title":"@csalgo Assignment Problem Pro","fileName":"4.What is the output.txt","filetype":"text","fileSize":446,"url":"http://older (11)/9.Lecture 7 OOPS 2/4.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: class Student {  public :  const int rollNumber;  int age;  int &x;  Student(int r, int a) : rollNumber(r), age(a) {  } }; int main() {  Student s1(100, 23);  s1.x = age;  cout   s1.rollNumber   \" \"   s1.age   \" \"   s1.x; } Options: 0. 100 23 23 1. 100 23 Garbage 2. Error 3. None =====Answer===== Correct Option: 2 @csalgo"},{"id":"df7c335a-3f8e-40ff-9697-ab0491312bc6","title":"@csalgo Assignment Problem Pro","fileName":"6.What is the output.txt","filetype":"text","fileSize":464,"url":"http://older (11)/9.Lecture 7 OOPS 2/6.What is the output.txt","fileDetails":"@csalgo Assignment Problem Problem Name: What is the output Problem Description: class Student {  int rollNumber;  public :  int age;  Student(int r) {  rollNumber = r;  }  int getRollNumber() {  return rollNumber;  } }; int main() {  Student s1(101);  s1.age = 20;  Student const s2 = s1;  cout   s2.getRollNumber(); } Options: 0. 101 1. 0 2. Garbage 3. Error =====Answer===== Correct Option: 3 @csalgo"},{"id":"6193526a-ba74-4cad-83dc-12e72177c5ad","title":"@csalgo Assignment Problem Pro","fileName":"6.Member function.txt","filetype":"text","fileSize":327,"url":"http://older (11)/9.Lecture 7 OOPS 2/6.Member function.txt","fileDetails":"@csalgo Assignment Problem Problem Name: Member function Problem Description: If a member function does not alter any data in the class, that may be declared as .................... Options: 0. constant member function 1. private member function 2. static member function 3. None =====Answer===== Correct Option: 0 @csalgo"},{"id":"15a54b54-bba3-4f11-b4bf-f78948dd67b8","title":"No Title Description Exists","fileName":"C - OOPS 1.pdf","filetype":"pdf","fileSize":210247,"url":"http://older (11)/8.Lecture 6 OOPS 1/C - OOPS 1.pdf","fileDetails":"  C++ Foundation with Data Structures Topic : Object Oriented Programming   1 What is Object Oriented Programming? Object Oriented Programming could be best understood with help of an example. Consider a library management system. Using procedural programming, the problem will be viewed in terms of working happening in the library i.e., issuing of book, returning the book, adding new book etc. The OOP paradigm, however aims at the objects and their interface. Thus in OOP, library management problem will be viewed in terms of the objects involved. Objects are real world entities around which the system revolves. The objects involved are: librarian, book, member etc. Hence, the object oriented approach views a problem in terms of objects involved rather than procedure for doing it. Why use Object Oriented Programming? In real life we deal with lot of objects such as people, car, account, etc. Hence, we need our software to be analogous to real world objects. Real world objects have data type properties such as name, age for people, model name for car and balance for account, etc. Moreover, real world objects can also do certain things such as people talk, cars move, account accumulates, etc. We want our code to mimic the way these objects behave and interact. Hence, Object Oriented Programming allows the program to be closer to real world and thereby making it less complex. Also it makes the software reuse feasible and possible, for example, we don't want to define a student every time we use it, hence using OOP, we just create the blueprint for the student object and use it whenever required. Classes and objects The class is a single most important C++ feature that implements OOP concepts and ties them together. Classes are needed to represent real world entities. A class is a way to bind the data describing an entity and its associated functions together. For instance, consider a user having characteristics username and password and some of its associated operations are sign up, sign in and logout. Class is just a template, which declares and defines characteristics and behavior, hence we need to declare objects of the class for it to be usable. In other words class represents a group of similar objects. Data members and member functions Data members are the data type properties that describe the characteristics of the class. Member functions are the set of operations that may be applied to objects of that class, i.e., they represent the behavioral aspect of the object. They are usually referred as class interface. Syntax for definition of a class : class class_name { Access Modifier: Data members Member functions }; The class body contains the declaration of members (data and functions). Declaring objects of a class We can declare objects of a class either statically or dynamically just as we declare variables of primitive data types. Statically Syntax for declaring objects of a class statically is: class_name object_name; Example code : class Student { public : int rollno; char name[20]; }; int main( ){ Student s1;   Declaration of object s1 of type Student Student s2;   Declaration of object s2 of type Student } Dynamically Syntax for declaring objects of a class dynamically is: class_name *object_name = new class_name Example code : class Student { public : int rollno; char name[20]; }; int main( ){ Student *s1 =new Student;   Declaration of object of type Student   dynamically } Access Modifiers The class body contains the declaration of its members (data and functions). They are generally two types of members in a class: private and public, which are correspondingly grouped under two sections namely private: and public: . The private members can be accessed only from within the class. These members are hidden from the outside world. Hence they can be used only by member functions of the class in which it is declared. The public members can be accessed outside the class also. These can be directly accessed by any function, whether member function of the class or non member function. These are basically the public interface of the class. By default, members of a class are private if no access specifier is provided. Example code : class A { int x, y; int sqr(){ return x * x; } public : int z; int twice(){ return 2 * y; } int test(int i){ int q = sqr( );   private function being invoked   by member function return q + i; } }; int main() { A obj; obj.z = 10;   valid. z is a public member obj.x = 4;   Invalid. x is a private member and hence can   be accessed only by member functions   not directly by using object int j = obj.twice( );   valid. twice( ) is a public member function int k = obj.sqr( );   Invalid. sqr() is a private member function int l = obj.test( );   valid. test is a public member function } Getter and setters The private members of the class are not accessible outside the class, although sometimes there is a necessity to provide access even to private members, in these cases we need to create functions called getters and setters. Getters are those functions that allow us to access data members of the object. However, these functions do not change the value of data members. These are also called accessor function. Setters are the member functions that allow us to change the data members of an object. These are also called mutator function. Example code : class Student { int rollno; char name[20]; float marks; char grade; public : int getRollno( ){ return rollno; } int getMarks( ){ return marks; } void setGrade( ){ if (marks   90) grade ='A';; else if (marks   80) grade = 'B'; else if (marks   70) grade = 'C'; else if (marks   60) grade = 'D'; else grade = 'E'; } }; getRollno( ) and getMarks( ) are getter functions and setGrade( ) is a setter function. Defining Member functions outside the class We can also define member functions outside the class using scope resolution operator :: . For example lets move the definition of the two functions defined in student class above outside the class. class Student { int rollno; char name[20]; float marks; char grade; public : int getRollno( ); int getMarks( ); void setGrade( ){ if (marks   90) grade ='A';; else if (marks   80) grade = 'B'; else if (marks   70) grade = 'C'; else if (marks   60) grade = 'D'; else grade = 'E'; } }; int Student::getMarks(){ return marks; } int Student::getRollNo(){ return rollNo; } We can access member functions in similar manner via an object of class Student and using dot operator. Constructors A constructor in a class is means of initializing or creating objects of a class. A constructor allocates memory to the data members when an object is created. It may also initialize the object with legal initial value. A constructor has following characteristics: • Constructor is a member function of a class and has same name as that of the class. • Constructor functions are invoked automatically when the objects are created. • Constructor functions obey the usual access rules. That is, private constructors are available only for member functions, however, public constructors are available for all functions • Constructor has no return type, not even void. Default constructor A constructor that accepts no parameter is called default constructor. The compiler automatically supplies a default constructor implicitly. This constructor is the public member of the class. It allocates memory to the data members of the class and is invoked automatically when an object of that class is created. Having a default constructor simply means that a program can declare instances of the class. Example code : class Sum { int a, b; public : int getSum(){ return a + b; } } ; int main() { Sum obj;  implicit default constructor invoked } Whenever an object of person class is created implicit default constructor is invoked automatically that assigns memory to its data members, i.e., name and age. • Creating your own default constructor One can define their own default constructor. When a user defined default constructor is created, the compiler's implicit default constructor is overshadowed. Example code : class Sum { int a, b; public : Sum( ) {   user defined default constructor cout   \"constructor invoked\"; a = 10; b = 20; } int getSum(){ return a + b; } } ; int main() { Sum obj;  explicitly defined default constructor invoked } Output : constructor invoked In this case, user defined default constructor will be invoked when an object obj of person class is created and the data members of that object, a and b, are initialized to default values 10 and 20. Parameterized constructor The constructors that can take arguments are called parameterized constructor. Example code : class Sum { int a, b; public : Sum(int num1, int num2 ) {   parameterized constructor a = num1; b = num2; } int getSum(){ return a + b; } } ; int main() { Sum obj(4, 2);  parametrized constructor invoked } Declaring a constructor with arguments hides the default constructor. Hence, the object declaration statement such as Person obj; may not work. It is necessary to pass the initial value arguments to the constructor function when an object is declared. This can be done in two ways : 1. By calling constructor explicitly. Sum obj = Sum(4 ,2) ; 2. By calling constructor implicitly.(as illustrated in example code) Sum obj(4, 2) ; Destructors Just as the objects are created, so are they destroyed. If a class can have constructor to set things up, it should have a destructor to destruct the objects. A destructor as the name itself suggests, is used to destroy the objects that have been created by a constructor. A destructor is also a member function whose name is the same as the class name but preceded by tilde ('~'). For instance, destructor for class Sum will be ~Sum( ). A destructor takes no arguments, and no return types can be specified for it, not even void. It is automatically called by the compiler when an object is destroyed. A destructor frees up the memory area of the object that is no longer accessible. Example code: class Sum { int a, b; public : Sum(int num1, int num2 ) {   parameterized constructor cout   \"Constructor at work\"   endl; a = num1; b = num2; } ~Sum( ){  destructor cout  \"Destructor at work\"   endl; } int getSum(){ return a + b; } } int main() { Sum obj(4, 6); } Output : Constructor at work Destructor at work As soon as obj goes out of scope, destructor is called and obj is destroyed releasing its occupied memory. NOTE: • If we fail to define a destructor for a class, the compiler automatically generates one for static allocations. • Destructors are invoked in the reverse order in which the constructors were called. • Only the function having access to the constructor and destructor of a class, can define objects of this class types otherwise compiler reports an error. this keyword C++ uses a unique keyword called this to represent an object that invokes a member function. this is a pointer that points to the object for which this function was called. For example, the function call for obj.getSum() will set the pointer this to the address of the object obj. This unique pointer is automatically passed to a member function when it is called. The pointer this acts as an implicit argument to all the member functions. Example code: class Sum { int a, b; public : Sum(int a, int b ) { this a = a; this b = b; } int getSum(){ return a + b; } } In the constructor of the Sum class, since the data members and data members have the same name, this keyword is used to differentiate between the two. Here, this a refers to the data member a of the object obj. "}]